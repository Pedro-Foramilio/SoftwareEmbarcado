
proj_final_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006118  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006228  08006228  00007228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006354  08006354  00008084  2**0
                  CONTENTS
  4 .ARM          00000000  08006354  08006354  00008084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006354  08006354  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006354  08006354  00007354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006358  08006358  00007358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800635c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000115c  20000084  080063e0  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011e0  080063e0  000081e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b4f  00000000  00000000  000080ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c5  00000000  00000000  0001cbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000203c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f87  00000000  00000000  000217c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae44  00000000  00000000  00022747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017647  00000000  00000000  0003d58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009877c  00000000  00000000  00054bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed34e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005578  00000000  00000000  000ed394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f290c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08006210 	.word	0x08006210

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08006210 	.word	0x08006210

08000150 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	4a06      	ldr	r2, [pc, #24]	@ (8000184 <vApplicationGetIdleTaskMemory+0x28>)
 800016c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800016e:	68bb      	ldr	r3, [r7, #8]
 8000170:	4a05      	ldr	r2, [pc, #20]	@ (8000188 <vApplicationGetIdleTaskMemory+0x2c>)
 8000172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	2240      	movs	r2, #64	@ 0x40
 8000178:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017a:	bf00      	nop
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	200000a0 	.word	0x200000a0
 8000188:	20000140 	.word	0x20000140

0800018c <conv_7_seg>:
argmento:  valHEX(valor hexadecimal) + kte TIPO_DISPLAY="0" anodo comum
A ordem dos bits no registrador de deslocamento e':
dp g f e d c b a 0 0 0 0 0 0 0 0  (fazer OR no retorno p/ ligar 1 dos displays)
OBS: esta rotina nao liga o DP   (ele deve ser ligado no retorno)
 ----------------------------------------------------------------------------*/
uint16_t conv_7_seg(int8_t valHEX) {
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
  uint16_t sseg = 0xFF00;              // inicializa MSByte da palavra com 0xFF
 8000196:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800019a:	81fb      	strh	r3, [r7, #14]
  switch(valHEX)                       // valores default p/ ANODO comum
 800019c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a0:	2b10      	cmp	r3, #16
 80001a2:	d869      	bhi.n	8000278 <conv_7_seg+0xec>
 80001a4:	a201      	add	r2, pc, #4	@ (adr r2, 80001ac <conv_7_seg+0x20>)
 80001a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001aa:	bf00      	nop
 80001ac:	080001f1 	.word	0x080001f1
 80001b0:	080001f9 	.word	0x080001f9
 80001b4:	08000201 	.word	0x08000201
 80001b8:	08000209 	.word	0x08000209
 80001bc:	08000211 	.word	0x08000211
 80001c0:	08000219 	.word	0x08000219
 80001c4:	08000221 	.word	0x08000221
 80001c8:	08000229 	.word	0x08000229
 80001cc:	08000231 	.word	0x08000231
 80001d0:	08000239 	.word	0x08000239
 80001d4:	08000241 	.word	0x08000241
 80001d8:	08000249 	.word	0x08000249
 80001dc:	08000251 	.word	0x08000251
 80001e0:	08000259 	.word	0x08000259
 80001e4:	08000261 	.word	0x08000261
 80001e8:	08000269 	.word	0x08000269
 80001ec:	08000271 	.word	0x08000271
  {
    case 0x0: {sseg = 0xC000; break;}  // retorna val p/ 0
 80001f0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80001f4:	81fb      	strh	r3, [r7, #14]
 80001f6:	e043      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x1: {sseg = 0xF900; break;}  // retorna val p/ 1
 80001f8:	f44f 4379 	mov.w	r3, #63744	@ 0xf900
 80001fc:	81fb      	strh	r3, [r7, #14]
 80001fe:	e03f      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x2: {sseg = 0xA400; break;}  // retorna val p/ 2
 8000200:	f44f 4324 	mov.w	r3, #41984	@ 0xa400
 8000204:	81fb      	strh	r3, [r7, #14]
 8000206:	e03b      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x3: {sseg = 0xB000; break;}  // retorna val p/ 3
 8000208:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800020c:	81fb      	strh	r3, [r7, #14]
 800020e:	e037      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x4: {sseg = 0x9900; break;}  // retorna val p/ 4
 8000210:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000214:	81fb      	strh	r3, [r7, #14]
 8000216:	e033      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x5: {sseg = 0x9200; break;}  // retorna val p/ 5
 8000218:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 800021c:	81fb      	strh	r3, [r7, #14]
 800021e:	e02f      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x6: {sseg = 0x8200; break;}  // retorna val p/ 6
 8000220:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8000224:	81fb      	strh	r3, [r7, #14]
 8000226:	e02b      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x7: {sseg = 0xF800; break;}  // retorna val p/ 7
 8000228:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800022c:	81fb      	strh	r3, [r7, #14]
 800022e:	e027      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x8: {sseg = 0x8000; break;}  // retorna val p/ 8
 8000230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000234:	81fb      	strh	r3, [r7, #14]
 8000236:	e023      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x9: {sseg = 0x9000; break;}  // retorna val p/ 9
 8000238:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800023c:	81fb      	strh	r3, [r7, #14]
 800023e:	e01f      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xA: {sseg = 0x8800; break;} // retorna val p/ A
 8000240:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8000244:	81fb      	strh	r3, [r7, #14]
 8000246:	e01b      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xB: {sseg = 0x8300; break;} // retorna val p/ B
 8000248:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
 800024c:	81fb      	strh	r3, [r7, #14]
 800024e:	e017      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xC: {sseg = 0xC600; break;} // retorna val p/ C
 8000250:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000254:	81fb      	strh	r3, [r7, #14]
 8000256:	e013      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xD: {sseg = 0xA100; break;} // retorna val p/ D
 8000258:	f44f 4321 	mov.w	r3, #41216	@ 0xa100
 800025c:	81fb      	strh	r3, [r7, #14]
 800025e:	e00f      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xE: {sseg = 0x8600; break;} // retorna val p/ E
 8000260:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8000264:	81fb      	strh	r3, [r7, #14]
 8000266:	e00b      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xF: {sseg = 0x8E00; break;} // retorna val p/ F
 8000268:	f44f 430e 	mov.w	r3, #36352	@ 0x8e00
 800026c:	81fb      	strh	r3, [r7, #14]
 800026e:	e007      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x10: {sseg = 0xFF00; break;} // default = tudo desligado
 8000270:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000274:	81fb      	strh	r3, [r7, #14]
 8000276:	e003      	b.n	8000280 <conv_7_seg+0xf4>
    default: {sseg = 0xBF00; break;} // ERRO retorna "-" (so' g ligado)
 8000278:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800027c:	81fb      	strh	r3, [r7, #14]
 800027e:	bf00      	nop
  }
  if (TIPO_DISPLAY == 0)             // 0 = ANODO COMUM sai como a tabela
    return sseg;
 8000280:	89fb      	ldrh	r3, [r7, #14]
  else                               // CATODO COMUM, inverte bits (bitwise)
    return ~sseg;
}
 8000282:	4618      	mov	r0, r3
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <serializar>:


// fn serializa dados de 'ser_data' p/ 74HC595 (shield multifuncao do Arduino)
// Baixa RCLK, envia 16 bits p/ SDATA e pulsa SCLK. Ao final, sobe RCLK
void serializar(uint16_t ser_data) {
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	80fb      	strh	r3, [r7, #6]
  GPIOB->ODR = GPIOB->ODR & ~(0x1 << 6);     // zera pino GPIOB_6
 8000296:	4b20      	ldr	r3, [pc, #128]	@ (8000318 <serializar+0x8c>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a1f      	ldr	r2, [pc, #124]	@ (8000318 <serializar+0x8c>)
 800029c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002a0:	60d3      	str	r3, [r2, #12]
  int stts = 15;                             // 1o. envia bit MSB 1o. = dp
 80002a2:	230f      	movs	r3, #15
 80002a4:	60fb      	str	r3, [r7, #12]
  do {                                       // repete enquanto stts >= 0
    if ((ser_data >> stts) & 1) {            // ser_data desloc >> ssts ='1'
 80002a6:	88fa      	ldrh	r2, [r7, #6]
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	fa42 f303 	asr.w	r3, r2, r3
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d006      	beq.n	80002c4 <serializar+0x38>
      GPIOB->ODR = GPIOB->ODR | (0x1 << 10); // liga GPIOB_10 (SDATA = 1)
 80002b6:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <serializar+0x8c>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a17      	ldr	r2, [pc, #92]	@ (8000318 <serializar+0x8c>)
 80002bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002c0:	60d3      	str	r3, [r2, #12]
 80002c2:	e005      	b.n	80002d0 <serializar+0x44>
    } else {
      GPIOB->ODR = GPIOB->ODR & ~(0x1 << 10);// desliga B10 (SDATA=0)
 80002c4:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <serializar+0x8c>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a13      	ldr	r2, [pc, #76]	@ (8000318 <serializar+0x8c>)
 80002ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002ce:	60d3      	str	r3, [r2, #12]
    }
    // ajustado o pino SDATA (acima), agora pulsa o clock SCLK
    GPIOB->ODR = GPIOB->ODR | (0x1 << 9);    // liga GPIOB_9
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <serializar+0x8c>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a10      	ldr	r2, [pc, #64]	@ (8000318 <serializar+0x8c>)
 80002d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002da:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR = GPIOB->ODR & ~(0x1 << 9);   // desliga B9
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <serializar+0x8c>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000318 <serializar+0x8c>)
 80002e2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80002e6:	60d3      	str	r3, [r2, #12]
    -- stts;                                 // dec stts p/ o novo bit
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	3b01      	subs	r3, #1
 80002ec:	60fb      	str	r3, [r7, #12]
  } while (stts >= 0);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	dad8      	bge.n	80002a6 <serializar+0x1a>
  // depois de serializar os 16 bits, gera RCK p/ paralelizar os dados
  GPIOB->ODR = GPIOB->ODR & ~(0x1 << 10);    // desliga B10
 80002f4:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <serializar+0x8c>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a07      	ldr	r2, [pc, #28]	@ (8000318 <serializar+0x8c>)
 80002fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002fe:	60d3      	str	r3, [r2, #12]
  GPIOB->ODR = GPIOB->ODR | (0x1 << 6);      // liga pino GPIOB_6
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <serializar+0x8c>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a04      	ldr	r2, [pc, #16]	@ (8000318 <serializar+0x8c>)
 8000306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800030a:	60d3      	str	r3, [r2, #12]
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40010c00 	.word	0x40010c00

0800031c <conv_num_ASC>:


// fn que converte um dos valores numericos em codigo ASCII
// faz critica do valor 'n' que tem que ser entre 0 e 9
uint8_t conv_num_ASC(int8_t n) {
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
  // testa se n esta' dentro da faixa numerica
  if ((n < 0) || (n > 9)) return 0x45; // sai cod ascii do 'E' (erro)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	2b00      	cmp	r3, #0
 800032c:	db03      	blt.n	8000336 <conv_num_ASC+0x1a>
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	2b09      	cmp	r3, #9
 8000334:	dd01      	ble.n	800033a <conv_num_ASC+0x1e>
 8000336:	2345      	movs	r3, #69	@ 0x45
 8000338:	e002      	b.n	8000340 <conv_num_ASC+0x24>
  else return (0x00 | (n + 0x30));     // uint8_t <= sai cod ascii
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	3330      	adds	r3, #48	@ 0x30
 800033e:	b2db      	uxtb	r3, r3
}
 8000340:	4618      	mov	r0, r3
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr

0800034a <conv_ASC_num>:


// fn que converte ASCII de um numero em valor decimal
// faz critica de cados, o caractere 'c' tem que estar entre 0x30 e 0x39
int8_t conv_ASC_num(uint8_t c) {
 800034a:	b480      	push	{r7}
 800034c:	b083      	sub	sp, #12
 800034e:	af00      	add	r7, sp, #0
 8000350:	4603      	mov	r3, r0
 8000352:	71fb      	strb	r3, [r7, #7]
  // testa se esta' fora da faixa numerica
  if ((c < 0x30) || (c > 0x39)) return 0x45;  // cod ascii do 'E' (erro)
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	2b2f      	cmp	r3, #47	@ 0x2f
 8000358:	d902      	bls.n	8000360 <conv_ASC_num+0x16>
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b39      	cmp	r3, #57	@ 0x39
 800035e:	d901      	bls.n	8000364 <conv_ASC_num+0x1a>
 8000360:	2345      	movs	r3, #69	@ 0x45
 8000362:	e003      	b.n	800036c <conv_ASC_num+0x22>
  else return (c - 0x30);              // int8_t <= sai valor numerico
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	3b30      	subs	r3, #48	@ 0x30
 8000368:	b2db      	uxtb	r3, r3
 800036a:	b25b      	sxtb	r3, r3
}
 800036c:	4618      	mov	r0, r3
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
	...

08000378 <mostrar_no_display>:


// fn que faz a varredura e mostra no display os dados do vetor Dsp[]
// ajuste o vetor D[] e var pto e chame essa funcao
// chame essa funcao pelo menos 30 x 4displays = 120 vezes por segundo
void mostrar_no_display(int8_t D[], uint8_t pto) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	70fb      	strb	r3, [r7, #3]
  // var de estado que controla a varredura (qual display é mostrado)
  static enum {DIG_MIL, DIG_CEN, DIG_DEZ, DIG_UNI} sttVARRE=DIG_UNI;
  uint16_t ser_data;                   // dado a ser serializado
  uint16_t val7seg;                    // dado com quais segmts ligam
  switch(sttVARRE)                     // escolher qual DIG vai varrer
 8000384:	4b5b      	ldr	r3, [pc, #364]	@ (80004f4 <mostrar_no_display+0x17c>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b03      	cmp	r3, #3
 800038a:	f200 80a6 	bhi.w	80004da <mostrar_no_display+0x162>
 800038e:	a201      	add	r2, pc, #4	@ (adr r2, 8000394 <mostrar_no_display+0x1c>)
 8000390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000394:	0800048d 	.word	0x0800048d
 8000398:	08000437 	.word	0x08000437
 800039c:	080003d5 	.word	0x080003d5
 80003a0:	080003a5 	.word	0x080003a5
  {
    case DIG_UNI: {                    // unidade (digito menos significante LSD)
      sttVARRE = DIG_DEZ;              // prox digito = DEZENA
 80003a4:	4b53      	ldr	r3, [pc, #332]	@ (80004f4 <mostrar_no_display+0x17c>)
 80003a6:	2202      	movs	r2, #2
 80003a8:	701a      	strb	r2, [r3, #0]
      ser_data = 0x0008;               // display #1 (LSD = 0x0008 no shield)
 80003aa:	2308      	movs	r3, #8
 80003ac:	81fb      	strh	r3, [r7, #14]
      val7seg = conv_7_seg(D[0]);      // conv dsp1_hex para 7-seg
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f993 3000 	ldrsb.w	r3, [r3]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff fee9 	bl	800018c <conv_7_seg>
 80003ba:	4603      	mov	r3, r0
 80003bc:	81bb      	strh	r3, [r7, #12]
      if (pto & 0x1) val7seg &= 0x7FFF;    // liga o ponto decimal
 80003be:	78fb      	ldrb	r3, [r7, #3]
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	f000 8085 	beq.w	80004d4 <mostrar_no_display+0x15c>
 80003ca:	89bb      	ldrh	r3, [r7, #12]
 80003cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003d0:	81bb      	strh	r3, [r7, #12]
      break;
 80003d2:	e07f      	b.n	80004d4 <mostrar_no_display+0x15c>
    }
    case DIG_DEZ: {                    // dezena (2o. digito dir <- esq)
      sttVARRE = DIG_CEN;              // ajusta p/ prox digito = CENTENA
 80003d4:	4b47      	ldr	r3, [pc, #284]	@ (80004f4 <mostrar_no_display+0x17c>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
      ser_data = 0x00004;              // bit p/ ativar display #2
 80003da:	2304      	movs	r3, #4
 80003dc:	81fb      	strh	r3, [r7, #14]
      if(D[3]>0 || D[2]>0 || D[1]>0) { // se D3 ou D2 > 0; ou D[1] != 0
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3303      	adds	r3, #3
 80003e2:	f993 3000 	ldrsb.w	r3, [r3]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	dc0b      	bgt.n	8000402 <mostrar_no_display+0x8a>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3302      	adds	r3, #2
 80003ee:	f993 3000 	ldrsb.w	r3, [r3]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	dc05      	bgt.n	8000402 <mostrar_no_display+0x8a>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	3301      	adds	r3, #1
 80003fa:	f993 3000 	ldrsb.w	r3, [r3]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	dd12      	ble.n	8000428 <mostrar_no_display+0xb0>
        val7seg = conv_7_seg(D[1]);    // converte 7-seg
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	3301      	adds	r3, #1
 8000406:	f993 3000 	ldrsb.w	r3, [r3]
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff febe 	bl	800018c <conv_7_seg>
 8000410:	4603      	mov	r3, r0
 8000412:	81bb      	strh	r3, [r7, #12]
        if (pto & 0x2) val7seg &= 0x7FFF;  // liga o ponto decimal
 8000414:	78fb      	ldrb	r3, [r7, #3]
 8000416:	f003 0302 	and.w	r3, r3, #2
 800041a:	2b00      	cmp	r3, #0
 800041c:	d00a      	beq.n	8000434 <mostrar_no_display+0xbc>
 800041e:	89bb      	ldrh	r3, [r7, #12]
 8000420:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000424:	81bb      	strh	r3, [r7, #12]
 8000426:	e005      	b.n	8000434 <mostrar_no_display+0xbc>
      } else {
        val7seg = conv_7_seg(DIG_APAGADO); // se D3,D2,D1=0 apaga esse
 8000428:	2010      	movs	r0, #16
 800042a:	f7ff feaf 	bl	800018c <conv_7_seg>
 800042e:	4603      	mov	r3, r0
 8000430:	81bb      	strh	r3, [r7, #12]
      }
      break;
 8000432:	e052      	b.n	80004da <mostrar_no_display+0x162>
 8000434:	e051      	b.n	80004da <mostrar_no_display+0x162>
    }
    case DIG_CEN: {                    // centena (3o. digito dir <- esq)
      sttVARRE = DIG_MIL;              // ajusta p/ prox digito = MILHAR
 8000436:	4b2f      	ldr	r3, [pc, #188]	@ (80004f4 <mostrar_no_display+0x17c>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
      ser_data = 0x0002;               // bit p/ ativar display #3
 800043c:	2302      	movs	r3, #2
 800043e:	81fb      	strh	r3, [r7, #14]
      if(D[3]>0 || D[2]>0) {           // se D3>0 ou D2>0
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3303      	adds	r3, #3
 8000444:	f993 3000 	ldrsb.w	r3, [r3]
 8000448:	2b00      	cmp	r3, #0
 800044a:	dc05      	bgt.n	8000458 <mostrar_no_display+0xe0>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3302      	adds	r3, #2
 8000450:	f993 3000 	ldrsb.w	r3, [r3]
 8000454:	2b00      	cmp	r3, #0
 8000456:	dd12      	ble.n	800047e <mostrar_no_display+0x106>
        val7seg = conv_7_seg(D[2]);    // converte 7-seg
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3302      	adds	r3, #2
 800045c:	f993 3000 	ldrsb.w	r3, [r3]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fe93 	bl	800018c <conv_7_seg>
 8000466:	4603      	mov	r3, r0
 8000468:	81bb      	strh	r3, [r7, #12]
        if (pto & 0x4) val7seg &=0x7FFF;   // liga o ponto decimal
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	2b00      	cmp	r3, #0
 8000472:	d00a      	beq.n	800048a <mostrar_no_display+0x112>
 8000474:	89bb      	ldrh	r3, [r7, #12]
 8000476:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800047a:	81bb      	strh	r3, [r7, #12]
 800047c:	e005      	b.n	800048a <mostrar_no_display+0x112>
      } else {
        val7seg = conv_7_seg(DIG_APAGADO); // se D3 e D2=0 apaga esse
 800047e:	2010      	movs	r0, #16
 8000480:	f7ff fe84 	bl	800018c <conv_7_seg>
 8000484:	4603      	mov	r3, r0
 8000486:	81bb      	strh	r3, [r7, #12]
      }
      break;
 8000488:	e027      	b.n	80004da <mostrar_no_display+0x162>
 800048a:	e026      	b.n	80004da <mostrar_no_display+0x162>
    }
    case DIG_MIL: {                    // milhar (MSD em 4 digitos)
      sttVARRE = DIG_UNI;              // ajusta p/ prox digito = UNIDADE
 800048c:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <mostrar_no_display+0x17c>)
 800048e:	2203      	movs	r2, #3
 8000490:	701a      	strb	r2, [r3, #0]
      ser_data = 0x0001;               // bit p/ ativar display #4
 8000492:	2301      	movs	r3, #1
 8000494:	81fb      	strh	r3, [r7, #14]
      if(D[3]>0) {                     // se D3 != 0
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3303      	adds	r3, #3
 800049a:	f993 3000 	ldrsb.w	r3, [r3]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	dd12      	ble.n	80004c8 <mostrar_no_display+0x150>
        val7seg = conv_7_seg(D[3]);    // converte 7-seg
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	3303      	adds	r3, #3
 80004a6:	f993 3000 	ldrsb.w	r3, [r3]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fe6e 	bl	800018c <conv_7_seg>
 80004b0:	4603      	mov	r3, r0
 80004b2:	81bb      	strh	r3, [r7, #12]
        if (pto & 0x8) val7seg &=0x7FFF;   // liga o ponto decimal
 80004b4:	78fb      	ldrb	r3, [r7, #3]
 80004b6:	f003 0308 	and.w	r3, r3, #8
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d00c      	beq.n	80004d8 <mostrar_no_display+0x160>
 80004be:	89bb      	ldrh	r3, [r7, #12]
 80004c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004c4:	81bb      	strh	r3, [r7, #12]
      } else {
        val7seg = conv_7_seg(DIG_APAGADO); // se D3=0 apagar esse
      }
      break;
 80004c6:	e007      	b.n	80004d8 <mostrar_no_display+0x160>
        val7seg = conv_7_seg(DIG_APAGADO); // se D3=0 apagar esse
 80004c8:	2010      	movs	r0, #16
 80004ca:	f7ff fe5f 	bl	800018c <conv_7_seg>
 80004ce:	4603      	mov	r3, r0
 80004d0:	81bb      	strh	r3, [r7, #12]
      break;
 80004d2:	e001      	b.n	80004d8 <mostrar_no_display+0x160>
      break;
 80004d4:	bf00      	nop
 80004d6:	e000      	b.n	80004da <mostrar_no_display+0x162>
      break;
 80004d8:	bf00      	nop
    }
  }  // fim case
  ser_data |= val7seg;                 // OR com val7seg = dado a serializar
 80004da:	89fa      	ldrh	r2, [r7, #14]
 80004dc:	89bb      	ldrh	r3, [r7, #12]
 80004de:	4313      	orrs	r3, r2
 80004e0:	81fb      	strh	r3, [r7, #14]
  serializar(ser_data);                // serializa dado p/74HC595 (shift reg)
 80004e2:	89fb      	ldrh	r3, [r7, #14]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff fed1 	bl	800028c <serializar>
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000000 	.word	0x20000000

080004f8 <put_Q_ISR>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void put_Q_ISR(uint16_t code)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]
	xQueueSendFromISR(Q_ReqsHandle, &code,  &xHigherPriorityTaskWoken);
 8000502:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <put_Q_ISR+0x38>)
 8000504:	6818      	ldr	r0, [r3, #0]
 8000506:	1db9      	adds	r1, r7, #6
 8000508:	2300      	movs	r3, #0
 800050a:	4a0a      	ldr	r2, [pc, #40]	@ (8000534 <put_Q_ISR+0x3c>)
 800050c:	f003 fff2 	bl	80044f4 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <put_Q_ISR+0x3c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d007      	beq.n	8000528 <put_Q_ISR+0x30>
 8000518:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <put_Q_ISR+0x40>)
 800051a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	f3bf 8f4f 	dsb	sy
 8000524:	f3bf 8f6f 	isb	sy

}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200002c8 	.word	0x200002c8
 8000534:	200002f8 	.word	0x200002f8
 8000538:	e000ed04 	.word	0xe000ed04

0800053c <put_Q>:
void put_Q(uint16_t code)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
	xQueueSend(Q_ReqsHandle, &code, ( TickType_t ) 0 );
 8000546:	4b05      	ldr	r3, [pc, #20]	@ (800055c <put_Q+0x20>)
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	1db9      	adds	r1, r7, #6
 800054c:	2300      	movs	r3, #0
 800054e:	2200      	movs	r2, #0
 8000550:	f003 fece 	bl	80042f0 <xQueueGenericSend>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200002c8 	.word	0x200002c8

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b0a8      	sub	sp, #160	@ 0xa0
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f001 f885 	bl	8001674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f89d 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f98b 	bl	8000888 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000572:	f000 f921 	bl	80007b8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000576:	f000 f95d 	bl	8000834 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800057a:	f000 f8f0 	bl	800075e <MX_NVIC_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Q_Reqs */
  osMessageQDef(Q_Reqs, 16, uint16_t);
 800057e:	4b3b      	ldr	r3, [pc, #236]	@ (800066c <main+0x10c>)
 8000580:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8000584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Q_ReqsHandle = osMessageCreate(osMessageQ(Q_Reqs), NULL);
 800058a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f003 fc91 	bl	8003eb8 <osMessageCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a35      	ldr	r2, [pc, #212]	@ (8000670 <main+0x110>)
 800059a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 800059c:	4b35      	ldr	r3, [pc, #212]	@ (8000674 <main+0x114>)
 800059e:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80005a2:	461d      	mov	r5, r3
 80005a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fc1e 	bl	8003df8 <osThreadCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a2e      	ldr	r2, [pc, #184]	@ (8000678 <main+0x118>)
 80005c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_MngLED */
  osThreadDef(Task_MngLED, fnTask_MngLED, osPriorityIdle, 0, 64);
 80005c2:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <main+0x11c>)
 80005c4:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80005c8:	461d      	mov	r5, r3
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_MngLEDHandle = osThreadCreate(osThread(Task_MngLED), NULL);
 80005d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fc0b 	bl	8003df8 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a26      	ldr	r2, [pc, #152]	@ (8000680 <main+0x120>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDisplay */
  osThreadDef(TaskDisplay, fn_TaskDisplay, osPriorityIdle, 0, 64);
 80005e8:	4b26      	ldr	r3, [pc, #152]	@ (8000684 <main+0x124>)
 80005ea:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDisplayHandle = osThreadCreate(osThread(TaskDisplay), NULL);
 80005fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fbf8 	bl	8003df8 <osThreadCreate>
 8000608:	4603      	mov	r3, r0
 800060a:	4a1f      	ldr	r2, [pc, #124]	@ (8000688 <main+0x128>)
 800060c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Varrer */
  osThreadDef(Task_Varrer, fn_Task_Varrer, osPriorityIdle, 0, 64);
 800060e:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <main+0x12c>)
 8000610:	f107 0420 	add.w	r4, r7, #32
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_VarrerHandle = osThreadCreate(osThread(Task_Varrer), NULL);
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fbe5 	bl	8003df8 <osThreadCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <main+0x130>)
 8000632:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_MngComns */
  osThreadDef(Task_MngComns, fn_Task_MngComns, osPriorityIdle, 0, 64);
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <main+0x134>)
 8000636:	1d3c      	adds	r4, r7, #4
 8000638:	461d      	mov	r5, r3
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_MngComnsHandle = osThreadCreate(osThread(Task_MngComns), NULL);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fbd4 	bl	8003df8 <osThreadCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a11      	ldr	r2, [pc, #68]	@ (8000698 <main+0x138>)
 8000654:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000656:	f003 fbc8 	bl	8003dea <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
        // ATENÇÃO: como aqui nunca vai chegar mesmo!
        // exemplo de comandO para ENVIAR o buffer BufOUT pela UART1
        HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <main+0x13c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	b29b      	uxth	r3, r3
 8000660:	461a      	mov	r2, r3
 8000662:	490f      	ldr	r1, [pc, #60]	@ (80006a0 <main+0x140>)
 8000664:	480f      	ldr	r0, [pc, #60]	@ (80006a4 <main+0x144>)
 8000666:	f002 ff38 	bl	80034da <HAL_UART_Transmit_IT>
 800066a:	e7f6      	b.n	800065a <main+0xfa>
 800066c:	08006228 	.word	0x08006228
 8000670:	200002c8 	.word	0x200002c8
 8000674:	08006244 	.word	0x08006244
 8000678:	200002b4 	.word	0x200002b4
 800067c:	0800626c 	.word	0x0800626c
 8000680:	200002b8 	.word	0x200002b8
 8000684:	08006294 	.word	0x08006294
 8000688:	200002bc 	.word	0x200002bc
 800068c:	080062bc 	.word	0x080062bc
 8000690:	200002c0 	.word	0x200002c0
 8000694:	080062e8 	.word	0x080062e8
 8000698:	200002c4 	.word	0x200002c4
 800069c:	20000018 	.word	0x20000018
 80006a0:	20000004 	.word	0x20000004
 80006a4:	20000270 	.word	0x20000270

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006b2:	2228      	movs	r2, #40	@ 0x28
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 fcb0 	bl	800601c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e6:	2301      	movs	r3, #1
 80006e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006f4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 ff54 	bl	80025ac <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800070a:	f000 fd7d 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f002 f9c0 	bl	8002ab0 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000736:	f000 fd67 	bl	8001208 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	2302      	movs	r3, #2
 800073c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800073e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000742:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fb7a 	bl	8002e40 <HAL_RCCEx_PeriphCLKConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000752:	f000 fd59 	bl	8001208 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	@ 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2105      	movs	r1, #5
 8000766:	2009      	movs	r0, #9
 8000768:	f001 fc6d 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800076c:	2009      	movs	r0, #9
 800076e:	f001 fc86 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2105      	movs	r1, #5
 8000776:	2008      	movs	r0, #8
 8000778:	f001 fc65 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800077c:	2008      	movs	r0, #8
 800077e:	f001 fc7e 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2105      	movs	r1, #5
 8000786:	2007      	movs	r0, #7
 8000788:	f001 fc5d 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800078c:	2007      	movs	r0, #7
 800078e:	f001 fc76 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2105      	movs	r1, #5
 8000796:	2012      	movs	r0, #18
 8000798:	f001 fc55 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800079c:	2012      	movs	r0, #18
 800079e:	f001 fc6e 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2105      	movs	r1, #5
 80007a6:	2025      	movs	r0, #37	@ 0x25
 80007a8:	f001 fc4d 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007ac:	2025      	movs	r0, #37	@ 0x25
 80007ae:	f001 fc66 	bl	800207e <HAL_NVIC_EnableIRQ>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_ADC1_Init+0x74>)
 80007ca:	4a19      	ldr	r2, [pc, #100]	@ (8000830 <MX_ADC1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_ADC1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_ADC1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_ADC1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_ADC1_Init+0x74>)
 80007e2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80007e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_ADC1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_ADC1_Init+0x74>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	@ (800082c <MX_ADC1_Init+0x74>)
 80007f6:	f000 ff6f 	bl	80016d8 <HAL_ADC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000800:	f000 fd02 	bl	8001208 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000808:	2301      	movs	r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_ADC1_Init+0x74>)
 8000816:	f001 f9c5 	bl	8001ba4 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000820:	f000 fcf2 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000240 	.word	0x20000240
 8000830:	40012400 	.word	0x40012400

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_USART1_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	@ (8000884 <MX_USART1_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_USART1_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_USART1_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_USART1_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <MX_USART1_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_USART1_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_USART1_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_USART1_UART_Init+0x4c>)
 800086c:	f002 fde8 	bl	8003440 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 fcc7 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000270 	.word	0x20000270
 8000884:	40013800 	.word	0x40013800

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089c:	4b27      	ldr	r3, [pc, #156]	@ (800093c <MX_GPIO_Init+0xb4>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a26      	ldr	r2, [pc, #152]	@ (800093c <MX_GPIO_Init+0xb4>)
 80008a2:	f043 0320 	orr.w	r3, r3, #32
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b24      	ldr	r3, [pc, #144]	@ (800093c <MX_GPIO_Init+0xb4>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0320 	and.w	r3, r3, #32
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b21      	ldr	r3, [pc, #132]	@ (800093c <MX_GPIO_Init+0xb4>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a20      	ldr	r2, [pc, #128]	@ (800093c <MX_GPIO_Init+0xb4>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b1e      	ldr	r3, [pc, #120]	@ (800093c <MX_GPIO_Init+0xb4>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_GPIO_Init+0xb4>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a1a      	ldr	r2, [pc, #104]	@ (800093c <MX_GPIO_Init+0xb4>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_GPIO_Init+0xb4>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0308 	and.w	r3, r3, #8
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80008ea:	4815      	ldr	r0, [pc, #84]	@ (8000940 <MX_GPIO_Init+0xb8>)
 80008ec:	f001 fe0a 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008f6:	4812      	ldr	r0, [pc, #72]	@ (8000940 <MX_GPIO_Init+0xb8>)
 80008f8:	f001 fe04 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008fc:	230e      	movs	r3, #14
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000900:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_GPIO_Init+0xbc>)
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	480e      	ldr	r0, [pc, #56]	@ (8000948 <MX_GPIO_Init+0xc0>)
 8000910:	f001 fc74 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000914:	f24f 6340 	movw	r3, #63040	@ 0xf640
 8000918:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2302      	movs	r3, #2
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_GPIO_Init+0xb8>)
 800092e:	f001 fc65 	bl	80021fc <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	40010c00 	.word	0x40010c00
 8000944:	10210000 	.word	0x10210000
 8000948:	40010800 	.word	0x40010800

0800094c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// fn que atende ao callback da ISR do conversor ADC1
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint16_t val_adc = 0;                // define var para ler ADC
 8000954:	2300      	movs	r3, #0
 8000956:	83fb      	strh	r3, [r7, #30]
  if(hadc->Instance == ADC1) {         // se veio ADC1
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a31      	ldr	r2, [pc, #196]	@ (8000a24 <HAL_ADC_ConvCpltCallback+0xd8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d15c      	bne.n	8000a1c <HAL_ADC_ConvCpltCallback+0xd0>
    val_adc = HAL_ADC_GetValue(&hadc1);// capta valor adc
 8000962:	4831      	ldr	r0, [pc, #196]	@ (8000a28 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000964:	f001 f846 	bl	80019f4 <HAL_ADC_GetValue>
 8000968:	4603      	mov	r3, r0
 800096a:	83fb      	strh	r3, [r7, #30]
    // converter o valor lido em valores hexa p/ display
    int miliVolt = val_adc*3300/4095;
 800096c:	8bfb      	ldrh	r3, [r7, #30]
 800096e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000972:	fb02 f303 	mul.w	r3, r2, r3
 8000976:	4a2d      	ldr	r2, [pc, #180]	@ (8000a2c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000978:	fb82 1203 	smull	r1, r2, r2, r3
 800097c:	441a      	add	r2, r3
 800097e:	12d2      	asrs	r2, r2, #11
 8000980:	17db      	asrs	r3, r3, #31
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	61bb      	str	r3, [r7, #24]
    int uniADC = miliVolt/1000;
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	4a29      	ldr	r2, [pc, #164]	@ (8000a30 <HAL_ADC_ConvCpltCallback+0xe4>)
 800098a:	fb82 1203 	smull	r1, r2, r2, r3
 800098e:	1192      	asrs	r2, r2, #6
 8000990:	17db      	asrs	r3, r3, #31
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	617b      	str	r3, [r7, #20]
    int decADC = (miliVolt-(uniADC*1000))/100;
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	4a26      	ldr	r2, [pc, #152]	@ (8000a34 <HAL_ADC_ConvCpltCallback+0xe8>)
 800099a:	fb03 f202 	mul.w	r2, r3, r2
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a25      	ldr	r2, [pc, #148]	@ (8000a38 <HAL_ADC_ConvCpltCallback+0xec>)
 80009a4:	fb82 1203 	smull	r1, r2, r2, r3
 80009a8:	1152      	asrs	r2, r2, #5
 80009aa:	17db      	asrs	r3, r3, #31
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	613b      	str	r3, [r7, #16]
    int cnsADC = (miliVolt-(uniADC*1000)-(decADC*100))/10;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	4a20      	ldr	r2, [pc, #128]	@ (8000a34 <HAL_ADC_ConvCpltCallback+0xe8>)
 80009b4:	fb03 f202 	mul.w	r2, r3, r2
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	441a      	add	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80009c2:	fb01 f303 	mul.w	r3, r1, r3
 80009c6:	4413      	add	r3, r2
 80009c8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a3c <HAL_ADC_ConvCpltCallback+0xf0>)
 80009ca:	fb82 1203 	smull	r1, r2, r2, r3
 80009ce:	1092      	asrs	r2, r2, #2
 80009d0:	17db      	asrs	r3, r3, #31
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	60fb      	str	r3, [r7, #12]
    int mlsADC = miliVolt-(uniADC*1000)-(decADC*100)-(cnsADC*10);
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	4a16      	ldr	r2, [pc, #88]	@ (8000a34 <HAL_ADC_ConvCpltCallback+0xe8>)
 80009da:	fb03 f202 	mul.w	r2, r3, r2
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	441a      	add	r2, r3
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80009e8:	fb01 f303 	mul.w	r3, r1, r3
 80009ec:	441a      	add	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f06f 0109 	mvn.w	r1, #9
 80009f4:	fb01 f303 	mul.w	r3, r1, r3
 80009f8:	4413      	add	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
    ValAdc[3] = uniADC;         // dig mais significativo
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	b25a      	sxtb	r2, r3
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000a02:	70da      	strb	r2, [r3, #3]
    ValAdc[2] = decADC;
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	b25a      	sxtb	r2, r3
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000a0a:	709a      	strb	r2, [r3, #2]
    ValAdc[1] = cnsADC;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	b25a      	sxtb	r2, r3
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000a12:	705a      	strb	r2, [r3, #1]
    ValAdc[0] = mlsADC;
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	b25a      	sxtb	r2, r3
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000a1a:	701a      	strb	r2, [r3, #0]
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40012400 	.word	0x40012400
 8000a28:	20000240 	.word	0x20000240
 8000a2c:	80080081 	.word	0x80080081
 8000a30:	10624dd3 	.word	0x10624dd3
 8000a34:	fffffc18 	.word	0xfffffc18
 8000a38:	51eb851f 	.word	0x51eb851f
 8000a3c:	66666667 	.word	0x66666667
 8000a40:	200002d0 	.word	0x200002d0

08000a44 <HAL_UART_RxCpltCallback>:


// fn que atende ao callback da ISR quando RECEBE dado pela UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  // o que veio na UART? aqui vc vai fazer testes p/ identificar mensagens

	__disable_irq();                   // desabilita IRQs
  // exemplo: se veio um valor iniciado com 'aXXXX", veio o valor do ADC
	if (BufIN[0] == 's')
 8000a50:	4b50      	ldr	r3, [pc, #320]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b73      	cmp	r3, #115	@ 0x73
 8000a56:	d116      	bne.n	8000a86 <HAL_UART_RxCpltCallback+0x42>
	{
		HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a5e:	484e      	ldr	r0, [pc, #312]	@ (8000b98 <HAL_UART_RxCpltCallback+0x154>)
 8000a60:	f001 fd50 	bl	8002504 <HAL_GPIO_WritePin>
		modoDisplay = DISPLAY_EXTRN;
 8000a64:	4b4d      	ldr	r3, [pc, #308]	@ (8000b9c <HAL_UART_RxCpltCallback+0x158>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
		recebendoDados = 1;
 8000a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ba0 <HAL_UART_RxCpltCallback+0x15c>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
		if (A1_foi_apertado == 0)
 8000a70:	4b4c      	ldr	r3, [pc, #304]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x160>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d103      	bne.n	8000a80 <HAL_UART_RxCpltCallback+0x3c>
		{
			modoLed = WFI;
 8000a78:	4b4b      	ldr	r3, [pc, #300]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x164>)
 8000a7a:	2205      	movs	r2, #5
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	e002      	b.n	8000a86 <HAL_UART_RxCpltCallback+0x42>
		}
		else
		{
			//setup modo 2s 4 valores
			modoLed = LED_CRON_EXT;
 8000a80:	4b49      	ldr	r3, [pc, #292]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x164>)
 8000a82:	2203      	movs	r2, #3
 8000a84:	701a      	strb	r2, [r3, #0]
		}
	}

	if (BufIN[0] == 'n')
 8000a86:	4b43      	ldr	r3, [pc, #268]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b6e      	cmp	r3, #110	@ 0x6e
 8000a8c:	d116      	bne.n	8000abc <HAL_UART_RxCpltCallback+0x78>
	{
		modoDisplay = DISPLAY_INTRN;
 8000a8e:	4b43      	ldr	r3, [pc, #268]	@ (8000b9c <HAL_UART_RxCpltCallback+0x158>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a9a:	483f      	ldr	r0, [pc, #252]	@ (8000b98 <HAL_UART_RxCpltCallback+0x154>)
 8000a9c:	f001 fd32 	bl	8002504 <HAL_GPIO_WritePin>
		recebendoDados = 0;
 8000aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba0 <HAL_UART_RxCpltCallback+0x15c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
		if (A1_foi_apertado == 0)
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x160>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d103      	bne.n	8000ab6 <HAL_UART_RxCpltCallback+0x72>
		{
			modoLed = WFI;
 8000aae:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x164>)
 8000ab0:	2205      	movs	r2, #5
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	e002      	b.n	8000abc <HAL_UART_RxCpltCallback+0x78>
		}
		else
		{
			modoLed = LED_CRON;
 8000ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x164>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
		}

	}

	if (BufIN[0]=='A')
 8000abc:	4b35      	ldr	r3, [pc, #212]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b41      	cmp	r3, #65	@ 0x41
 8000ac2:	d123      	bne.n	8000b0c <HAL_UART_RxCpltCallback+0xc8>
	{

		ValAdcExt[0] = conv_ASC_num(BufIN[1]);
 8000ac4:	4b33      	ldr	r3, [pc, #204]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000ac6:	785b      	ldrb	r3, [r3, #1]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fc3e 	bl	800034a <conv_ASC_num>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b36      	ldr	r3, [pc, #216]	@ (8000bac <HAL_UART_RxCpltCallback+0x168>)
 8000ad4:	701a      	strb	r2, [r3, #0]
		ValAdcExt[1] = conv_ASC_num(BufIN[2]);
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000ad8:	789b      	ldrb	r3, [r3, #2]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fc35 	bl	800034a <conv_ASC_num>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <HAL_UART_RxCpltCallback+0x168>)
 8000ae6:	705a      	strb	r2, [r3, #1]
		ValAdcExt[2] = conv_ASC_num(BufIN[3]);
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000aea:	78db      	ldrb	r3, [r3, #3]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fc2c 	bl	800034a <conv_ASC_num>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <HAL_UART_RxCpltCallback+0x168>)
 8000af8:	709a      	strb	r2, [r3, #2]
		ValAdcExt[3] = conv_ASC_num(BufIN[4]);
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc23 	bl	800034a <conv_ASC_num>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <HAL_UART_RxCpltCallback+0x168>)
 8000b0a:	70da      	strb	r2, [r3, #3]


	}

	if (BufIN[0]=='T')
 8000b0c:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b54      	cmp	r3, #84	@ 0x54
 8000b12:	d123      	bne.n	8000b5c <HAL_UART_RxCpltCallback+0x118>
	{
		CronoExt[0] = conv_ASC_num(BufIN[1]);
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000b16:	785b      	ldrb	r3, [r3, #1]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fc16 	bl	800034a <conv_ASC_num>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b23      	ldr	r3, [pc, #140]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x16c>)
 8000b24:	701a      	strb	r2, [r3, #0]
		CronoExt[1] = conv_ASC_num(BufIN[2]);
 8000b26:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000b28:	789b      	ldrb	r3, [r3, #2]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fc0d 	bl	800034a <conv_ASC_num>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x16c>)
 8000b36:	705a      	strb	r2, [r3, #1]
		CronoExt[2] = conv_ASC_num(BufIN[3]);
 8000b38:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000b3a:	78db      	ldrb	r3, [r3, #3]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fc04 	bl	800034a <conv_ASC_num>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x16c>)
 8000b48:	709a      	strb	r2, [r3, #2]
		CronoExt[3] = conv_ASC_num(BufIN[4]);
 8000b4a:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fbfb 	bl	800034a <conv_ASC_num>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x16c>)
 8000b5a:	70da      	strb	r2, [r3, #3]

	}

	if (BufIN[0] == 't')
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b74      	cmp	r3, #116	@ 0x74
 8000b62:	d102      	bne.n	8000b6a <HAL_UART_RxCpltCallback+0x126>
	{
		put_Q_ISR((uint16_t) Q_SND_CRN);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f7ff fcc7 	bl	80004f8 <put_Q_ISR>
		//BufOUT[3] = conv_num_ASC(Crono[2]);
		//BufOUT[4] = conv_num_ASC(Crono[3]);
		//HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
	}

	if (BufIN[0] == 'a')
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b61      	cmp	r3, #97	@ 0x61
 8000b70:	d102      	bne.n	8000b78 <HAL_UART_RxCpltCallback+0x134>
	{
		put_Q_ISR((uint16_t) Q_SND_ADC);
 8000b72:	2002      	movs	r0, #2
 8000b74:	f7ff fcc0 	bl	80004f8 <put_Q_ISR>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b78:	b662      	cpsie	i
}
 8000b7a:	bf00      	nop

  	  __enable_irq();                      // volta habilitar IRQs

  // como precisa escutar a UART continuamente, reativar RECEPÇÃO via irq
  //TODO: disprar pela primeira vez em algum lugar
  	  HAL_UART_Receive_IT(&huart1, BufIN, sizeBuffs);
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x170>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	4903      	ldr	r1, [pc, #12]	@ (8000b94 <HAL_UART_RxCpltCallback+0x150>)
 8000b86:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x174>)
 8000b88:	f002 fceb 	bl	8003562 <HAL_UART_Receive_IT>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000000c 	.word	0x2000000c
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	200002e4 	.word	0x200002e4
 8000ba0:	200002e5 	.word	0x200002e5
 8000ba4:	200002f4 	.word	0x200002f4
 8000ba8:	2000001c 	.word	0x2000001c
 8000bac:	200002d8 	.word	0x200002d8
 8000bb0:	200002d4 	.word	0x200002d4
 8000bb4:	20000018 	.word	0x20000018
 8000bb8:	20000270 	.word	0x20000270

08000bbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	startTime = HAL_GetTick();
 8000bc4:	f000 fd7e 	bl	80016c4 <HAL_GetTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <StartDefaultTask+0x38>)
 8000bcc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, LED1 | LED2 | LED3 | LED4 , GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000bd4:	4808      	ldr	r0, [pc, #32]	@ (8000bf8 <StartDefaultTask+0x3c>)
 8000bd6:	f001 fc95 	bl	8002504 <HAL_GPIO_WritePin>

	HAL_UART_Receive_IT(&huart1, BufIN, sizeBuffs);
 8000bda:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <StartDefaultTask+0x40>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <StartDefaultTask+0x44>)
 8000be4:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <StartDefaultTask+0x48>)
 8000be6:	f002 fcbc 	bl	8003562 <HAL_UART_Receive_IT>
	/* Infinite loop */
  for(;;)
  {
	  // essa é a task default - vai colocar algo nela?
	  osDelay(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f003 f950 	bl	8003e90 <osDelay>
 8000bf0:	e7fb      	b.n	8000bea <StartDefaultTask+0x2e>
 8000bf2:	bf00      	nop
 8000bf4:	200002ec 	.word	0x200002ec
 8000bf8:	40010c00 	.word	0x40010c00
 8000bfc:	20000018 	.word	0x20000018
 8000c00:	2000000c 	.word	0x2000000c
 8000c04:	20000270 	.word	0x20000270

08000c08 <fnTask_MngLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fnTask_MngLED */
void fnTask_MngLED(void const * argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
 //HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_SET);

  for(;;)
  {
    switch (modoLed)
 8000c10:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc0 <fnTask_MngLED+0xb8>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	3b01      	subs	r3, #1
 8000c18:	2b05      	cmp	r3, #5
 8000c1a:	d84d      	bhi.n	8000cb8 <fnTask_MngLED+0xb0>
 8000c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c24 <fnTask_MngLED+0x1c>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c59 	.word	0x08000c59
 8000c28:	08000c71 	.word	0x08000c71
 8000c2c:	08000c89 	.word	0x08000c89
 8000c30:	08000ca1 	.word	0x08000ca1
 8000c34:	08000c4b 	.word	0x08000c4b
 8000c38:	08000c3d 	.word	0x08000c3d
    {
      case STARTUP:
    	HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c42:	4820      	ldr	r0, [pc, #128]	@ (8000cc4 <fnTask_MngLED+0xbc>)
 8000c44:	f001 fc5e 	bl	8002504 <HAL_GPIO_WritePin>
    	break;
 8000c48:	e036      	b.n	8000cb8 <fnTask_MngLED+0xb0>
      case WFI:
    	HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c50:	481c      	ldr	r0, [pc, #112]	@ (8000cc4 <fnTask_MngLED+0xbc>)
 8000c52:	f001 fc57 	bl	8002504 <HAL_GPIO_WritePin>
    	break;
 8000c56:	e02f      	b.n	8000cb8 <fnTask_MngLED+0xb0>
      case LED_CRON:
        HAL_GPIO_TogglePin(GPIOB, LED1);
 8000c58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c5c:	4819      	ldr	r0, [pc, #100]	@ (8000cc4 <fnTask_MngLED+0xbc>)
 8000c5e:	f001 fc69 	bl	8002534 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000c68:	4816      	ldr	r0, [pc, #88]	@ (8000cc4 <fnTask_MngLED+0xbc>)
 8000c6a:	f001 fc4b 	bl	8002504 <HAL_GPIO_WritePin>
        break;
 8000c6e:	e023      	b.n	8000cb8 <fnTask_MngLED+0xb0>
      case LED_ADC:
        HAL_GPIO_TogglePin(GPIOB, LED2);
 8000c70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c74:	4813      	ldr	r0, [pc, #76]	@ (8000cc4 <fnTask_MngLED+0xbc>)
 8000c76:	f001 fc5d 	bl	8002534 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED1, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8000c80:	4810      	ldr	r0, [pc, #64]	@ (8000cc4 <fnTask_MngLED+0xbc>)
 8000c82:	f001 fc3f 	bl	8002504 <HAL_GPIO_WritePin>
        break;
 8000c86:	e017      	b.n	8000cb8 <fnTask_MngLED+0xb0>
      case LED_CRON_EXT:
        HAL_GPIO_TogglePin(GPIOB, LED3);
 8000c88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c8c:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <fnTask_MngLED+0xbc>)
 8000c8e:	f001 fc51 	bl	8002534 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOB, LED4 | LED2 | LED1, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8000c98:	480a      	ldr	r0, [pc, #40]	@ (8000cc4 <fnTask_MngLED+0xbc>)
 8000c9a:	f001 fc33 	bl	8002504 <HAL_GPIO_WritePin>
        break;
 8000c9e:	e00b      	b.n	8000cb8 <fnTask_MngLED+0xb0>
      case LED_ADC_EXT:
        HAL_GPIO_TogglePin(GPIOB, LED4);
 8000ca0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ca4:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <fnTask_MngLED+0xbc>)
 8000ca6:	f001 fc45 	bl	8002534 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOB, LED3 | LED2 | LED1, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <fnTask_MngLED+0xbc>)
 8000cb2:	f001 fc27 	bl	8002504 <HAL_GPIO_WritePin>
        break;
 8000cb6:	bf00      	nop
    }

    osDelay(DT_LEDS);
 8000cb8:	2078      	movs	r0, #120	@ 0x78
 8000cba:	f003 f8e9 	bl	8003e90 <osDelay>
    switch (modoLed)
 8000cbe:	e7a7      	b.n	8000c10 <fnTask_MngLED+0x8>
 8000cc0:	2000001c 	.word	0x2000001c
 8000cc4:	40010c00 	.word	0x40010c00

08000cc8 <fn_TaskDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fn_TaskDisplay */
void fn_TaskDisplay(void const * argument)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fn_TaskDisplay */
  /* Infinite loop */
  for(;;)
  {

	  switch (modoDisplay)
 8000cd0:	4b33      	ldr	r3, [pc, #204]	@ (8000da0 <fn_TaskDisplay+0xd8>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d04d      	beq.n	8000d76 <fn_TaskDisplay+0xae>
 8000cda:	2b05      	cmp	r3, #5
 8000cdc:	dc50      	bgt.n	8000d80 <fn_TaskDisplay+0xb8>
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <fn_TaskDisplay+0x20>
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d012      	beq.n	8000d0c <fn_TaskDisplay+0x44>
 8000ce6:	e04b      	b.n	8000d80 <fn_TaskDisplay+0xb8>
	  	  case WFI:
	  		  break;

	  	  case DISPLAY_INTRN:
	  		//trocar para ADC
	  		  if (modoLed == LED_CRON)
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d103      	bne.n	8000cfa <fn_TaskDisplay+0x32>
	  		  {
	  			  modoLed = LED_ADC;
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	701a      	strb	r2, [r3, #0]
	  		  else if (modoLed == LED_ADC)
	  		  {
	  			  modoLed = LED_CRON;
	  		  }

	  		  break;
 8000cf8:	e03f      	b.n	8000d7a <fn_TaskDisplay+0xb2>
	  		  else if (modoLed == LED_ADC)
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d13a      	bne.n	8000d7a <fn_TaskDisplay+0xb2>
	  			  modoLed = LED_CRON;
 8000d04:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000d0a:	e036      	b.n	8000d7a <fn_TaskDisplay+0xb2>

	  	  case DISPLAY_EXTRN:
	  		if (modoLed == WFI)
 8000d0c:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b05      	cmp	r3, #5
 8000d14:	d103      	bne.n	8000d1e <fn_TaskDisplay+0x56>
	  		{
	  			modoLed = LED_CRON_EXT;
 8000d16:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d18:	2203      	movs	r2, #3
 8000d1a:	701a      	strb	r2, [r3, #0]
	  			else
	  			{
	  				modoLed = LED_CRON;
	  			}
	  		}
	  		break; //break do case DISPLAY EXTRN
 8000d1c:	e02f      	b.n	8000d7e <fn_TaskDisplay+0xb6>
	  		else if (modoLed == LED_CRON)
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d103      	bne.n	8000d30 <fn_TaskDisplay+0x68>
	  			modoLed = LED_ADC;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	701a      	strb	r2, [r3, #0]
	  		break; //break do case DISPLAY EXTRN
 8000d2e:	e026      	b.n	8000d7e <fn_TaskDisplay+0xb6>
	  		else if (modoLed == LED_ADC)
 8000d30:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d103      	bne.n	8000d42 <fn_TaskDisplay+0x7a>
	  			modoLed = LED_CRON_EXT;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	701a      	strb	r2, [r3, #0]
	  		break; //break do case DISPLAY EXTRN
 8000d40:	e01d      	b.n	8000d7e <fn_TaskDisplay+0xb6>
	  		else if (modoLed == LED_CRON_EXT)
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d103      	bne.n	8000d54 <fn_TaskDisplay+0x8c>
	  			modoLed = LED_ADC_EXT;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d4e:	2204      	movs	r2, #4
 8000d50:	701a      	strb	r2, [r3, #0]
	  		break; //break do case DISPLAY EXTRN
 8000d52:	e014      	b.n	8000d7e <fn_TaskDisplay+0xb6>
	  		else if (modoLed == LED_ADC_EXT)
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	d10f      	bne.n	8000d7e <fn_TaskDisplay+0xb6>
	  			if (A1_foi_apertado == 0)
 8000d5e:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <fn_TaskDisplay+0xe0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d103      	bne.n	8000d6e <fn_TaskDisplay+0xa6>
	  				modoLed = WFI;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d68:	2205      	movs	r2, #5
 8000d6a:	701a      	strb	r2, [r3, #0]
	  		break; //break do case DISPLAY EXTRN
 8000d6c:	e007      	b.n	8000d7e <fn_TaskDisplay+0xb6>
	  				modoLed = LED_CRON;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <fn_TaskDisplay+0xdc>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
	  		break; //break do case DISPLAY EXTRN
 8000d74:	e003      	b.n	8000d7e <fn_TaskDisplay+0xb6>
	  		  break;
 8000d76:	bf00      	nop
 8000d78:	e002      	b.n	8000d80 <fn_TaskDisplay+0xb8>
	  		  break;
 8000d7a:	bf00      	nop
 8000d7c:	e000      	b.n	8000d80 <fn_TaskDisplay+0xb8>
	  		break; //break do case DISPLAY EXTRN
 8000d7e:	bf00      	nop
	  }


	  if (modoDisplay == DISPLAY_INTRN)
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <fn_TaskDisplay+0xd8>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d104      	bne.n	8000d94 <fn_TaskDisplay+0xcc>
	  {
		  osDelay(DT_DISPLAY_MD1);
 8000d8a:	f640 709f 	movw	r0, #3999	@ 0xf9f
 8000d8e:	f003 f87f 	bl	8003e90 <osDelay>
 8000d92:	e79d      	b.n	8000cd0 <fn_TaskDisplay+0x8>
	  }
	  else
	  {
		  osDelay(DT_DISPLAY_MD2);
 8000d94:	f240 70cf 	movw	r0, #1999	@ 0x7cf
 8000d98:	f003 f87a 	bl	8003e90 <osDelay>
	  switch (modoDisplay)
 8000d9c:	e798      	b.n	8000cd0 <fn_TaskDisplay+0x8>
 8000d9e:	bf00      	nop
 8000da0:	200002e4 	.word	0x200002e4
 8000da4:	2000001c 	.word	0x2000001c
 8000da8:	200002f4 	.word	0x200002f4

08000dac <fn_Task_Varrer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fn_Task_Varrer */
void fn_Task_Varrer(void const * argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fn_Task_Varrer */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GetTick() - startTime > 2000  && startupComplete != 1)
 8000db4:	f000 fc86 	bl	80016c4 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	4b5e      	ldr	r3, [pc, #376]	@ (8000f34 <fn_Task_Varrer+0x188>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000dc4:	d909      	bls.n	8000dda <fn_Task_Varrer+0x2e>
 8000dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f38 <fn_Task_Varrer+0x18c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <fn_Task_Varrer+0x2e>
	  {
		  modoLed = WFI;
 8000dce:	4b5b      	ldr	r3, [pc, #364]	@ (8000f3c <fn_Task_Varrer+0x190>)
 8000dd0:	2205      	movs	r2, #5
 8000dd2:	701a      	strb	r2, [r3, #0]
		  startupComplete = 1;
 8000dd4:	4b58      	ldr	r3, [pc, #352]	@ (8000f38 <fn_Task_Varrer+0x18c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
	  }
	  switch (modoLed)
 8000dda:	4b58      	ldr	r3, [pc, #352]	@ (8000f3c <fn_Task_Varrer+0x190>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	3b01      	subs	r3, #1
 8000de2:	2b05      	cmp	r3, #5
 8000de4:	f200 809b 	bhi.w	8000f1e <fn_Task_Varrer+0x172>
 8000de8:	a201      	add	r2, pc, #4	@ (adr r2, 8000df0 <fn_Task_Varrer+0x44>)
 8000dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dee:	bf00      	nop
 8000df0:	08000e53 	.word	0x08000e53
 8000df4:	08000e83 	.word	0x08000e83
 8000df8:	08000eb3 	.word	0x08000eb3
 8000dfc:	08000ee9 	.word	0x08000ee9
 8000e00:	08000e29 	.word	0x08000e29
 8000e04:	08000e09 	.word	0x08000e09
	  		  {
	  	  	  	  case STARTUP:
	  	  	  		  DspHex[0] = 8;
 8000e08:	4b4d      	ldr	r3, [pc, #308]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	701a      	strb	r2, [r3, #0]
	  	  	  		  DspHex[1] = 8;
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e10:	2208      	movs	r2, #8
 8000e12:	705a      	strb	r2, [r3, #1]
	  	  	  		  DspHex[2] = 8;
 8000e14:	4b4a      	ldr	r3, [pc, #296]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e16:	2208      	movs	r2, #8
 8000e18:	709a      	strb	r2, [r3, #2]
	  	  	  		  DspHex[3] = 8;
 8000e1a:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	70da      	strb	r2, [r3, #3]
	  	  	  		  ptoDec = 15;
 8000e20:	4b48      	ldr	r3, [pc, #288]	@ (8000f44 <fn_Task_Varrer+0x198>)
 8000e22:	220f      	movs	r2, #15
 8000e24:	701a      	strb	r2, [r3, #0]
	  	  	  		  break;
 8000e26:	e07a      	b.n	8000f1e <fn_Task_Varrer+0x172>
	  		  	  case WFI:
	  		  		  DspHex[3] = RA[0];
 8000e28:	4b47      	ldr	r3, [pc, #284]	@ (8000f48 <fn_Task_Varrer+0x19c>)
 8000e2a:	f993 2000 	ldrsb.w	r2, [r3]
 8000e2e:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e30:	70da      	strb	r2, [r3, #3]
	  		  		  DspHex[2] = RA[1];
 8000e32:	4b45      	ldr	r3, [pc, #276]	@ (8000f48 <fn_Task_Varrer+0x19c>)
 8000e34:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000e38:	4b41      	ldr	r3, [pc, #260]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e3a:	709a      	strb	r2, [r3, #2]
	  		  		  DspHex[1] = RA[2];
 8000e3c:	4b42      	ldr	r3, [pc, #264]	@ (8000f48 <fn_Task_Varrer+0x19c>)
 8000e3e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000e42:	4b3f      	ldr	r3, [pc, #252]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e44:	705a      	strb	r2, [r3, #1]
	  		  		  DspHex[0] = RA[3];
 8000e46:	4b40      	ldr	r3, [pc, #256]	@ (8000f48 <fn_Task_Varrer+0x19c>)
 8000e48:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000e4c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000e50:	e065      	b.n	8000f1e <fn_Task_Varrer+0x172>
	  		  	  case LED_CRON:
	  		  		  DspHex[0] = Crono[0];
 8000e52:	4b3e      	ldr	r3, [pc, #248]	@ (8000f4c <fn_Task_Varrer+0x1a0>)
 8000e54:	f993 2000 	ldrsb.w	r2, [r3]
 8000e58:	4b39      	ldr	r3, [pc, #228]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e5a:	701a      	strb	r2, [r3, #0]
	  		  		  DspHex[1] = Crono[1];
 8000e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f4c <fn_Task_Varrer+0x1a0>)
 8000e5e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000e62:	4b37      	ldr	r3, [pc, #220]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e64:	705a      	strb	r2, [r3, #1]
	  		  		  DspHex[2] = Crono[2];
 8000e66:	4b39      	ldr	r3, [pc, #228]	@ (8000f4c <fn_Task_Varrer+0x1a0>)
 8000e68:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000e6c:	4b34      	ldr	r3, [pc, #208]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e6e:	709a      	strb	r2, [r3, #2]
	  		  		  DspHex[3] = Crono[3];
 8000e70:	4b36      	ldr	r3, [pc, #216]	@ (8000f4c <fn_Task_Varrer+0x1a0>)
 8000e72:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000e76:	4b32      	ldr	r3, [pc, #200]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e78:	70da      	strb	r2, [r3, #3]
	  		  		  ptoDec = 10;
 8000e7a:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <fn_Task_Varrer+0x198>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000e80:	e04d      	b.n	8000f1e <fn_Task_Varrer+0x172>
	  		  	  case LED_ADC:
	  		  		  DspHex[0] = ValAdc[0];
 8000e82:	4b33      	ldr	r3, [pc, #204]	@ (8000f50 <fn_Task_Varrer+0x1a4>)
 8000e84:	f993 2000 	ldrsb.w	r2, [r3]
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e8a:	701a      	strb	r2, [r3, #0]
	  		  		  DspHex[1] = ValAdc[1];
 8000e8c:	4b30      	ldr	r3, [pc, #192]	@ (8000f50 <fn_Task_Varrer+0x1a4>)
 8000e8e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000e92:	4b2b      	ldr	r3, [pc, #172]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e94:	705a      	strb	r2, [r3, #1]
	  		  		  DspHex[2] = ValAdc[2];
 8000e96:	4b2e      	ldr	r3, [pc, #184]	@ (8000f50 <fn_Task_Varrer+0x1a4>)
 8000e98:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000e9c:	4b28      	ldr	r3, [pc, #160]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000e9e:	709a      	strb	r2, [r3, #2]
	  		  		  DspHex[3] = ValAdc[3];
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f50 <fn_Task_Varrer+0x1a4>)
 8000ea2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000ea8:	70da      	strb	r2, [r3, #3]
	  		  		  ptoDec = 8;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <fn_Task_Varrer+0x198>)
 8000eac:	2208      	movs	r2, #8
 8000eae:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000eb0:	e035      	b.n	8000f1e <fn_Task_Varrer+0x172>
	  		  	  case LED_CRON_EXT:

	  		  		  //STR_BUFF(REQCRN);
	  		  		  //HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
	  		  		  put_Q((uint16_t) Q_REQ_CRN);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f7ff fb42 	bl	800053c <put_Q>

	  		  		  DspHex[0] = CronoExt[0];
 8000eb8:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <fn_Task_Varrer+0x1a8>)
 8000eba:	f993 2000 	ldrsb.w	r2, [r3]
 8000ebe:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000ec0:	701a      	strb	r2, [r3, #0]
	  		  		  DspHex[1] = CronoExt[1];
 8000ec2:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <fn_Task_Varrer+0x1a8>)
 8000ec4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000eca:	705a      	strb	r2, [r3, #1]
	  		  		  DspHex[2] = CronoExt[2];
 8000ecc:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <fn_Task_Varrer+0x1a8>)
 8000ece:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000ed4:	709a      	strb	r2, [r3, #2]
	  		  		  DspHex[3] = CronoExt[3];
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <fn_Task_Varrer+0x1a8>)
 8000ed8:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000ede:	70da      	strb	r2, [r3, #3]
	  		  		  ptoDec = 10;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <fn_Task_Varrer+0x198>)
 8000ee2:	220a      	movs	r2, #10
 8000ee4:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000ee6:	e01a      	b.n	8000f1e <fn_Task_Varrer+0x172>
	  		  	  case LED_ADC_EXT:
	  		  		  //STR_BUFF(REQADC);
	  		  		  //HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
	  		  		  put_Q((uint16_t) Q_REQ_ADC);
 8000ee8:	2004      	movs	r0, #4
 8000eea:	f7ff fb27 	bl	800053c <put_Q>

	  		  		  DspHex[0] = ValAdcExt[0];
 8000eee:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <fn_Task_Varrer+0x1ac>)
 8000ef0:	f993 2000 	ldrsb.w	r2, [r3]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000ef6:	701a      	strb	r2, [r3, #0]
	  		  		  DspHex[1] = ValAdcExt[1];
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <fn_Task_Varrer+0x1ac>)
 8000efa:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000f00:	705a      	strb	r2, [r3, #1]
	  		  		  DspHex[2] = ValAdcExt[2];
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <fn_Task_Varrer+0x1ac>)
 8000f04:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000f08:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000f0a:	709a      	strb	r2, [r3, #2]
	  		  		  DspHex[3] = ValAdcExt[3];
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <fn_Task_Varrer+0x1ac>)
 8000f0e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000f12:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000f14:	70da      	strb	r2, [r3, #3]
	  		  		  ptoDec = 8;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <fn_Task_Varrer+0x198>)
 8000f18:	2208      	movs	r2, #8
 8000f1a:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000f1c:	bf00      	nop
	  		  }
	  mostrar_no_display(DspHex, ptoDec);
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <fn_Task_Varrer+0x198>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4806      	ldr	r0, [pc, #24]	@ (8000f40 <fn_Task_Varrer+0x194>)
 8000f26:	f7ff fa27 	bl	8000378 <mostrar_no_display>
	  osDelay(DT_VARRE_DISPLAY);
 8000f2a:	2006      	movs	r0, #6
 8000f2c:	f002 ffb0 	bl	8003e90 <osDelay>
	  if (HAL_GetTick() - startTime > 2000  && startupComplete != 1)
 8000f30:	e740      	b.n	8000db4 <fn_Task_Varrer+0x8>
 8000f32:	bf00      	nop
 8000f34:	200002ec 	.word	0x200002ec
 8000f38:	200002f0 	.word	0x200002f0
 8000f3c:	2000001c 	.word	0x2000001c
 8000f40:	20000014 	.word	0x20000014
 8000f44:	200002dc 	.word	0x200002dc
 8000f48:	20000020 	.word	0x20000020
 8000f4c:	200002cc 	.word	0x200002cc
 8000f50:	200002d0 	.word	0x200002d0
 8000f54:	200002d4 	.word	0x200002d4
 8000f58:	200002d8 	.word	0x200002d8

08000f5c <fn_Task_MngComns>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fn_Task_MngComns */
void fn_Task_MngComns(void const * argument)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fn_Task_MngComns */
  /* Infinite loop */
	uint16_t msg = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	817b      	strh	r3, [r7, #10]
	BaseType_t statusReturn = pdFALSE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  for(;;)
  {
	  statusReturn = pdFALSE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
	  if (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX)
 8000f70:	485e      	ldr	r0, [pc, #376]	@ (80010ec <fn_Task_MngComns+0x190>)
 8000f72:	f002 fcee 	bl	8003952 <HAL_UART_GetState>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b21      	cmp	r3, #33	@ 0x21
 8000f7a:	f000 80b3 	beq.w	80010e4 <fn_Task_MngComns+0x188>
	  {
		  //busy -> nao enviar nada agora
	  }

	  else if (uxQueueMessagesWaiting(Q_ReqsHandle) > 0)
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80010f0 <fn_Task_MngComns+0x194>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fc34 	bl	80047f0 <uxQueueMessagesWaiting>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 80aa 	beq.w	80010e4 <fn_Task_MngComns+0x188>
	  {
		  statusReturn = xQueueReceive(Q_ReqsHandle, &msg, ( TickType_t ) 10);
 8000f90:	4b57      	ldr	r3, [pc, #348]	@ (80010f0 <fn_Task_MngComns+0x194>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f107 010a 	add.w	r1, r7, #10
 8000f98:	220a      	movs	r2, #10
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 fb46 	bl	800462c <xQueueReceive>
 8000fa0:	61f8      	str	r0, [r7, #28]

		  if (statusReturn == pdTRUE)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	f040 809d 	bne.w	80010e4 <fn_Task_MngComns+0x188>
		  {
			  switch (msg)
 8000faa:	897b      	ldrh	r3, [r7, #10]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	f200 8090 	bhi.w	80010d4 <fn_Task_MngComns+0x178>
 8000fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fbc <fn_Task_MngComns+0x60>)
 8000fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fba:	bf00      	nop
 8000fbc:	08000fd5 	.word	0x08000fd5
 8000fc0:	0800102d 	.word	0x0800102d
 8000fc4:	08001085 	.word	0x08001085
 8000fc8:	08001099 	.word	0x08001099
 8000fcc:	080010ad 	.word	0x080010ad
 8000fd0:	080010c1 	.word	0x080010c1
			  {
				  case Q_SND_CRN:
					  BufOUT[0] = 'T';
 8000fd4:	4b47      	ldr	r3, [pc, #284]	@ (80010f4 <fn_Task_MngComns+0x198>)
 8000fd6:	2254      	movs	r2, #84	@ 0x54
 8000fd8:	701a      	strb	r2, [r3, #0]
					  BufOUT[1] = conv_num_ASC(Crono[0]);
 8000fda:	4b47      	ldr	r3, [pc, #284]	@ (80010f8 <fn_Task_MngComns+0x19c>)
 8000fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f99b 	bl	800031c <conv_num_ASC>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b42      	ldr	r3, [pc, #264]	@ (80010f4 <fn_Task_MngComns+0x198>)
 8000fec:	705a      	strb	r2, [r3, #1]
					  BufOUT[2] = conv_num_ASC(Crono[1]);
 8000fee:	4b42      	ldr	r3, [pc, #264]	@ (80010f8 <fn_Task_MngComns+0x19c>)
 8000ff0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff f991 	bl	800031c <conv_num_ASC>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80010f4 <fn_Task_MngComns+0x198>)
 8001000:	709a      	strb	r2, [r3, #2]
					  BufOUT[3] = conv_num_ASC(Crono[2]);
 8001002:	4b3d      	ldr	r3, [pc, #244]	@ (80010f8 <fn_Task_MngComns+0x19c>)
 8001004:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f987 	bl	800031c <conv_num_ASC>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b38      	ldr	r3, [pc, #224]	@ (80010f4 <fn_Task_MngComns+0x198>)
 8001014:	70da      	strb	r2, [r3, #3]
					  BufOUT[4] = conv_num_ASC(Crono[3]);
 8001016:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <fn_Task_MngComns+0x19c>)
 8001018:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f97d 	bl	800031c <conv_num_ASC>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b33      	ldr	r3, [pc, #204]	@ (80010f4 <fn_Task_MngComns+0x198>)
 8001028:	711a      	strb	r2, [r3, #4]
					  break;
 800102a:	e053      	b.n	80010d4 <fn_Task_MngComns+0x178>
				  case Q_SND_ADC:
					  BufOUT[0] = 'A';
 800102c:	4b31      	ldr	r3, [pc, #196]	@ (80010f4 <fn_Task_MngComns+0x198>)
 800102e:	2241      	movs	r2, #65	@ 0x41
 8001030:	701a      	strb	r2, [r3, #0]
					  BufOUT[1] = conv_num_ASC(ValAdc[0]);
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <fn_Task_MngComns+0x1a0>)
 8001034:	f993 3000 	ldrsb.w	r3, [r3]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f96f 	bl	800031c <conv_num_ASC>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <fn_Task_MngComns+0x198>)
 8001044:	705a      	strb	r2, [r3, #1]
					  BufOUT[2] = conv_num_ASC(ValAdc[1]);
 8001046:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <fn_Task_MngComns+0x1a0>)
 8001048:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff f965 	bl	800031c <conv_num_ASC>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b27      	ldr	r3, [pc, #156]	@ (80010f4 <fn_Task_MngComns+0x198>)
 8001058:	709a      	strb	r2, [r3, #2]
					  BufOUT[3] = conv_num_ASC(ValAdc[2]);
 800105a:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <fn_Task_MngComns+0x1a0>)
 800105c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f95b 	bl	800031c <conv_num_ASC>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <fn_Task_MngComns+0x198>)
 800106c:	70da      	strb	r2, [r3, #3]
					  BufOUT[4] = conv_num_ASC(ValAdc[3]);
 800106e:	4b23      	ldr	r3, [pc, #140]	@ (80010fc <fn_Task_MngComns+0x1a0>)
 8001070:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f951 	bl	800031c <conv_num_ASC>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <fn_Task_MngComns+0x198>)
 8001080:	711a      	strb	r2, [r3, #4]
					  break;
 8001082:	e027      	b.n	80010d4 <fn_Task_MngComns+0x178>
				  case Q_REQ_CRN:
					  STR_BUFF(REQCRN);
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <fn_Task_MngComns+0x1a4>)
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <fn_Task_MngComns+0x1a8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	4818      	ldr	r0, [pc, #96]	@ (80010f4 <fn_Task_MngComns+0x198>)
 8001092:	f004 ffcb 	bl	800602c <strncpy>
					  break;
 8001096:	e01d      	b.n	80010d4 <fn_Task_MngComns+0x178>
				  case Q_REQ_ADC:
					  STR_BUFF(REQADC);
 8001098:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <fn_Task_MngComns+0x1ac>)
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <fn_Task_MngComns+0x1a8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	6939      	ldr	r1, [r7, #16]
 80010a4:	4813      	ldr	r0, [pc, #76]	@ (80010f4 <fn_Task_MngComns+0x198>)
 80010a6:	f004 ffc1 	bl	800602c <strncpy>
					  break;
 80010aa:	e013      	b.n	80010d4 <fn_Task_MngComns+0x178>
				  case Q_REQ_SRV:
					  STR_BUFF(REQSRV);
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <fn_Task_MngComns+0x1b0>)
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <fn_Task_MngComns+0x1a8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	6979      	ldr	r1, [r7, #20]
 80010b8:	480e      	ldr	r0, [pc, #56]	@ (80010f4 <fn_Task_MngComns+0x198>)
 80010ba:	f004 ffb7 	bl	800602c <strncpy>
					  break;
 80010be:	e009      	b.n	80010d4 <fn_Task_MngComns+0x178>
				  case Q_REQ_OFF:
					  STR_BUFF(REQOFF);
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <fn_Task_MngComns+0x1b4>)
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <fn_Task_MngComns+0x1a8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	4809      	ldr	r0, [pc, #36]	@ (80010f4 <fn_Task_MngComns+0x198>)
 80010ce:	f004 ffad 	bl	800602c <strncpy>
					  break;
 80010d2:	bf00      	nop
			  }
			  HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <fn_Task_MngComns+0x1a8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	4905      	ldr	r1, [pc, #20]	@ (80010f4 <fn_Task_MngComns+0x198>)
 80010de:	4803      	ldr	r0, [pc, #12]	@ (80010ec <fn_Task_MngComns+0x190>)
 80010e0:	f002 f9fb 	bl	80034da <HAL_UART_Transmit_IT>
	  }
	  else
	  {
		  //tx livre -> fila vazia -> sem reqs
	  }
	  osDelay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f002 fed3 	bl	8003e90 <osDelay>
	  statusReturn = pdFALSE;
 80010ea:	e73f      	b.n	8000f6c <fn_Task_MngComns+0x10>
 80010ec:	20000270 	.word	0x20000270
 80010f0:	200002c8 	.word	0x200002c8
 80010f4:	20000004 	.word	0x20000004
 80010f8:	200002cc 	.word	0x200002cc
 80010fc:	200002d0 	.word	0x200002d0
 8001100:	08006304 	.word	0x08006304
 8001104:	20000018 	.word	0x20000018
 8001108:	0800630c 	.word	0x0800630c
 800110c:	08006314 	.word	0x08006314
 8001110:	0800631c 	.word	0x0800631c

08001114 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a34      	ldr	r2, [pc, #208]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001126:	f000 fabb 	bl	80016a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  //TODO:chamar att ADC no DT certo
  if (HAL_GetTick()- tADC > DT_ADC)
 800112a:	f000 facb 	bl	80016c4 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	4b31      	ldr	r3, [pc, #196]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b28      	cmp	r3, #40	@ 0x28
 8001138:	d907      	bls.n	800114a <HAL_TIM_PeriodElapsedCallback+0x36>
  {
	  HAL_ADC_Start_IT(&hadc1);
 800113a:	4830      	ldr	r0, [pc, #192]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800113c:	f000 fba4 	bl	8001888 <HAL_ADC_Start_IT>
	  tADC = HAL_GetTick();
 8001140:	f000 fac0 	bl	80016c4 <HAL_GetTick>
 8001144:	4603      	mov	r3, r0
 8001146:	4a2c      	ldr	r2, [pc, #176]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001148:	6013      	str	r3, [r2, #0]
  }

  // CRONOMETRO UP/DOWN: teste se já passou DT_CRONO ms
    if ((HAL_GetTick() - tinCrono) > DT_CRONO)
 800114a:	f000 fabb 	bl	80016c4 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b63      	cmp	r3, #99	@ 0x63
 8001158:	d948      	bls.n	80011ec <HAL_TIM_PeriodElapsedCallback+0xd8>
    {
      tinCrono = HAL_GetTick();          // atualiza o tempo de entrada aqui
 800115a:	f000 fab3 	bl	80016c4 <HAL_GetTick>
 800115e:	4603      	mov	r3, r0
 8001160:	4a27      	ldr	r2, [pc, #156]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001162:	6013      	str	r3, [r2, #0]
      if(MD_CRONO == 0){                 // MD_CRONO = 0 incrementa o cronômetro
        ++ Crono[0];                     // inc decimo de segundos
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001166:	f993 3000 	ldrsb.w	r3, [r3]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	3301      	adds	r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	b25a      	sxtb	r2, r3
 8001172:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001174:	701a      	strb	r2, [r3, #0]
        if (Crono[0] > 9){               // se > 9
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001178:	f993 3000 	ldrsb.w	r3, [r3]
 800117c:	2b09      	cmp	r3, #9
 800117e:	dd35      	ble.n	80011ec <HAL_TIM_PeriodElapsedCallback+0xd8>
          Crono[0] = 0;                  // volta p/ zero
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
          ++ Crono[1];                   // inc unidade de segundo
 8001186:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001188:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3301      	adds	r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	b25a      	sxtb	r2, r3
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001196:	705a      	strb	r2, [r3, #1]
          if (Crono[1] > 9){             // se > 9
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800119a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800119e:	2b09      	cmp	r3, #9
 80011a0:	dd24      	ble.n	80011ec <HAL_TIM_PeriodElapsedCallback+0xd8>
            Crono[1] = 0;                // volta p/ zero
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	705a      	strb	r2, [r3, #1]
            ++ Crono[2];                 // inc dezena de segundos
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	b25a      	sxtb	r2, r3
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011b8:	709a      	strb	r2, [r3, #2]
            if (Crono[2] > 5){           // se > 5
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011bc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	dd13      	ble.n	80011ec <HAL_TIM_PeriodElapsedCallback+0xd8>
              Crono[2] = 0;              // volta p/ zero
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	709a      	strb	r2, [r3, #2]
              ++ Crono[3];               // inc minutos
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011cc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011da:	70da      	strb	r2, [r3, #3]
              if (Crono[3] > 9){         // se > 9
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011de:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80011e2:	2b09      	cmp	r3, #9
 80011e4:	dd02      	ble.n	80011ec <HAL_TIM_PeriodElapsedCallback+0xd8>
                Crono[3] = 0;            // volta p/ zero
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	70da      	strb	r2, [r3, #3]
        }  }  }  }
      }
    }

  /* USER CODE END Callback 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40000800 	.word	0x40000800
 80011f8:	200002e8 	.word	0x200002e8
 80011fc:	20000240 	.word	0x20000240
 8001200:	200002e0 	.word	0x200002e0
 8001204:	200002cc 	.word	0x200002cc

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <Error_Handler+0x8>

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_MspInit+0x68>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a17      	ldr	r2, [pc, #92]	@ (800127c <HAL_MspInit+0x68>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_MspInit+0x68>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_MspInit+0x68>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HAL_MspInit+0x68>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_MspInit+0x68>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	210f      	movs	r1, #15
 800124e:	f06f 0001 	mvn.w	r0, #1
 8001252:	f000 fef8 	bl	8002046 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_MspInit+0x6c>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_MspInit+0x6c>)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000

08001284 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <HAL_ADC_MspInit+0x6c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d121      	bne.n	80012e8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a0c      	ldr	r2, [pc, #48]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d4:	2301      	movs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d8:	2303      	movs	r3, #3
 80012da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <HAL_ADC_MspInit+0x74>)
 80012e4:	f000 ff8a 	bl	80021fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40012400 	.word	0x40012400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010800 	.word	0x40010800

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1c      	ldr	r2, [pc, #112]	@ (8001388 <HAL_UART_MspInit+0x8c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d131      	bne.n	8001380 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <HAL_UART_MspInit+0x90>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a1a      	ldr	r2, [pc, #104]	@ (800138c <HAL_UART_MspInit+0x90>)
 8001322:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <HAL_UART_MspInit+0x90>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_UART_MspInit+0x90>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a14      	ldr	r2, [pc, #80]	@ (800138c <HAL_UART_MspInit+0x90>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_UART_MspInit+0x90>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800134c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001350:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	4619      	mov	r1, r3
 8001360:	480b      	ldr	r0, [pc, #44]	@ (8001390 <HAL_UART_MspInit+0x94>)
 8001362:	f000 ff4b 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800136a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <HAL_UART_MspInit+0x94>)
 800137c:	f000 ff3e 	bl	80021fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40013800 	.word	0x40013800
 800138c:	40021000 	.word	0x40021000
 8001390:	40010800 	.word	0x40010800

08001394 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	@ 0x38
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80013aa:	4b34      	ldr	r3, [pc, #208]	@ (800147c <HAL_InitTick+0xe8>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a33      	ldr	r2, [pc, #204]	@ (800147c <HAL_InitTick+0xe8>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b31      	ldr	r3, [pc, #196]	@ (800147c <HAL_InitTick+0xe8>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c2:	f107 0210 	add.w	r2, r7, #16
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fce9 	bl	8002da4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d103      	bne.n	80013e4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013dc:	f001 fcba 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 80013e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80013e2:	e004      	b.n	80013ee <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013e4:	f001 fcb6 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 80013e8:	4603      	mov	r3, r0
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013f0:	4a23      	ldr	r2, [pc, #140]	@ (8001480 <HAL_InitTick+0xec>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	0c9b      	lsrs	r3, r3, #18
 80013f8:	3b01      	subs	r3, #1
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80013fc:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <HAL_InitTick+0xf0>)
 80013fe:	4a22      	ldr	r2, [pc, #136]	@ (8001488 <HAL_InitTick+0xf4>)
 8001400:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <HAL_InitTick+0xf0>)
 8001404:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001408:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800140a:	4a1e      	ldr	r2, [pc, #120]	@ (8001484 <HAL_InitTick+0xf0>)
 800140c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800140e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <HAL_InitTick+0xf0>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_InitTick+0xf0>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_InitTick+0xf0>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001422:	4818      	ldr	r0, [pc, #96]	@ (8001484 <HAL_InitTick+0xf0>)
 8001424:	f001 fdc2 	bl	8002fac <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800142e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11b      	bne.n	800146e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001436:	4813      	ldr	r0, [pc, #76]	@ (8001484 <HAL_InitTick+0xf0>)
 8001438:	f001 fe10 	bl	800305c <HAL_TIM_Base_Start_IT>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001442:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001446:	2b00      	cmp	r3, #0
 8001448:	d111      	bne.n	800146e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800144a:	201e      	movs	r0, #30
 800144c:	f000 fe17 	bl	800207e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	d808      	bhi.n	8001468 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001456:	2200      	movs	r2, #0
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	201e      	movs	r0, #30
 800145c:	f000 fdf3 	bl	8002046 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001460:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <HAL_InitTick+0xf8>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e002      	b.n	800146e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800146e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001472:	4618      	mov	r0, r3
 8001474:	3738      	adds	r7, #56	@ 0x38
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	431bde83 	.word	0x431bde83
 8001484:	200002fc 	.word	0x200002fc
 8001488:	40000800 	.word	0x40000800
 800148c:	20000028 	.word	0x20000028

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <NMI_Handler+0x4>

08001498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <MemManage_Handler+0x4>

080014a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if((HAL_GetTick()-tIN_IRQ1) > DT_DEBOUNCING)
 80014c8:	f000 f8fc 	bl	80016c4 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <EXTI1_IRQHandler+0x58>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014d8:	d31b      	bcc.n	8001512 <EXTI1_IRQHandler+0x4e>
	{
		tIN_IRQ1 = HAL_GetTick();          // tIN (ms) da ultima IRQ1
 80014da:	f000 f8f3 	bl	80016c4 <HAL_GetTick>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <EXTI1_IRQHandler+0x58>)
 80014e2:	6013      	str	r3, [r2, #0]
		//setup modo 4s 2 valores
		modoLed = LED_CRON;
 80014e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <EXTI1_IRQHandler+0x5c>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
		if (recebendoDados == 0)
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <EXTI1_IRQHandler+0x60>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d103      	bne.n	80014fa <EXTI1_IRQHandler+0x36>
		{
			modoDisplay = DISPLAY_INTRN;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <EXTI1_IRQHandler+0x64>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	e002      	b.n	8001500 <EXTI1_IRQHandler+0x3c>
		}
		else
		{
			modoDisplay = DISPLAY_EXTRN;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <EXTI1_IRQHandler+0x64>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
		}
		A1_foi_apertado = 1;
 8001500:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <EXTI1_IRQHandler+0x68>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800150c:	4808      	ldr	r0, [pc, #32]	@ (8001530 <EXTI1_IRQHandler+0x6c>)
 800150e:	f000 fff9 	bl	8002504 <HAL_GPIO_WritePin>
	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001512:	2002      	movs	r0, #2
 8001514:	f001 f828 	bl	8002568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000344 	.word	0x20000344
 8001520:	2000001c 	.word	0x2000001c
 8001524:	200002e5 	.word	0x200002e5
 8001528:	200002e4 	.word	0x200002e4
 800152c:	200002f4 	.word	0x200002f4
 8001530:	40010c00 	.word	0x40010c00

08001534 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	if((HAL_GetTick()-tIN_IRQ2) > DT_DEBOUNCING)
 8001538:	f000 f8c4 	bl	80016c4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <EXTI2_IRQHandler+0x30>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001548:	d307      	bcc.n	800155a <EXTI2_IRQHandler+0x26>
	{
		tIN_IRQ2 = HAL_GetTick();          // tIN (ms) da ultima IRQ2
 800154a:	f000 f8bb 	bl	80016c4 <HAL_GetTick>
 800154e:	4603      	mov	r3, r0
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <EXTI2_IRQHandler+0x30>)
 8001552:	6013      	str	r3, [r2, #0]

		//...  o que vc vai fazer aqui???
		insert_into_Q((uint16_t) Q_REQ_SRV);
 8001554:	2005      	movs	r0, #5
 8001556:	f000 f83f 	bl	80015d8 <insert_into_Q>
		//HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);

	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800155a:	2004      	movs	r0, #4
 800155c:	f001 f804 	bl	8002568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000348 	.word	0x20000348

08001568 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	if((HAL_GetTick()-tIN_IRQ3) > DT_DEBOUNCING)
 800156c:	f000 f8aa 	bl	80016c4 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <EXTI3_IRQHandler+0x30>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800157c:	d307      	bcc.n	800158e <EXTI3_IRQHandler+0x26>
	{
		tIN_IRQ3 = HAL_GetTick();          // tIN (ms) da ultima IRQ3
 800157e:	f000 f8a1 	bl	80016c4 <HAL_GetTick>
 8001582:	4603      	mov	r3, r0
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <EXTI3_IRQHandler+0x30>)
 8001586:	6013      	str	r3, [r2, #0]
		//...  o que vc vai fazer aqui???
		insert_into_Q((uint16_t) Q_REQ_OFF);
 8001588:	2006      	movs	r0, #6
 800158a:	f000 f825 	bl	80015d8 <insert_into_Q>
		//BufOUT[3] = REQOFF[3];
		//HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800158e:	2008      	movs	r0, #8
 8001590:	f000 ffea 	bl	8002568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000034c 	.word	0x2000034c

0800159c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <ADC1_2_IRQHandler+0x10>)
 80015a2:	f000 fa33 	bl	8001a0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000240 	.word	0x20000240

080015b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <TIM4_IRQHandler+0x10>)
 80015b6:	f001 fda3 	bl	8003100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002fc 	.word	0x200002fc

080015c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015c8:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <USART1_IRQHandler+0x10>)
 80015ca:	f001 fffb 	bl	80035c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000270 	.word	0x20000270

080015d8 <insert_into_Q>:

/* USER CODE BEGIN 1 */
void insert_into_Q(uint16_t code)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
	xQueueSendFromISR(Q_ReqsHandle, &code,  &xHigherPriorityTaskWoken);
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <insert_into_Q+0x38>)
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	1db9      	adds	r1, r7, #6
 80015e8:	2300      	movs	r3, #0
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <insert_into_Q+0x3c>)
 80015ec:	f002 ff82 	bl	80044f4 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <insert_into_Q+0x3c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d007      	beq.n	8001608 <insert_into_Q+0x30>
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <insert_into_Q+0x40>)
 80015fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	f3bf 8f4f 	dsb	sy
 8001604:	f3bf 8f6f 	isb	sy
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200002c8 	.word	0x200002c8
 8001614:	200002f8 	.word	0x200002f8
 8001618:	e000ed04 	.word	0xe000ed04

0800161c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	@ (8001660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	@ (800166c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800164e:	f7ff ffe5 	bl	800161c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001652:	f004 fd55 	bl	8006100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001656:	f7fe ff83 	bl	8000560 <main>
  bx lr
 800165a:	4770      	bx	lr
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001664:	0800635c 	.word	0x0800635c
  ldr r2, =_sbss
 8001668:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800166c:	200011e0 	.word	0x200011e0

08001670 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <CAN1_RX1_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_Init+0x28>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_Init+0x28>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 fcd3 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	200f      	movs	r0, #15
 800168c:	f7ff fe82 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fdc0 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40022000 	.word	0x40022000

080016a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_IncTick+0x1c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_IncTick+0x20>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a03      	ldr	r2, [pc, #12]	@ (80016c0 <HAL_IncTick+0x20>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	2000002c 	.word	0x2000002c
 80016c0:	20000350 	.word	0x20000350

080016c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b02      	ldr	r3, [pc, #8]	@ (80016d4 <HAL_GetTick+0x10>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000350 	.word	0x20000350

080016d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0be      	b.n	8001878 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001704:	2b00      	cmp	r3, #0
 8001706:	d109      	bne.n	800171c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fdb4 	bl	8001284 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fb93 	bl	8001e48 <ADC_ConversionStop_Disable>
 8001722:	4603      	mov	r3, r0
 8001724:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 8099 	bne.w	8001866 <HAL_ADC_Init+0x18e>
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 8095 	bne.w	8001866 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001740:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001744:	f023 0302 	bic.w	r3, r3, #2
 8001748:	f043 0202 	orr.w	r2, r3, #2
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001758:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7b1b      	ldrb	r3, [r3, #12]
 800175e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001760:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	4313      	orrs	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001770:	d003      	beq.n	800177a <HAL_ADC_Init+0xa2>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <HAL_ADC_Init+0xa8>
 800177a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800177e:	e000      	b.n	8001782 <HAL_ADC_Init+0xaa>
 8001780:	2300      	movs	r3, #0
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7d1b      	ldrb	r3, [r3, #20]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d119      	bne.n	80017c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7b1b      	ldrb	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	3b01      	subs	r3, #1
 800179e:	035a      	lsls	r2, r3, #13
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	e00b      	b.n	80017c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b0:	f043 0220 	orr.w	r2, r3, #32
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <HAL_ADC_Init+0x1a8>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017f4:	d003      	beq.n	80017fe <HAL_ADC_Init+0x126>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d104      	bne.n	8001808 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	3b01      	subs	r3, #1
 8001804:	051b      	lsls	r3, r3, #20
 8001806:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	430a      	orrs	r2, r1
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <HAL_ADC_Init+0x1ac>)
 8001824:	4013      	ands	r3, r2
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	429a      	cmp	r2, r3
 800182a:	d10b      	bne.n	8001844 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001842:	e018      	b.n	8001876 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001848:	f023 0312 	bic.w	r3, r3, #18
 800184c:	f043 0210 	orr.w	r2, r3, #16
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001864:	e007      	b.n	8001876 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186a:	f043 0210 	orr.w	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001876:	7dfb      	ldrb	r3, [r7, #23]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	ffe1f7fd 	.word	0xffe1f7fd
 8001884:	ff1f0efe 	.word	0xff1f0efe

08001888 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_Start_IT+0x1a>
 800189e:	2302      	movs	r3, #2
 80018a0:	e0a0      	b.n	80019e4 <HAL_ADC_Start_IT+0x15c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fa72 	bl	8001d94 <ADC_Enable>
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 808f 	bne.w	80019da <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a45      	ldr	r2, [pc, #276]	@ (80019ec <HAL_ADC_Start_IT+0x164>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d105      	bne.n	80018e6 <HAL_ADC_Start_IT+0x5e>
 80018da:	4b45      	ldr	r3, [pc, #276]	@ (80019f0 <HAL_ADC_Start_IT+0x168>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d115      	bne.n	8001912 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d026      	beq.n	800194e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001908:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001910:	e01d      	b.n	800194e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001916:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a33      	ldr	r2, [pc, #204]	@ (80019f0 <HAL_ADC_Start_IT+0x168>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d004      	beq.n	8001932 <HAL_ADC_Start_IT+0xaa>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2f      	ldr	r2, [pc, #188]	@ (80019ec <HAL_ADC_Start_IT+0x164>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d10d      	bne.n	800194e <HAL_ADC_Start_IT+0xc6>
 8001932:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <HAL_ADC_Start_IT+0x168>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001942:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001946:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001952:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195e:	f023 0206 	bic.w	r2, r3, #6
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001966:	e002      	b.n	800196e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f06f 0202 	mvn.w	r2, #2
 800197e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0220 	orr.w	r2, r2, #32
 800198e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800199a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800199e:	d113      	bne.n	80019c8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019a4:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <HAL_ADC_Start_IT+0x164>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d105      	bne.n	80019b6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <HAL_ADC_Start_IT+0x168>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d108      	bne.n	80019c8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	e00c      	b.n	80019e2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	e003      	b.n	80019e2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40012800 	.word	0x40012800
 80019f0:	40012400 	.word	0x40012400

080019f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d140      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d139      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a52:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a56:	d11d      	bne.n	8001a94 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d119      	bne.n	8001a94 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0220 	bic.w	r2, r2, #32
 8001a6e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7fe ff59 	bl	800094c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f06f 0212 	mvn.w	r2, #18
 8001aa2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aae:	2b80      	cmp	r3, #128	@ 0x80
 8001ab0:	d14f      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d148      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001ae2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001ae6:	d012      	beq.n	8001b0e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d125      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b00:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b04:	d11d      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d119      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b1c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3a:	f043 0201 	orr.w	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f9c1 	bl	8001eca <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 020c 	mvn.w	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5c:	2b40      	cmp	r3, #64	@ 0x40
 8001b5e:	d114      	bne.n	8001b8a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d10d      	bne.n	8001b8a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b72:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f809 	bl	8001b92 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 0201 	mvn.w	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x20>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0dc      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1da>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b06      	cmp	r3, #6
 8001bd2:	d81c      	bhi.n	8001c0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	3b05      	subs	r3, #5
 8001be6:	221f      	movs	r2, #31
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4019      	ands	r1, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b05      	subs	r3, #5
 8001c00:	fa00 f203 	lsl.w	r2, r0, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c0c:	e03c      	b.n	8001c88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d81c      	bhi.n	8001c50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	3b23      	subs	r3, #35	@ 0x23
 8001c28:	221f      	movs	r2, #31
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	4019      	ands	r1, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b23      	subs	r3, #35	@ 0x23
 8001c42:	fa00 f203 	lsl.w	r2, r0, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c4e:	e01b      	b.n	8001c88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b41      	subs	r3, #65	@ 0x41
 8001c62:	221f      	movs	r2, #31
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b41      	subs	r3, #65	@ 0x41
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	d91c      	bls.n	8001cca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68d9      	ldr	r1, [r3, #12]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b1e      	subs	r3, #30
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4019      	ands	r1, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6898      	ldr	r0, [r3, #8]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b1e      	subs	r3, #30
 8001cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	e019      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6919      	ldr	r1, [r3, #16]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	2207      	movs	r2, #7
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4019      	ands	r1, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6898      	ldr	r0, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d003      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d0a:	2b11      	cmp	r3, #17
 8001d0c:	d132      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1d      	ldr	r2, [pc, #116]	@ (8001d88 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d125      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d126      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d11a      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <HAL_ADC_ConfigChannel+0x1e8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	0c9a      	lsrs	r2, r3, #18
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d54:	e002      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f9      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x1b2>
 8001d62:	e007      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d68:	f043 0220 	orr.w	r2, r3, #32
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	40012400 	.word	0x40012400
 8001d8c:	20000024 	.word	0x20000024
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d040      	beq.n	8001e34 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e40 <ADC_Enable+0xac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <ADC_Enable+0xb0>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	0c9b      	lsrs	r3, r3, #18
 8001dce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001dd0:	e002      	b.n	8001dd8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f9      	bne.n	8001dd2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dde:	f7ff fc71 	bl	80016c4 <HAL_GetTick>
 8001de2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001de4:	e01f      	b.n	8001e26 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001de6:	f7ff fc6d 	bl	80016c4 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d918      	bls.n	8001e26 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d011      	beq.n	8001e26 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e06:	f043 0210 	orr.w	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e007      	b.n	8001e36 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d1d8      	bne.n	8001de6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000024 	.word	0x20000024
 8001e44:	431bde83 	.word	0x431bde83

08001e48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d12e      	bne.n	8001ec0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e72:	f7ff fc27 	bl	80016c4 <HAL_GetTick>
 8001e76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e78:	e01b      	b.n	8001eb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e7a:	f7ff fc23 	bl	80016c4 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d914      	bls.n	8001eb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10d      	bne.n	8001eb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	f043 0210 	orr.w	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e007      	b.n	8001ec2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d0dc      	beq.n	8001e7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4906      	ldr	r1, [pc, #24]	@ (8001f74 <__NVIC_EnableIRQ+0x34>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	@ (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	@ (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	@ 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff4f 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff64 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ffb2 	bl	8001fcc <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff81 	bl	8001f78 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff57 	bl	8001f40 <__NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d008      	beq.n	80020c2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2204      	movs	r2, #4
 80020b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e020      	b.n	8002104 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 020e 	bic.w	r2, r2, #14
 80020d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
	...

08002110 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002122:	2b02      	cmp	r3, #2
 8002124:	d005      	beq.n	8002132 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2204      	movs	r2, #4
 800212a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	e051      	b.n	80021d6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 020e 	bic.w	r2, r2, #14
 8002140:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a22      	ldr	r2, [pc, #136]	@ (80021e0 <HAL_DMA_Abort_IT+0xd0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d029      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xa0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a20      	ldr	r2, [pc, #128]	@ (80021e4 <HAL_DMA_Abort_IT+0xd4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d022      	beq.n	80021ac <HAL_DMA_Abort_IT+0x9c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1f      	ldr	r2, [pc, #124]	@ (80021e8 <HAL_DMA_Abort_IT+0xd8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d01a      	beq.n	80021a6 <HAL_DMA_Abort_IT+0x96>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <HAL_DMA_Abort_IT+0xdc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d012      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x90>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <HAL_DMA_Abort_IT+0xe0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00a      	beq.n	800219a <HAL_DMA_Abort_IT+0x8a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1a      	ldr	r2, [pc, #104]	@ (80021f4 <HAL_DMA_Abort_IT+0xe4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d102      	bne.n	8002194 <HAL_DMA_Abort_IT+0x84>
 800218e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002192:	e00e      	b.n	80021b2 <HAL_DMA_Abort_IT+0xa2>
 8002194:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002198:	e00b      	b.n	80021b2 <HAL_DMA_Abort_IT+0xa2>
 800219a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800219e:	e008      	b.n	80021b2 <HAL_DMA_Abort_IT+0xa2>
 80021a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a4:	e005      	b.n	80021b2 <HAL_DMA_Abort_IT+0xa2>
 80021a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021aa:	e002      	b.n	80021b2 <HAL_DMA_Abort_IT+0xa2>
 80021ac:	2310      	movs	r3, #16
 80021ae:	e000      	b.n	80021b2 <HAL_DMA_Abort_IT+0xa2>
 80021b0:	2301      	movs	r3, #1
 80021b2:	4a11      	ldr	r2, [pc, #68]	@ (80021f8 <HAL_DMA_Abort_IT+0xe8>)
 80021b4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
    } 
  }
  return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40020008 	.word	0x40020008
 80021e4:	4002001c 	.word	0x4002001c
 80021e8:	40020030 	.word	0x40020030
 80021ec:	40020044 	.word	0x40020044
 80021f0:	40020058 	.word	0x40020058
 80021f4:	4002006c 	.word	0x4002006c
 80021f8:	40020000 	.word	0x40020000

080021fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b08b      	sub	sp, #44	@ 0x2c
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220e:	e169      	b.n	80024e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002210:	2201      	movs	r2, #1
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 8158 	bne.w	80024de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a9a      	ldr	r2, [pc, #616]	@ (800249c <HAL_GPIO_Init+0x2a0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d05e      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
 8002238:	4a98      	ldr	r2, [pc, #608]	@ (800249c <HAL_GPIO_Init+0x2a0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d875      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 800223e:	4a98      	ldr	r2, [pc, #608]	@ (80024a0 <HAL_GPIO_Init+0x2a4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d058      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
 8002244:	4a96      	ldr	r2, [pc, #600]	@ (80024a0 <HAL_GPIO_Init+0x2a4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d86f      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 800224a:	4a96      	ldr	r2, [pc, #600]	@ (80024a4 <HAL_GPIO_Init+0x2a8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d052      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
 8002250:	4a94      	ldr	r2, [pc, #592]	@ (80024a4 <HAL_GPIO_Init+0x2a8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d869      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 8002256:	4a94      	ldr	r2, [pc, #592]	@ (80024a8 <HAL_GPIO_Init+0x2ac>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d04c      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
 800225c:	4a92      	ldr	r2, [pc, #584]	@ (80024a8 <HAL_GPIO_Init+0x2ac>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d863      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 8002262:	4a92      	ldr	r2, [pc, #584]	@ (80024ac <HAL_GPIO_Init+0x2b0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d046      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
 8002268:	4a90      	ldr	r2, [pc, #576]	@ (80024ac <HAL_GPIO_Init+0x2b0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d85d      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 800226e:	2b12      	cmp	r3, #18
 8002270:	d82a      	bhi.n	80022c8 <HAL_GPIO_Init+0xcc>
 8002272:	2b12      	cmp	r3, #18
 8002274:	d859      	bhi.n	800232a <HAL_GPIO_Init+0x12e>
 8002276:	a201      	add	r2, pc, #4	@ (adr r2, 800227c <HAL_GPIO_Init+0x80>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	080022f7 	.word	0x080022f7
 8002280:	080022d1 	.word	0x080022d1
 8002284:	080022e3 	.word	0x080022e3
 8002288:	08002325 	.word	0x08002325
 800228c:	0800232b 	.word	0x0800232b
 8002290:	0800232b 	.word	0x0800232b
 8002294:	0800232b 	.word	0x0800232b
 8002298:	0800232b 	.word	0x0800232b
 800229c:	0800232b 	.word	0x0800232b
 80022a0:	0800232b 	.word	0x0800232b
 80022a4:	0800232b 	.word	0x0800232b
 80022a8:	0800232b 	.word	0x0800232b
 80022ac:	0800232b 	.word	0x0800232b
 80022b0:	0800232b 	.word	0x0800232b
 80022b4:	0800232b 	.word	0x0800232b
 80022b8:	0800232b 	.word	0x0800232b
 80022bc:	0800232b 	.word	0x0800232b
 80022c0:	080022d9 	.word	0x080022d9
 80022c4:	080022ed 	.word	0x080022ed
 80022c8:	4a79      	ldr	r2, [pc, #484]	@ (80024b0 <HAL_GPIO_Init+0x2b4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ce:	e02c      	b.n	800232a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	623b      	str	r3, [r7, #32]
          break;
 80022d6:	e029      	b.n	800232c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	3304      	adds	r3, #4
 80022de:	623b      	str	r3, [r7, #32]
          break;
 80022e0:	e024      	b.n	800232c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	3308      	adds	r3, #8
 80022e8:	623b      	str	r3, [r7, #32]
          break;
 80022ea:	e01f      	b.n	800232c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	330c      	adds	r3, #12
 80022f2:	623b      	str	r3, [r7, #32]
          break;
 80022f4:	e01a      	b.n	800232c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022fe:	2304      	movs	r3, #4
 8002300:	623b      	str	r3, [r7, #32]
          break;
 8002302:	e013      	b.n	800232c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800230c:	2308      	movs	r3, #8
 800230e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	611a      	str	r2, [r3, #16]
          break;
 8002316:	e009      	b.n	800232c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002318:	2308      	movs	r3, #8
 800231a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	615a      	str	r2, [r3, #20]
          break;
 8002322:	e003      	b.n	800232c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
          break;
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x130>
          break;
 800232a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2bff      	cmp	r3, #255	@ 0xff
 8002330:	d801      	bhi.n	8002336 <HAL_GPIO_Init+0x13a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	e001      	b.n	800233a <HAL_GPIO_Init+0x13e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2bff      	cmp	r3, #255	@ 0xff
 8002340:	d802      	bhi.n	8002348 <HAL_GPIO_Init+0x14c>
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	e002      	b.n	800234e <HAL_GPIO_Init+0x152>
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	3b08      	subs	r3, #8
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	210f      	movs	r1, #15
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	401a      	ands	r2, r3
 8002360:	6a39      	ldr	r1, [r7, #32]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	431a      	orrs	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80b1 	beq.w	80024de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800237c:	4b4d      	ldr	r3, [pc, #308]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a4c      	ldr	r2, [pc, #304]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b4a      	ldr	r3, [pc, #296]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002394:	4a48      	ldr	r2, [pc, #288]	@ (80024b8 <HAL_GPIO_Init+0x2bc>)
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4013      	ands	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a40      	ldr	r2, [pc, #256]	@ (80024bc <HAL_GPIO_Init+0x2c0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_GPIO_Init+0x1ec>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a3f      	ldr	r2, [pc, #252]	@ (80024c0 <HAL_GPIO_Init+0x2c4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00d      	beq.n	80023e4 <HAL_GPIO_Init+0x1e8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a3e      	ldr	r2, [pc, #248]	@ (80024c4 <HAL_GPIO_Init+0x2c8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_Init+0x1e4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3d      	ldr	r2, [pc, #244]	@ (80024c8 <HAL_GPIO_Init+0x2cc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_GPIO_Init+0x1e0>
 80023d8:	2303      	movs	r3, #3
 80023da:	e006      	b.n	80023ea <HAL_GPIO_Init+0x1ee>
 80023dc:	2304      	movs	r3, #4
 80023de:	e004      	b.n	80023ea <HAL_GPIO_Init+0x1ee>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e002      	b.n	80023ea <HAL_GPIO_Init+0x1ee>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_GPIO_Init+0x1ee>
 80023e8:	2300      	movs	r3, #0
 80023ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ec:	f002 0203 	and.w	r2, r2, #3
 80023f0:	0092      	lsls	r2, r2, #2
 80023f2:	4093      	lsls	r3, r2
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023fa:	492f      	ldr	r1, [pc, #188]	@ (80024b8 <HAL_GPIO_Init+0x2bc>)
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002414:	4b2d      	ldr	r3, [pc, #180]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	492c      	ldr	r1, [pc, #176]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002422:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	43db      	mvns	r3, r3
 800242a:	4928      	ldr	r1, [pc, #160]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 800242c:	4013      	ands	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800243c:	4b23      	ldr	r3, [pc, #140]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4922      	ldr	r1, [pc, #136]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800244a:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	43db      	mvns	r3, r3
 8002452:	491e      	ldr	r1, [pc, #120]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 8002454:	4013      	ands	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002464:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	4918      	ldr	r1, [pc, #96]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002472:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	43db      	mvns	r3, r3
 800247a:	4914      	ldr	r1, [pc, #80]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 800247c:	4013      	ands	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d021      	beq.n	80024d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800248c:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	490e      	ldr	r1, [pc, #56]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	60cb      	str	r3, [r1, #12]
 8002498:	e021      	b.n	80024de <HAL_GPIO_Init+0x2e2>
 800249a:	bf00      	nop
 800249c:	10320000 	.word	0x10320000
 80024a0:	10310000 	.word	0x10310000
 80024a4:	10220000 	.word	0x10220000
 80024a8:	10210000 	.word	0x10210000
 80024ac:	10120000 	.word	0x10120000
 80024b0:	10110000 	.word	0x10110000
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40010800 	.word	0x40010800
 80024c0:	40010c00 	.word	0x40010c00
 80024c4:	40011000 	.word	0x40011000
 80024c8:	40011400 	.word	0x40011400
 80024cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_GPIO_Init+0x304>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	4909      	ldr	r1, [pc, #36]	@ (8002500 <HAL_GPIO_Init+0x304>)
 80024da:	4013      	ands	r3, r2
 80024dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	3301      	adds	r3, #1
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f47f ae8e 	bne.w	8002210 <HAL_GPIO_Init+0x14>
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	372c      	adds	r7, #44	@ 0x2c
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	40010400 	.word	0x40010400

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
 8002510:	4613      	mov	r3, r2
 8002512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002520:	e003      	b.n	800252a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	611a      	str	r2, [r3, #16]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43d9      	mvns	r1, r3
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	400b      	ands	r3, r1
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	611a      	str	r2, [r3, #16]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
	...

08002568 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002572:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800257e:	4a05      	ldr	r2, [pc, #20]	@ (8002594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f806 	bl	8002598 <HAL_GPIO_EXTI_Callback>
  }
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40010400 	.word	0x40010400

08002598 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e272      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8087 	beq.w	80026da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025cc:	4b92      	ldr	r3, [pc, #584]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d00c      	beq.n	80025f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d112      	bne.n	800260a <HAL_RCC_OscConfig+0x5e>
 80025e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f0:	d10b      	bne.n	800260a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f2:	4b89      	ldr	r3, [pc, #548]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d06c      	beq.n	80026d8 <HAL_RCC_OscConfig+0x12c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d168      	bne.n	80026d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e24c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x76>
 8002614:	4b80      	ldr	r3, [pc, #512]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a7f      	ldr	r2, [pc, #508]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	e02e      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x98>
 800262a:	4b7b      	ldr	r3, [pc, #492]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a7a      	ldr	r2, [pc, #488]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b78      	ldr	r3, [pc, #480]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a77      	ldr	r2, [pc, #476]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800263c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e01d      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0xbc>
 800264e:	4b72      	ldr	r3, [pc, #456]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a71      	ldr	r2, [pc, #452]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b6f      	ldr	r3, [pc, #444]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6e      	ldr	r2, [pc, #440]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002668:	4b6b      	ldr	r3, [pc, #428]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a6a      	ldr	r2, [pc, #424]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b68      	ldr	r3, [pc, #416]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a67      	ldr	r2, [pc, #412]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff f81c 	bl	80016c4 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff f818 	bl	80016c4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	@ 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e200      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0xe4>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff f808 	bl	80016c4 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff f804 	bl	80016c4 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	@ 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1ec      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	4b53      	ldr	r3, [pc, #332]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x10c>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026f2:	4b49      	ldr	r3, [pc, #292]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d11c      	bne.n	8002738 <HAL_RCC_OscConfig+0x18c>
 80026fe:	4b46      	ldr	r3, [pc, #280]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d116      	bne.n	8002738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	4b43      	ldr	r3, [pc, #268]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x176>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e1c0      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002722:	4b3d      	ldr	r3, [pc, #244]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4939      	ldr	r1, [pc, #228]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	e03a      	b.n	80027ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002740:	4b36      	ldr	r3, [pc, #216]	@ (800281c <HAL_RCC_OscConfig+0x270>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7fe ffbd 	bl	80016c4 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274e:	f7fe ffb9 	bl	80016c4 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e1a1      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	4b2d      	ldr	r3, [pc, #180]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b2a      	ldr	r3, [pc, #168]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4927      	ldr	r1, [pc, #156]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
 8002780:	e015      	b.n	80027ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002782:	4b26      	ldr	r3, [pc, #152]	@ (800281c <HAL_RCC_OscConfig+0x270>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe ff9c 	bl	80016c4 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe ff98 	bl	80016c4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e180      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d03a      	beq.n	8002830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d019      	beq.n	80027f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <HAL_RCC_OscConfig+0x274>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe ff7c 	bl	80016c4 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d0:	f7fe ff78 	bl	80016c4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e160      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ee:	2001      	movs	r0, #1
 80027f0:	f000 fb08 	bl	8002e04 <RCC_Delay>
 80027f4:	e01c      	b.n	8002830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <HAL_RCC_OscConfig+0x274>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7fe ff62 	bl	80016c4 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002802:	e00f      	b.n	8002824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002804:	f7fe ff5e 	bl	80016c4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d908      	bls.n	8002824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e146      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	42420000 	.word	0x42420000
 8002820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	4b92      	ldr	r3, [pc, #584]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e9      	bne.n	8002804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a6 	beq.w	800298a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b8b      	ldr	r3, [pc, #556]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	4b88      	ldr	r3, [pc, #544]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a87      	ldr	r2, [pc, #540]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002858:	61d3      	str	r3, [r2, #28]
 800285a:	4b85      	ldr	r3, [pc, #532]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b82      	ldr	r3, [pc, #520]	@ (8002a74 <HAL_RCC_OscConfig+0x4c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b7f      	ldr	r3, [pc, #508]	@ (8002a74 <HAL_RCC_OscConfig+0x4c8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a74 <HAL_RCC_OscConfig+0x4c8>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7fe ff1f 	bl	80016c4 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7fe ff1b 	bl	80016c4 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	@ 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e103      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	4b75      	ldr	r3, [pc, #468]	@ (8002a74 <HAL_RCC_OscConfig+0x4c8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x312>
 80028b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6213      	str	r3, [r2, #32]
 80028bc:	e02d      	b.n	800291a <HAL_RCC_OscConfig+0x36e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x334>
 80028c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4a69      	ldr	r2, [pc, #420]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6213      	str	r3, [r2, #32]
 80028d2:	4b67      	ldr	r3, [pc, #412]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4a66      	ldr	r2, [pc, #408]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	6213      	str	r3, [r2, #32]
 80028de:	e01c      	b.n	800291a <HAL_RCC_OscConfig+0x36e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x356>
 80028e8:	4b61      	ldr	r3, [pc, #388]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a60      	ldr	r2, [pc, #384]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6213      	str	r3, [r2, #32]
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0x36e>
 8002902:	4b5b      	ldr	r3, [pc, #364]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a5a      	ldr	r2, [pc, #360]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	4b58      	ldr	r3, [pc, #352]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a57      	ldr	r2, [pc, #348]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d015      	beq.n	800294e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7fe fecf 	bl	80016c4 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe fecb 	bl	80016c4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0b1      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	4b4b      	ldr	r3, [pc, #300]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ee      	beq.n	800292a <HAL_RCC_OscConfig+0x37e>
 800294c:	e014      	b.n	8002978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7fe feb9 	bl	80016c4 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe feb5 	bl	80016c4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e09b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	4b40      	ldr	r3, [pc, #256]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ee      	bne.n	8002956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4a3b      	ldr	r2, [pc, #236]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8087 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002994:	4b36      	ldr	r3, [pc, #216]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d061      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d146      	bne.n	8002a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b33      	ldr	r3, [pc, #204]	@ (8002a78 <HAL_RCC_OscConfig+0x4cc>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe fe89 	bl	80016c4 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe fe85 	bl	80016c4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e06d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029dc:	d108      	bne.n	80029f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029de:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	4921      	ldr	r1, [pc, #132]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a19      	ldr	r1, [r3, #32]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	430b      	orrs	r3, r1
 8002a02:	491b      	ldr	r1, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a08:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <HAL_RCC_OscConfig+0x4cc>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fe59 	bl	80016c4 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a16:	f7fe fe55 	bl	80016c4 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e03d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x46a>
 8002a34:	e035      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fe42 	bl	80016c4 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe fe3e 	bl	80016c4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e026      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x498>
 8002a62:	e01e      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e019      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40007000 	.word	0x40007000
 8002a78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_OscConfig+0x500>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d0      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d910      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b67      	ldr	r3, [pc, #412]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 0207 	bic.w	r2, r3, #7
 8002ada:	4965      	ldr	r1, [pc, #404]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b63      	ldr	r3, [pc, #396]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0b8      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b0c:	4b59      	ldr	r3, [pc, #356]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a58      	ldr	r2, [pc, #352]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b24:	4b53      	ldr	r3, [pc, #332]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a52      	ldr	r2, [pc, #328]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	4b50      	ldr	r3, [pc, #320]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	494d      	ldr	r1, [pc, #308]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d040      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b47      	ldr	r3, [pc, #284]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d115      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e07f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6e:	4b41      	ldr	r3, [pc, #260]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e073      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e06b      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8e:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4936      	ldr	r1, [pc, #216]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe fd90 	bl	80016c4 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fe fd8c 	bl	80016c4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e053      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 020c 	and.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1eb      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d210      	bcs.n	8002c00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 0207 	bic.w	r2, r3, #7
 8002be6:	4922      	ldr	r1, [pc, #136]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e032      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4916      	ldr	r1, [pc, #88]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c2a:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	490e      	ldr	r1, [pc, #56]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3e:	f000 f821 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	490a      	ldr	r1, [pc, #40]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c50:	5ccb      	ldrb	r3, [r1, r3]
 8002c52:	fa22 f303 	lsr.w	r3, r2, r3
 8002c56:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1cc>)
 8002c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c5a:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_ClockConfig+0x1d0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe fb98 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40021000 	.word	0x40021000
 8002c78:	0800633c 	.word	0x0800633c
 8002c7c:	20000024 	.word	0x20000024
 8002c80:	20000028 	.word	0x20000028

08002c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	b490      	push	{r4, r7}
 8002c86:	b08a      	sub	sp, #40	@ 0x28
 8002c88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c8a:	4b29      	ldr	r3, [pc, #164]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c8c:	1d3c      	adds	r4, r7, #4
 8002c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c94:	f240 2301 	movw	r3, #513	@ 0x201
 8002c98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cae:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d002      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d003      	beq.n	8002cca <HAL_RCC_GetSysClockFreq+0x46>
 8002cc2:	e02b      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cc6:	623b      	str	r3, [r7, #32]
      break;
 8002cc8:	e02b      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	0c9b      	lsrs	r3, r3, #18
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	3328      	adds	r3, #40	@ 0x28
 8002cd4:	443b      	add	r3, r7
 8002cd6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cda:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ce6:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0c5b      	lsrs	r3, r3, #17
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	3328      	adds	r3, #40	@ 0x28
 8002cf2:	443b      	add	r3, r7
 8002cf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	4a0e      	ldr	r2, [pc, #56]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cfe:	fb03 f202 	mul.w	r2, r3, r2
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0a:	e004      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	623b      	str	r3, [r7, #32]
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d1e:	623b      	str	r3, [r7, #32]
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	6a3b      	ldr	r3, [r7, #32]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3728      	adds	r7, #40	@ 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc90      	pop	{r4, r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	08006324 	.word	0x08006324
 8002d34:	40021000 	.word	0x40021000
 8002d38:	007a1200 	.word	0x007a1200
 8002d3c:	003d0900 	.word	0x003d0900

08002d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b02      	ldr	r3, [pc, #8]	@ (8002d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	20000024 	.word	0x20000024

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d58:	f7ff fff2 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	@ (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	0800634c 	.word	0x0800634c

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d80:	f7ff ffde 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	0adb      	lsrs	r3, r3, #11
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	@ (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	0800634c 	.word	0x0800634c

08002da4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	220f      	movs	r2, #15
 8002db2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_RCC_GetClockConfig+0x58>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0203 	and.w	r2, r3, #3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_RCC_GetClockConfig+0x58>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <HAL_RCC_GetClockConfig+0x58>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002dd8:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <HAL_RCC_GetClockConfig+0x58>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	08db      	lsrs	r3, r3, #3
 8002dde:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_GetClockConfig+0x5c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0207 	and.w	r2, r3, #7
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40022000 	.word	0x40022000

08002e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <RCC_Delay+0x34>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <RCC_Delay+0x38>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a5b      	lsrs	r3, r3, #9
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e20:	bf00      	nop
  }
  while (Delay --);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	60fa      	str	r2, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f9      	bne.n	8002e20 <RCC_Delay+0x1c>
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	20000024 	.word	0x20000024
 8002e3c:	10624dd3 	.word	0x10624dd3

08002e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d07d      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e60:	4b4f      	ldr	r3, [pc, #316]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10d      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	61d3      	str	r3, [r2, #28]
 8002e78:	4b49      	ldr	r3, [pc, #292]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b46      	ldr	r3, [pc, #280]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d118      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e94:	4b43      	ldr	r3, [pc, #268]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a42      	ldr	r2, [pc, #264]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fc10 	bl	80016c4 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	e008      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fe fc0c 	bl	80016c4 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	@ 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e06d      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ec6:	4b36      	ldr	r3, [pc, #216]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ece:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02e      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d027      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eee:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002efa:	4a29      	ldr	r2, [pc, #164]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d014      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fbdb 	bl	80016c4 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe fbd7 	bl	80016c4 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e036      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ee      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f34:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4917      	ldr	r1, [pc, #92]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4c:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4a13      	ldr	r2, [pc, #76]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f64:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	490b      	ldr	r1, [pc, #44]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f82:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4904      	ldr	r1, [pc, #16]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42420440 	.word	0x42420440

08002fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e041      	b.n	8003042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f839 	bl	800304a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f000 f9b4 	bl	8003358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d001      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e03a      	b.n	80030ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a18      	ldr	r2, [pc, #96]	@ (80030f4 <HAL_TIM_Base_Start_IT+0x98>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00e      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x58>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309e:	d009      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x58>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a14      	ldr	r2, [pc, #80]	@ (80030f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x58>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a13      	ldr	r2, [pc, #76]	@ (80030fc <HAL_TIM_Base_Start_IT+0xa0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d111      	bne.n	80030d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d010      	beq.n	80030e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d6:	e007      	b.n	80030e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800

08003100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d122      	bne.n	800315c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b02      	cmp	r3, #2
 8003122:	d11b      	bne.n	800315c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0202 	mvn.w	r2, #2
 800312c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8ed 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8003148:	e005      	b.n	8003156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8e0 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f8ef 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d122      	bne.n	80031b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b04      	cmp	r3, #4
 8003176:	d11b      	bne.n	80031b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0204 	mvn.w	r2, #4
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8c3 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8b6 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f8c5 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d122      	bne.n	8003204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d11b      	bne.n	8003204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0208 	mvn.w	r2, #8
 80031d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2204      	movs	r2, #4
 80031da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f899 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 80031f0:	e005      	b.n	80031fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f88c 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f89b 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b10      	cmp	r3, #16
 8003210:	d122      	bne.n	8003258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b10      	cmp	r3, #16
 800321e:	d11b      	bne.n	8003258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0210 	mvn.w	r2, #16
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2208      	movs	r2, #8
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f86f 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f862 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f871 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d10e      	bne.n	8003284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d107      	bne.n	8003284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0201 	mvn.w	r2, #1
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd ff48 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328e:	2b80      	cmp	r3, #128	@ 0x80
 8003290:	d10e      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329c:	2b80      	cmp	r3, #128	@ 0x80
 800329e:	d107      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8bf 	bl	800342e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ba:	2b40      	cmp	r3, #64	@ 0x40
 80032bc:	d10e      	bne.n	80032dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c8:	2b40      	cmp	r3, #64	@ 0x40
 80032ca:	d107      	bne.n	80032dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f835 	bl	8003346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d107      	bne.n	8003308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0220 	mvn.w	r2, #32
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f88a 	bl	800341c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a29      	ldr	r2, [pc, #164]	@ (8003410 <TIM_Base_SetConfig+0xb8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00b      	beq.n	8003388 <TIM_Base_SetConfig+0x30>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003376:	d007      	beq.n	8003388 <TIM_Base_SetConfig+0x30>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a26      	ldr	r2, [pc, #152]	@ (8003414 <TIM_Base_SetConfig+0xbc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0x30>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a25      	ldr	r2, [pc, #148]	@ (8003418 <TIM_Base_SetConfig+0xc0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <TIM_Base_SetConfig+0xb8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00b      	beq.n	80033ba <TIM_Base_SetConfig+0x62>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a8:	d007      	beq.n	80033ba <TIM_Base_SetConfig+0x62>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <TIM_Base_SetConfig+0xbc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <TIM_Base_SetConfig+0x62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a18      	ldr	r2, [pc, #96]	@ (8003418 <TIM_Base_SetConfig+0xc0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a07      	ldr	r2, [pc, #28]	@ (8003410 <TIM_Base_SetConfig+0xb8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d103      	bne.n	8003400 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	615a      	str	r2, [r3, #20]
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800

0800341c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e03f      	b.n	80034d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd ff48 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	@ 0x24
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fc0b 	bl	8003ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	4613      	mov	r3, r2
 80034e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d130      	bne.n	8003556 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_UART_Transmit_IT+0x26>
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e029      	b.n	8003558 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_UART_Transmit_IT+0x38>
 800350e:	2302      	movs	r3, #2
 8003510:	e022      	b.n	8003558 <HAL_UART_Transmit_IT+0x7e>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	88fa      	ldrh	r2, [r7, #6]
 800352a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2221      	movs	r2, #33	@ 0x21
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003550:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003556:	2302      	movs	r3, #2
  }
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	4613      	mov	r3, r2
 800356e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b20      	cmp	r3, #32
 800357a:	d11d      	bne.n	80035b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_UART_Receive_IT+0x26>
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e016      	b.n	80035ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_UART_Receive_IT+0x38>
 8003596:	2302      	movs	r3, #2
 8003598:	e00f      	b.n	80035ba <HAL_UART_Receive_IT+0x58>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f9ec 	bl	800398c <UART_Start_Receive_IT>
 80035b4:	4603      	mov	r3, r0
 80035b6:	e000      	b.n	80035ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	@ 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_UART_IRQHandler+0x52>
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fa9c 	bl	8003b4c <UART_Receive_IT>
      return;
 8003614:	e17b      	b.n	800390e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80b1 	beq.w	8003780 <HAL_UART_IRQHandler+0x1bc>
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <HAL_UART_IRQHandler+0x70>
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80a6 	beq.w	8003780 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_UART_IRQHandler+0x90>
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	f043 0201 	orr.w	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_UART_IRQHandler+0xb0>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	f043 0202 	orr.w	r2, r3, #2
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_UART_IRQHandler+0xd0>
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00f      	beq.n	80036be <HAL_UART_IRQHandler+0xfa>
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d104      	bne.n	80036b2 <HAL_UART_IRQHandler+0xee>
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	f043 0208 	orr.w	r2, r3, #8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 811e 	beq.w	8003904 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_UART_IRQHandler+0x11e>
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fa35 	bl	8003b4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf14      	ite	ne
 80036f0:	2301      	movne	r3, #1
 80036f2:	2300      	moveq	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <HAL_UART_IRQHandler+0x146>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d031      	beq.n	800376e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f977 	bl	80039fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d023      	beq.n	8003766 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800372c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003732:	2b00      	cmp	r3, #0
 8003734:	d013      	beq.n	800375e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373a:	4a76      	ldr	r2, [pc, #472]	@ (8003914 <HAL_UART_IRQHandler+0x350>)
 800373c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fce4 	bl	8002110 <HAL_DMA_Abort_IT>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003758:	4610      	mov	r0, r2
 800375a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375c:	e00e      	b.n	800377c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8e3 	bl	800392a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	e00a      	b.n	800377c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8df 	bl	800392a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800376c:	e006      	b.n	800377c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8db 	bl	800392a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800377a:	e0c3      	b.n	8003904 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	bf00      	nop
    return;
 800377e:	e0c1      	b.n	8003904 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003784:	2b01      	cmp	r3, #1
 8003786:	f040 80a1 	bne.w	80038cc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 809b 	beq.w	80038cc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8095 	beq.w	80038cc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d04e      	beq.n	8003864 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80037d0:	8a3b      	ldrh	r3, [r7, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8098 	beq.w	8003908 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037dc:	8a3a      	ldrh	r2, [r7, #16]
 80037de:	429a      	cmp	r2, r3
 80037e0:	f080 8092 	bcs.w	8003908 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8a3a      	ldrh	r2, [r7, #16]
 80037e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d02b      	beq.n	800384c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003802:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003822:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0210 	bic.w	r2, r2, #16
 8003840:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fc27 	bl	800209a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003854:	b29b      	uxth	r3, r3
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	b29b      	uxth	r3, r3
 800385a:	4619      	mov	r1, r3
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f86d 	bl	800393c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003862:	e051      	b.n	8003908 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800386c:	b29b      	uxth	r3, r3
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d047      	beq.n	800390c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800387c:	8a7b      	ldrh	r3, [r7, #18]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d044      	beq.n	800390c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003890:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0210 	bic.w	r2, r2, #16
 80038be:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038c0:	8a7b      	ldrh	r3, [r7, #18]
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f839 	bl	800393c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038ca:	e01f      	b.n	800390c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_UART_IRQHandler+0x324>
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8cc 	bl	8003a7e <UART_Transmit_IT>
    return;
 80038e6:	e012      	b.n	800390e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00d      	beq.n	800390e <HAL_UART_IRQHandler+0x34a>
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f90d 	bl	8003b1c <UART_EndTransmit_IT>
    return;
 8003902:	e004      	b.n	800390e <HAL_UART_IRQHandler+0x34a>
    return;
 8003904:	bf00      	nop
 8003906:	e002      	b.n	800390e <HAL_UART_IRQHandler+0x34a>
      return;
 8003908:	bf00      	nop
 800390a:	e000      	b.n	800390e <HAL_UART_IRQHandler+0x34a>
      return;
 800390c:	bf00      	nop
  }
}
 800390e:	3728      	adds	r7, #40	@ 0x28
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	08003a57 	.word	0x08003a57

08003918 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr

08003952 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003972:	b2db      	uxtb	r3, r3
 8003974:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	4313      	orrs	r3, r2
 8003980:	b2db      	uxtb	r3, r3
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2222      	movs	r2, #34	@ 0x22
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039d0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0201 	orr.w	r2, r2, #1
 80039e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0220 	orr.w	r2, r2, #32
 80039f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003a14:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d107      	bne.n	8003a3e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0210 	bic.w	r2, r2, #16
 8003a3c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff ff5a 	bl	800392a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b21      	cmp	r3, #33	@ 0x21
 8003a90:	d13e      	bne.n	8003b10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9a:	d114      	bne.n	8003ac6 <UART_Transmit_IT+0x48>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d110      	bne.n	8003ac6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	1c9a      	adds	r2, r3, #2
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	621a      	str	r2, [r3, #32]
 8003ac4:	e008      	b.n	8003ad8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	1c59      	adds	r1, r3, #1
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6211      	str	r1, [r2, #32]
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003afa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff feeb 	bl	8003918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b22      	cmp	r3, #34	@ 0x22
 8003b5e:	f040 8099 	bne.w	8003c94 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6a:	d117      	bne.n	8003b9c <UART_Receive_IT+0x50>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d113      	bne.n	8003b9c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b94:	1c9a      	adds	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b9a:	e026      	b.n	8003bea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bae:	d007      	beq.n	8003bc0 <UART_Receive_IT+0x74>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <UART_Receive_IT+0x82>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e008      	b.n	8003be0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d148      	bne.n	8003c90 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0220 	bic.w	r2, r2, #32
 8003c0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d123      	bne.n	8003c86 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0210 	bic.w	r2, r2, #16
 8003c52:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d10a      	bne.n	8003c78 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fe5c 	bl	800393c <HAL_UARTEx_RxEventCallback>
 8003c84:	e002      	b.n	8003c8c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fc fedc 	bl	8000a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e002      	b.n	8003c96 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
  }
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003cda:	f023 030c 	bic.w	r3, r3, #12
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a2c      	ldr	r2, [pc, #176]	@ (8003db4 <UART_SetConfig+0x114>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d103      	bne.n	8003d10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d08:	f7ff f838 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	e002      	b.n	8003d16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d10:	f7ff f820 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8003d14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009a      	lsls	r2, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	4a22      	ldr	r2, [pc, #136]	@ (8003db8 <UART_SetConfig+0x118>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	0119      	lsls	r1, r3, #4
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009a      	lsls	r2, r3, #2
 8003d40:	441a      	add	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003db8 <UART_SetConfig+0x118>)
 8003d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2064      	movs	r0, #100	@ 0x64
 8003d56:	fb00 f303 	mul.w	r3, r0, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	3332      	adds	r3, #50	@ 0x32
 8003d60:	4a15      	ldr	r2, [pc, #84]	@ (8003db8 <UART_SetConfig+0x118>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d6c:	4419      	add	r1, r3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009a      	lsls	r2, r3, #2
 8003d78:	441a      	add	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d84:	4b0c      	ldr	r3, [pc, #48]	@ (8003db8 <UART_SetConfig+0x118>)
 8003d86:	fba3 0302 	umull	r0, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2064      	movs	r0, #100	@ 0x64
 8003d8e:	fb00 f303 	mul.w	r3, r0, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	3332      	adds	r3, #50	@ 0x32
 8003d98:	4a07      	ldr	r2, [pc, #28]	@ (8003db8 <UART_SetConfig+0x118>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	f003 020f 	and.w	r2, r3, #15
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	440a      	add	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40013800 	.word	0x40013800
 8003db8:	51eb851f 	.word	0x51eb851f

08003dbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dce:	2b84      	cmp	r3, #132	@ 0x84
 8003dd0:	d005      	beq.n	8003dde <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003dd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	3303      	adds	r3, #3
 8003ddc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003dde:	68fb      	ldr	r3, [r7, #12]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003dee:	f001 f80b 	bl	8004e08 <vTaskStartScheduler>
  
  return osOK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfa:	b089      	sub	sp, #36	@ 0x24
 8003dfc:	af04      	add	r7, sp, #16
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d020      	beq.n	8003e4c <osThreadCreate+0x54>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01c      	beq.n	8003e4c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685c      	ldr	r4, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691e      	ldr	r6, [r3, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ffc9 	bl	8003dbc <makeFreeRtosPriority>
 8003e2a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e34:	9202      	str	r2, [sp, #8]
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	9100      	str	r1, [sp, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	4632      	mov	r2, r6
 8003e3e:	4629      	mov	r1, r5
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 fe04 	bl	8004a4e <xTaskCreateStatic>
 8003e46:	4603      	mov	r3, r0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	e01c      	b.n	8003e86 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685c      	ldr	r4, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e58:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ffab 	bl	8003dbc <makeFreeRtosPriority>
 8003e66:	4602      	mov	r2, r0
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	9200      	str	r2, [sp, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4632      	mov	r2, r6
 8003e74:	4629      	mov	r1, r5
 8003e76:	4620      	mov	r0, r4
 8003e78:	f000 fe48 	bl	8004b0c <xTaskCreate>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d001      	beq.n	8003e86 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e86:	68fb      	ldr	r3, [r7, #12]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e90 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <osDelay+0x16>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	e000      	b.n	8003ea8 <osDelay+0x18>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 ff77 	bl	8004d9c <vTaskDelay>
  
  return osOK;
 8003eae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d011      	beq.n	8003eee <osMessageCreate+0x36>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2400      	movs	r4, #0
 8003ee4:	9400      	str	r4, [sp, #0]
 8003ee6:	f000 f929 	bl	800413c <xQueueGenericCreateStatic>
 8003eea:	4603      	mov	r3, r0
 8003eec:	e008      	b.n	8003f00 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	4619      	mov	r1, r3
 8003efa:	f000 f99b 	bl	8004234 <xQueueGenericCreate>
 8003efe:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd90      	pop	{r4, r7, pc}

08003f08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f103 0208 	add.w	r2, r3, #8
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f103 0208 	add.w	r2, r3, #8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f103 0208 	add.w	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d103      	bne.n	8003fc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e00c      	b.n	8003fde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e002      	b.n	8003fd2 <vListInsert+0x2e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d2f6      	bcs.n	8003fcc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	601a      	str	r2, [r3, #0]
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6892      	ldr	r2, [r2, #8]
 800402a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6852      	ldr	r2, [r2, #4]
 8004034:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	429a      	cmp	r2, r3
 800403e:	d103      	bne.n	8004048 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	1e5a      	subs	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
	...

08004068 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	e7fd      	b.n	8004090 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004094:	f001 fce2 	bl	8005a5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a0:	68f9      	ldr	r1, [r7, #12]
 80040a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	441a      	add	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c4:	3b01      	subs	r3, #1
 80040c6:	68f9      	ldr	r1, [r7, #12]
 80040c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	441a      	add	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	22ff      	movs	r2, #255	@ 0xff
 80040d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	22ff      	movs	r2, #255	@ 0xff
 80040e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d114      	bne.n	8004114 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01a      	beq.n	8004128 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3310      	adds	r3, #16
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 f8ea 	bl	80052d0 <xTaskRemoveFromEventList>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d012      	beq.n	8004128 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004102:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <xQueueGenericReset+0xd0>)
 8004104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	e009      	b.n	8004128 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3310      	adds	r3, #16
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fef5 	bl	8003f08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3324      	adds	r3, #36	@ 0x24
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fef0 	bl	8003f08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004128:	f001 fcc8 	bl	8005abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800412c:	2301      	movs	r3, #1
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	@ 0x38
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	e7fd      	b.n	8004164 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <xQueueGenericCreateStatic+0x56>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <xQueueGenericCreateStatic+0x5a>
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <xQueueGenericCreateStatic+0x5c>
 8004196:	2300      	movs	r3, #0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	623b      	str	r3, [r7, #32]
}
 80041ae:	bf00      	nop
 80041b0:	bf00      	nop
 80041b2:	e7fd      	b.n	80041b0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <xQueueGenericCreateStatic+0x84>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <xQueueGenericCreateStatic+0x88>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <xQueueGenericCreateStatic+0x8a>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	61fb      	str	r3, [r7, #28]
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	e7fd      	b.n	80041de <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041e2:	2348      	movs	r3, #72	@ 0x48
 80041e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b48      	cmp	r3, #72	@ 0x48
 80041ea:	d00b      	beq.n	8004204 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	61bb      	str	r3, [r7, #24]
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800420e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004216:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800421a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f844 	bl	80042b2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800422a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800422c:	4618      	mov	r0, r3
 800422e:	3730      	adds	r7, #48	@ 0x30
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	@ 0x28
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	613b      	str	r3, [r7, #16]
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	e004      	b.n	8004276 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	fb02 f303 	mul.w	r3, r2, r3
 8004274:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	3348      	adds	r3, #72	@ 0x48
 800427a:	4618      	mov	r0, r3
 800427c:	f001 fcf0 	bl	8005c60 <pvPortMalloc>
 8004280:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00f      	beq.n	80042a8 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	3348      	adds	r3, #72	@ 0x48
 800428c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004296:	79fa      	ldrb	r2, [r7, #7]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f805 	bl	80042b2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80042a8:	69bb      	ldr	r3, [r7, #24]
	}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d103      	bne.n	80042ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e002      	b.n	80042d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042e0:	2101      	movs	r1, #1
 80042e2:	69b8      	ldr	r0, [r7, #24]
 80042e4:	f7ff fec0 	bl	8004068 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08e      	sub	sp, #56	@ 0x38
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042fe:	2300      	movs	r3, #0
 8004300:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10b      	bne.n	8004324 <xQueueGenericSend+0x34>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <xQueueGenericSend+0x42>
 800432a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <xQueueGenericSend+0x46>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <xQueueGenericSend+0x48>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <xQueueGenericSend+0x64>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800434e:	bf00      	nop
 8004350:	bf00      	nop
 8004352:	e7fd      	b.n	8004350 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d103      	bne.n	8004362 <xQueueGenericSend+0x72>
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <xQueueGenericSend+0x76>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <xQueueGenericSend+0x78>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <xQueueGenericSend+0x94>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	623b      	str	r3, [r7, #32]
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004384:	f001 f96e 	bl	8005664 <xTaskGetSchedulerState>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <xQueueGenericSend+0xa4>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <xQueueGenericSend+0xa8>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <xQueueGenericSend+0xaa>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10b      	bne.n	80043b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	61fb      	str	r3, [r7, #28]
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	e7fd      	b.n	80043b2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043b6:	f001 fb51 	bl	8005a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <xQueueGenericSend+0xdc>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d129      	bne.n	8004420 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043d2:	f000 fa2c 	bl	800482e <prvCopyDataToQueue>
 80043d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d010      	beq.n	8004402 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e2:	3324      	adds	r3, #36	@ 0x24
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 ff73 	bl	80052d0 <xTaskRemoveFromEventList>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d013      	beq.n	8004418 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043f0:	4b3f      	ldr	r3, [pc, #252]	@ (80044f0 <xQueueGenericSend+0x200>)
 80043f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	e00a      	b.n	8004418 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004408:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <xQueueGenericSend+0x200>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004418:	f001 fb50 	bl	8005abc <vPortExitCritical>
				return pdPASS;
 800441c:	2301      	movs	r3, #1
 800441e:	e063      	b.n	80044e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004426:	f001 fb49 	bl	8005abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800442a:	2300      	movs	r3, #0
 800442c:	e05c      	b.n	80044e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800442e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	4618      	mov	r0, r3
 800443a:	f000 ffad 	bl	8005398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004442:	f001 fb3b 	bl	8005abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004446:	f000 fd49 	bl	8004edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800444a:	f001 fb07 	bl	8005a5c <vPortEnterCritical>
 800444e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004450:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004454:	b25b      	sxtb	r3, r3
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d103      	bne.n	8004464 <xQueueGenericSend+0x174>
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004466:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800446a:	b25b      	sxtb	r3, r3
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d103      	bne.n	800447a <xQueueGenericSend+0x18a>
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800447a:	f001 fb1f 	bl	8005abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800447e:	1d3a      	adds	r2, r7, #4
 8004480:	f107 0314 	add.w	r3, r7, #20
 8004484:	4611      	mov	r1, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f000 ff9c 	bl	80053c4 <xTaskCheckForTimeOut>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d124      	bne.n	80044dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004492:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004494:	f000 fac3 	bl	8004a1e <prvIsQueueFull>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d018      	beq.n	80044d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	3310      	adds	r3, #16
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 feec 	bl	8005284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044ae:	f000 fa4e 	bl	800494e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044b2:	f000 fd21 	bl	8004ef8 <xTaskResumeAll>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f47f af7c 	bne.w	80043b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80044be:	4b0c      	ldr	r3, [pc, #48]	@ (80044f0 <xQueueGenericSend+0x200>)
 80044c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	e772      	b.n	80043b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044d2:	f000 fa3c 	bl	800494e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044d6:	f000 fd0f 	bl	8004ef8 <xTaskResumeAll>
 80044da:	e76c      	b.n	80043b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044de:	f000 fa36 	bl	800494e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044e2:	f000 fd09 	bl	8004ef8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044e6:	2300      	movs	r3, #0
		}
	}
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3738      	adds	r7, #56	@ 0x38
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	e000ed04 	.word	0xe000ed04

080044f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08e      	sub	sp, #56	@ 0x38
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800451e:	bf00      	nop
 8004520:	bf00      	nop
 8004522:	e7fd      	b.n	8004520 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <xQueueGenericSendFromISR+0x3e>
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <xQueueGenericSendFromISR+0x42>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <xQueueGenericSendFromISR+0x44>
 8004536:	2300      	movs	r3, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	623b      	str	r3, [r7, #32]
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d103      	bne.n	8004562 <xQueueGenericSendFromISR+0x6e>
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <xQueueGenericSendFromISR+0x72>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueGenericSendFromISR+0x74>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10b      	bne.n	8004584 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	61fb      	str	r3, [r7, #28]
}
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004584:	f001 fb2c 	bl	8005be0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004588:	f3ef 8211 	mrs	r2, BASEPRI
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	61ba      	str	r2, [r7, #24]
 800459e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d302      	bcc.n	80045b6 <xQueueGenericSendFromISR+0xc2>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d12c      	bne.n	8004610 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045c6:	f000 f932 	bl	800482e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d112      	bne.n	80045fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d016      	beq.n	800460a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045de:	3324      	adds	r3, #36	@ 0x24
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fe75 	bl	80052d0 <xTaskRemoveFromEventList>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e007      	b.n	800460a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045fe:	3301      	adds	r3, #1
 8004600:	b2db      	uxtb	r3, r3
 8004602:	b25a      	sxtb	r2, r3
 8004604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800460a:	2301      	movs	r3, #1
 800460c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800460e:	e001      	b.n	8004614 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004610:	2300      	movs	r3, #0
 8004612:	637b      	str	r3, [r7, #52]	@ 0x34
 8004614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004616:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800461e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004622:	4618      	mov	r0, r3
 8004624:	3738      	adds	r7, #56	@ 0x38
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	@ 0x30
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004638:	2300      	movs	r3, #0
 800463a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10b      	bne.n	800465e <xQueueReceive+0x32>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	623b      	str	r3, [r7, #32]
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	e7fd      	b.n	800465a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d103      	bne.n	800466c <xQueueReceive+0x40>
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <xQueueReceive+0x44>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <xQueueReceive+0x46>
 8004670:	2300      	movs	r3, #0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <xQueueReceive+0x62>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	61fb      	str	r3, [r7, #28]
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800468e:	f000 ffe9 	bl	8005664 <xTaskGetSchedulerState>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <xQueueReceive+0x72>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <xQueueReceive+0x76>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <xQueueReceive+0x78>
 80046a2:	2300      	movs	r3, #0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <xQueueReceive+0x94>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	61bb      	str	r3, [r7, #24]
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80046c0:	f001 f9cc 	bl	8005a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01f      	beq.n	8004710 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046d4:	f000 f915 	bl	8004902 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	1e5a      	subs	r2, r3, #1
 80046dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00f      	beq.n	8004708 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	3310      	adds	r3, #16
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fdef 	bl	80052d0 <xTaskRemoveFromEventList>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046f8:	4b3c      	ldr	r3, [pc, #240]	@ (80047ec <xQueueReceive+0x1c0>)
 80046fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004708:	f001 f9d8 	bl	8005abc <vPortExitCritical>
				return pdPASS;
 800470c:	2301      	movs	r3, #1
 800470e:	e069      	b.n	80047e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004716:	f001 f9d1 	bl	8005abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800471a:	2300      	movs	r3, #0
 800471c:	e062      	b.n	80047e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004724:	f107 0310 	add.w	r3, r7, #16
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fe35 	bl	8005398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800472e:	2301      	movs	r3, #1
 8004730:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004732:	f001 f9c3 	bl	8005abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004736:	f000 fbd1 	bl	8004edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800473a:	f001 f98f 	bl	8005a5c <vPortEnterCritical>
 800473e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004740:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004744:	b25b      	sxtb	r3, r3
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d103      	bne.n	8004754 <xQueueReceive+0x128>
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004756:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800475a:	b25b      	sxtb	r3, r3
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d103      	bne.n	800476a <xQueueReceive+0x13e>
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800476a:	f001 f9a7 	bl	8005abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800476e:	1d3a      	adds	r2, r7, #4
 8004770:	f107 0310 	add.w	r3, r7, #16
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fe24 	bl	80053c4 <xTaskCheckForTimeOut>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d123      	bne.n	80047ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004784:	f000 f935 	bl	80049f2 <prvIsQueueEmpty>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d017      	beq.n	80047be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	3324      	adds	r3, #36	@ 0x24
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	4611      	mov	r1, r2
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fd74 	bl	8005284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800479c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800479e:	f000 f8d6 	bl	800494e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047a2:	f000 fba9 	bl	8004ef8 <xTaskResumeAll>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d189      	bne.n	80046c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80047ac:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <xQueueReceive+0x1c0>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	e780      	b.n	80046c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047c0:	f000 f8c5 	bl	800494e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047c4:	f000 fb98 	bl	8004ef8 <xTaskResumeAll>
 80047c8:	e77a      	b.n	80046c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047cc:	f000 f8bf 	bl	800494e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047d0:	f000 fb92 	bl	8004ef8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047d6:	f000 f90c 	bl	80049f2 <prvIsQueueEmpty>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f43f af6f 	beq.w	80046c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3730      	adds	r7, #48	@ 0x30
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	e000ed04 	.word	0xe000ed04

080047f0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60bb      	str	r3, [r7, #8]
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	e7fd      	b.n	8004812 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004816:	f001 f921 	bl	8005a5c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004820:	f001 f94c 	bl	8005abc <vPortExitCritical>

	return uxReturn;
 8004824:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004842:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10d      	bne.n	8004868 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d14d      	bne.n	80048f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 ff21 	bl	80056a0 <xTaskPriorityDisinherit>
 800485e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	e043      	b.n	80048f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d119      	bne.n	80048a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6898      	ldr	r0, [r3, #8]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	461a      	mov	r2, r3
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	f001 fc67 	bl	800614c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	441a      	add	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d32b      	bcc.n	80048f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	e026      	b.n	80048f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68d8      	ldr	r0, [r3, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	461a      	mov	r2, r3
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	f001 fc4d 	bl	800614c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	425b      	negs	r3, r3
 80048bc:	441a      	add	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d207      	bcs.n	80048de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	425b      	negs	r3, r3
 80048d8:	441a      	add	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d105      	bne.n	80048f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80048f8:	697b      	ldr	r3, [r7, #20]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d018      	beq.n	8004946 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d303      	bcc.n	8004936 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68d9      	ldr	r1, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	461a      	mov	r2, r3
 8004940:	6838      	ldr	r0, [r7, #0]
 8004942:	f001 fc03 	bl	800614c <memcpy>
	}
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004956:	f001 f881 	bl	8005a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004960:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004962:	e011      	b.n	8004988 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d012      	beq.n	8004992 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3324      	adds	r3, #36	@ 0x24
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fcad 	bl	80052d0 <xTaskRemoveFromEventList>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800497c:	f000 fd86 	bl	800548c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	3b01      	subs	r3, #1
 8004984:	b2db      	uxtb	r3, r3
 8004986:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498c:	2b00      	cmp	r3, #0
 800498e:	dce9      	bgt.n	8004964 <prvUnlockQueue+0x16>
 8004990:	e000      	b.n	8004994 <prvUnlockQueue+0x46>
					break;
 8004992:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	22ff      	movs	r2, #255	@ 0xff
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800499c:	f001 f88e 	bl	8005abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049a0:	f001 f85c 	bl	8005a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ac:	e011      	b.n	80049d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d012      	beq.n	80049dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3310      	adds	r3, #16
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fc88 	bl	80052d0 <xTaskRemoveFromEventList>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049c6:	f000 fd61 	bl	800548c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049ca:	7bbb      	ldrb	r3, [r7, #14]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	dce9      	bgt.n	80049ae <prvUnlockQueue+0x60>
 80049da:	e000      	b.n	80049de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	22ff      	movs	r2, #255	@ 0xff
 80049e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80049e6:	f001 f869 	bl	8005abc <vPortExitCritical>
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049fa:	f001 f82f 	bl	8005a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a06:	2301      	movs	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	e001      	b.n	8004a10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a10:	f001 f854 	bl	8005abc <vPortExitCritical>

	return xReturn;
 8004a14:	68fb      	ldr	r3, [r7, #12]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a26:	f001 f819 	bl	8005a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d102      	bne.n	8004a3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a36:	2301      	movs	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	e001      	b.n	8004a40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a40:	f001 f83c 	bl	8005abc <vPortExitCritical>

	return xReturn;
 8004a44:	68fb      	ldr	r3, [r7, #12]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b08e      	sub	sp, #56	@ 0x38
 8004a52:	af04      	add	r7, sp, #16
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <xTaskCreateStatic+0x2c>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	623b      	str	r3, [r7, #32]
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	e7fd      	b.n	8004a76 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10b      	bne.n	8004a98 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61fb      	str	r3, [r7, #28]
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a98:	23a0      	movs	r3, #160	@ 0xa0
 8004a9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004aa0:	d00b      	beq.n	8004aba <xTaskCreateStatic+0x6c>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	61bb      	str	r3, [r7, #24]
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01e      	beq.n	8004afe <xTaskCreateStatic+0xb0>
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01b      	beq.n	8004afe <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9303      	str	r3, [sp, #12]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	9302      	str	r3, [sp, #8]
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f851 	bl	8004b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004af6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004af8:	f000 f8e6 	bl	8004cc8 <prvAddNewTaskToReadyList>
 8004afc:	e001      	b.n	8004b02 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b02:	697b      	ldr	r3, [r7, #20]
	}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3728      	adds	r7, #40	@ 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08c      	sub	sp, #48	@ 0x30
 8004b10:	af04      	add	r7, sp, #16
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f001 f89d 	bl	8005c60 <pvPortMalloc>
 8004b26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00e      	beq.n	8004b4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b2e:	20a0      	movs	r0, #160	@ 0xa0
 8004b30:	f001 f896 	bl	8005c60 <pvPortMalloc>
 8004b34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b42:	e005      	b.n	8004b50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b44:	6978      	ldr	r0, [r7, #20]
 8004b46:	f001 f953 	bl	8005df0 <vPortFree>
 8004b4a:	e001      	b.n	8004b50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d017      	beq.n	8004b86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b5e:	88fa      	ldrh	r2, [r7, #6]
 8004b60:	2300      	movs	r3, #0
 8004b62:	9303      	str	r3, [sp, #12]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	9302      	str	r3, [sp, #8]
 8004b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f80f 	bl	8004b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b7a:	69f8      	ldr	r0, [r7, #28]
 8004b7c:	f000 f8a4 	bl	8004cc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b80:	2301      	movs	r3, #1
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e002      	b.n	8004b8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
	}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f023 0307 	bic.w	r3, r3, #7
 8004bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	617b      	str	r3, [r7, #20]
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	e012      	b.n	8004c0e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	7819      	ldrb	r1, [r3, #0]
 8004bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3334      	adds	r3, #52	@ 0x34
 8004bf8:	460a      	mov	r2, r1
 8004bfa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	4413      	add	r3, r2
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2b0f      	cmp	r3, #15
 8004c12:	d9e9      	bls.n	8004be8 <prvInitialiseNewTask+0x50>
 8004c14:	e000      	b.n	8004c18 <prvInitialiseNewTask+0x80>
		{
			break;
 8004c16:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	2b06      	cmp	r3, #6
 8004c24:	d901      	bls.n	8004c2a <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c26:	2306      	movs	r3, #6
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	2200      	movs	r2, #0
 8004c3a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff f980 	bl	8003f46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	3318      	adds	r3, #24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff f97b 	bl	8003f46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	f1c3 0207 	rsb	r2, r3, #7
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c64:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	334c      	adds	r3, #76	@ 0x4c
 8004c7a:	224c      	movs	r2, #76	@ 0x4c
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 f9cc 	bl	800601c <memset>
 8004c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c86:	4a0d      	ldr	r2, [pc, #52]	@ (8004cbc <prvInitialiseNewTask+0x124>)
 8004c88:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004cc0 <prvInitialiseNewTask+0x128>)
 8004c8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c92:	4a0c      	ldr	r2, [pc, #48]	@ (8004cc4 <prvInitialiseNewTask+0x12c>)
 8004c94:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	69b8      	ldr	r0, [r7, #24]
 8004c9c:	f000 fdee 	bl	800587c <pxPortInitialiseStack>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cb2:	bf00      	nop
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	200010a0 	.word	0x200010a0
 8004cc0:	20001108 	.word	0x20001108
 8004cc4:	20001170 	.word	0x20001170

08004cc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cd0:	f000 fec4 	bl	8005a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d80 <prvAddNewTaskToReadyList+0xb8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	4a29      	ldr	r2, [pc, #164]	@ (8004d80 <prvAddNewTaskToReadyList+0xb8>)
 8004cdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cde:	4b29      	ldr	r3, [pc, #164]	@ (8004d84 <prvAddNewTaskToReadyList+0xbc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ce6:	4a27      	ldr	r2, [pc, #156]	@ (8004d84 <prvAddNewTaskToReadyList+0xbc>)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cec:	4b24      	ldr	r3, [pc, #144]	@ (8004d80 <prvAddNewTaskToReadyList+0xb8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d110      	bne.n	8004d16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cf4:	f000 fbee 	bl	80054d4 <prvInitialiseTaskLists>
 8004cf8:	e00d      	b.n	8004d16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cfa:	4b23      	ldr	r3, [pc, #140]	@ (8004d88 <prvAddNewTaskToReadyList+0xc0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d02:	4b20      	ldr	r3, [pc, #128]	@ (8004d84 <prvAddNewTaskToReadyList+0xbc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d802      	bhi.n	8004d16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d10:	4a1c      	ldr	r2, [pc, #112]	@ (8004d84 <prvAddNewTaskToReadyList+0xbc>)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d16:	4b1d      	ldr	r3, [pc, #116]	@ (8004d8c <prvAddNewTaskToReadyList+0xc4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004d8c <prvAddNewTaskToReadyList+0xc4>)
 8004d1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	2201      	movs	r2, #1
 8004d26:	409a      	lsls	r2, r3
 8004d28:	4b19      	ldr	r3, [pc, #100]	@ (8004d90 <prvAddNewTaskToReadyList+0xc8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	4a18      	ldr	r2, [pc, #96]	@ (8004d90 <prvAddNewTaskToReadyList+0xc8>)
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4a15      	ldr	r2, [pc, #84]	@ (8004d94 <prvAddNewTaskToReadyList+0xcc>)
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7ff f908 	bl	8003f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d4e:	f000 feb5 	bl	8005abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d52:	4b0d      	ldr	r3, [pc, #52]	@ (8004d88 <prvAddNewTaskToReadyList+0xc0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00e      	beq.n	8004d78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <prvAddNewTaskToReadyList+0xbc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d207      	bcs.n	8004d78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <prvAddNewTaskToReadyList+0xd0>)
 8004d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000454 	.word	0x20000454
 8004d84:	20000354 	.word	0x20000354
 8004d88:	20000460 	.word	0x20000460
 8004d8c:	20000470 	.word	0x20000470
 8004d90:	2000045c 	.word	0x2000045c
 8004d94:	20000358 	.word	0x20000358
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d018      	beq.n	8004de0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004dae:	4b14      	ldr	r3, [pc, #80]	@ (8004e00 <vTaskDelay+0x64>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <vTaskDelay+0x32>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60bb      	str	r3, [r7, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004dce:	f000 f885 	bl	8004edc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fceb 	bl	80057b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dda:	f000 f88d 	bl	8004ef8 <xTaskResumeAll>
 8004dde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d107      	bne.n	8004df6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004de6:	4b07      	ldr	r3, [pc, #28]	@ (8004e04 <vTaskDelay+0x68>)
 8004de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004df6:	bf00      	nop
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	2000047c 	.word	0x2000047c
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	@ 0x28
 8004e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e16:	463a      	mov	r2, r7
 8004e18:	1d39      	adds	r1, r7, #4
 8004e1a:	f107 0308 	add.w	r3, r7, #8
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fb f99c 	bl	800015c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	9202      	str	r2, [sp, #8]
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	460a      	mov	r2, r1
 8004e36:	4921      	ldr	r1, [pc, #132]	@ (8004ebc <vTaskStartScheduler+0xb4>)
 8004e38:	4821      	ldr	r0, [pc, #132]	@ (8004ec0 <vTaskStartScheduler+0xb8>)
 8004e3a:	f7ff fe08 	bl	8004a4e <xTaskCreateStatic>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4a20      	ldr	r2, [pc, #128]	@ (8004ec4 <vTaskStartScheduler+0xbc>)
 8004e42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e44:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec4 <vTaskStartScheduler+0xbc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e001      	b.n	8004e56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d11b      	bne.n	8004e94 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	613b      	str	r3, [r7, #16]
}
 8004e6e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e70:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <vTaskStartScheduler+0xc0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	334c      	adds	r3, #76	@ 0x4c
 8004e76:	4a15      	ldr	r2, [pc, #84]	@ (8004ecc <vTaskStartScheduler+0xc4>)
 8004e78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e7a:	4b15      	ldr	r3, [pc, #84]	@ (8004ed0 <vTaskStartScheduler+0xc8>)
 8004e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e82:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <vTaskStartScheduler+0xcc>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004e88:	4b13      	ldr	r3, [pc, #76]	@ (8004ed8 <vTaskStartScheduler+0xd0>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e8e:	f000 fd73 	bl	8005978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e92:	e00f      	b.n	8004eb4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d10b      	bne.n	8004eb4 <vTaskStartScheduler+0xac>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	60fb      	str	r3, [r7, #12]
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	e7fd      	b.n	8004eb0 <vTaskStartScheduler+0xa8>
}
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	08006334 	.word	0x08006334
 8004ec0:	080054a5 	.word	0x080054a5
 8004ec4:	20000478 	.word	0x20000478
 8004ec8:	20000354 	.word	0x20000354
 8004ecc:	20000034 	.word	0x20000034
 8004ed0:	20000474 	.word	0x20000474
 8004ed4:	20000460 	.word	0x20000460
 8004ed8:	20000458 	.word	0x20000458

08004edc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ee0:	4b04      	ldr	r3, [pc, #16]	@ (8004ef4 <vTaskSuspendAll+0x18>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	4a03      	ldr	r2, [pc, #12]	@ (8004ef4 <vTaskSuspendAll+0x18>)
 8004ee8:	6013      	str	r3, [r2, #0]
}
 8004eea:	bf00      	nop
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	2000047c 	.word	0x2000047c

08004ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f06:	4b42      	ldr	r3, [pc, #264]	@ (8005010 <xTaskResumeAll+0x118>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <xTaskResumeAll+0x2e>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	603b      	str	r3, [r7, #0]
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	e7fd      	b.n	8004f22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f26:	f000 fd99 	bl	8005a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f2a:	4b39      	ldr	r3, [pc, #228]	@ (8005010 <xTaskResumeAll+0x118>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	4a37      	ldr	r2, [pc, #220]	@ (8005010 <xTaskResumeAll+0x118>)
 8004f32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f34:	4b36      	ldr	r3, [pc, #216]	@ (8005010 <xTaskResumeAll+0x118>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d161      	bne.n	8005000 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f3c:	4b35      	ldr	r3, [pc, #212]	@ (8005014 <xTaskResumeAll+0x11c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d05d      	beq.n	8005000 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f44:	e02e      	b.n	8004fa4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004f46:	4b34      	ldr	r3, [pc, #208]	@ (8005018 <xTaskResumeAll+0x120>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3318      	adds	r3, #24
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff f85e 	bl	8004014 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff f859 	bl	8004014 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	2201      	movs	r2, #1
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800501c <xTaskResumeAll+0x124>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	4a2a      	ldr	r2, [pc, #168]	@ (800501c <xTaskResumeAll+0x124>)
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4a27      	ldr	r2, [pc, #156]	@ (8005020 <xTaskResumeAll+0x128>)
 8004f82:	441a      	add	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f7fe ffe7 	bl	8003f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f94:	4b23      	ldr	r3, [pc, #140]	@ (8005024 <xTaskResumeAll+0x12c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d302      	bcc.n	8004fa4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f9e:	4b22      	ldr	r3, [pc, #136]	@ (8005028 <xTaskResumeAll+0x130>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8005018 <xTaskResumeAll+0x120>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1cc      	bne.n	8004f46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fb2:	f000 fb33 	bl	800561c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <xTaskResumeAll+0x134>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fc2:	f000 f837 	bl	8005034 <xTaskIncrementTick>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004fcc:	4b16      	ldr	r3, [pc, #88]	@ (8005028 <xTaskResumeAll+0x130>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f1      	bne.n	8004fc2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004fde:	4b13      	ldr	r3, [pc, #76]	@ (800502c <xTaskResumeAll+0x134>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fe4:	4b10      	ldr	r3, [pc, #64]	@ (8005028 <xTaskResumeAll+0x130>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fec:	2301      	movs	r3, #1
 8004fee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <xTaskResumeAll+0x138>)
 8004ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005000:	f000 fd5c 	bl	8005abc <vPortExitCritical>

	return xAlreadyYielded;
 8005004:	68bb      	ldr	r3, [r7, #8]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	2000047c 	.word	0x2000047c
 8005014:	20000454 	.word	0x20000454
 8005018:	20000414 	.word	0x20000414
 800501c:	2000045c 	.word	0x2000045c
 8005020:	20000358 	.word	0x20000358
 8005024:	20000354 	.word	0x20000354
 8005028:	20000468 	.word	0x20000468
 800502c:	20000464 	.word	0x20000464
 8005030:	e000ed04 	.word	0xe000ed04

08005034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800503e:	4b55      	ldr	r3, [pc, #340]	@ (8005194 <xTaskIncrementTick+0x160>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f040 8094 	bne.w	8005170 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005048:	4b53      	ldr	r3, [pc, #332]	@ (8005198 <xTaskIncrementTick+0x164>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005050:	4a51      	ldr	r2, [pc, #324]	@ (8005198 <xTaskIncrementTick+0x164>)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d121      	bne.n	80050a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800505c:	4b4f      	ldr	r3, [pc, #316]	@ (800519c <xTaskIncrementTick+0x168>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	603b      	str	r3, [r7, #0]
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	e7fd      	b.n	800507a <xTaskIncrementTick+0x46>
 800507e:	4b47      	ldr	r3, [pc, #284]	@ (800519c <xTaskIncrementTick+0x168>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	4b46      	ldr	r3, [pc, #280]	@ (80051a0 <xTaskIncrementTick+0x16c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a44      	ldr	r2, [pc, #272]	@ (800519c <xTaskIncrementTick+0x168>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4a44      	ldr	r2, [pc, #272]	@ (80051a0 <xTaskIncrementTick+0x16c>)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	4b44      	ldr	r3, [pc, #272]	@ (80051a4 <xTaskIncrementTick+0x170>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3301      	adds	r3, #1
 8005098:	4a42      	ldr	r2, [pc, #264]	@ (80051a4 <xTaskIncrementTick+0x170>)
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	f000 fabe 	bl	800561c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050a0:	4b41      	ldr	r3, [pc, #260]	@ (80051a8 <xTaskIncrementTick+0x174>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d34d      	bcc.n	8005146 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050aa:	4b3c      	ldr	r3, [pc, #240]	@ (800519c <xTaskIncrementTick+0x168>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <xTaskIncrementTick+0x84>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <xTaskIncrementTick+0x86>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050be:	4b3a      	ldr	r3, [pc, #232]	@ (80051a8 <xTaskIncrementTick+0x174>)
 80050c0:	f04f 32ff 	mov.w	r2, #4294967295
 80050c4:	601a      	str	r2, [r3, #0]
					break;
 80050c6:	e03e      	b.n	8005146 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050c8:	4b34      	ldr	r3, [pc, #208]	@ (800519c <xTaskIncrementTick+0x168>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d203      	bcs.n	80050e8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050e0:	4a31      	ldr	r2, [pc, #196]	@ (80051a8 <xTaskIncrementTick+0x174>)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6013      	str	r3, [r2, #0]
						break;
 80050e6:	e02e      	b.n	8005146 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe ff91 	bl	8004014 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d004      	beq.n	8005104 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	3318      	adds	r3, #24
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe ff88 	bl	8004014 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	2201      	movs	r2, #1
 800510a:	409a      	lsls	r2, r3
 800510c:	4b27      	ldr	r3, [pc, #156]	@ (80051ac <xTaskIncrementTick+0x178>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4313      	orrs	r3, r2
 8005112:	4a26      	ldr	r2, [pc, #152]	@ (80051ac <xTaskIncrementTick+0x178>)
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4a23      	ldr	r2, [pc, #140]	@ (80051b0 <xTaskIncrementTick+0x17c>)
 8005124:	441a      	add	r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	3304      	adds	r3, #4
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f7fe ff16 	bl	8003f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005136:	4b1f      	ldr	r3, [pc, #124]	@ (80051b4 <xTaskIncrementTick+0x180>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513c:	429a      	cmp	r2, r3
 800513e:	d3b4      	bcc.n	80050aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005140:	2301      	movs	r3, #1
 8005142:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005144:	e7b1      	b.n	80050aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005146:	4b1b      	ldr	r3, [pc, #108]	@ (80051b4 <xTaskIncrementTick+0x180>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800514c:	4918      	ldr	r1, [pc, #96]	@ (80051b0 <xTaskIncrementTick+0x17c>)
 800514e:	4613      	mov	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d901      	bls.n	8005162 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800515e:	2301      	movs	r3, #1
 8005160:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8005162:	4b15      	ldr	r3, [pc, #84]	@ (80051b8 <xTaskIncrementTick+0x184>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <xTaskIncrementTick+0x14a>
			{
				vApplicationTickHook();
 800516a:	f7fa fff1 	bl	8000150 <vApplicationTickHook>
 800516e:	e006      	b.n	800517e <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005170:	4b11      	ldr	r3, [pc, #68]	@ (80051b8 <xTaskIncrementTick+0x184>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	4a10      	ldr	r2, [pc, #64]	@ (80051b8 <xTaskIncrementTick+0x184>)
 8005178:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800517a:	f7fa ffe9 	bl	8000150 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800517e:	4b0f      	ldr	r3, [pc, #60]	@ (80051bc <xTaskIncrementTick+0x188>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <xTaskIncrementTick+0x156>
		{
			xSwitchRequired = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800518a:	697b      	ldr	r3, [r7, #20]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	2000047c 	.word	0x2000047c
 8005198:	20000458 	.word	0x20000458
 800519c:	2000040c 	.word	0x2000040c
 80051a0:	20000410 	.word	0x20000410
 80051a4:	2000046c 	.word	0x2000046c
 80051a8:	20000474 	.word	0x20000474
 80051ac:	2000045c 	.word	0x2000045c
 80051b0:	20000358 	.word	0x20000358
 80051b4:	20000354 	.word	0x20000354
 80051b8:	20000464 	.word	0x20000464
 80051bc:	20000468 	.word	0x20000468

080051c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051c6:	4b29      	ldr	r3, [pc, #164]	@ (800526c <vTaskSwitchContext+0xac>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051ce:	4b28      	ldr	r3, [pc, #160]	@ (8005270 <vTaskSwitchContext+0xb0>)
 80051d0:	2201      	movs	r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051d4:	e045      	b.n	8005262 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80051d6:	4b26      	ldr	r3, [pc, #152]	@ (8005270 <vTaskSwitchContext+0xb0>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80051dc:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <vTaskSwitchContext+0xb4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	fab3 f383 	clz	r3, r3
 80051e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80051ea:	7afb      	ldrb	r3, [r7, #11]
 80051ec:	f1c3 031f 	rsb	r3, r3, #31
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	4921      	ldr	r1, [pc, #132]	@ (8005278 <vTaskSwitchContext+0xb8>)
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	607b      	str	r3, [r7, #4]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <vTaskSwitchContext+0x5a>
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4a13      	ldr	r2, [pc, #76]	@ (8005278 <vTaskSwitchContext+0xb8>)
 800522a:	4413      	add	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	3308      	adds	r3, #8
 8005240:	429a      	cmp	r2, r3
 8005242:	d104      	bne.n	800524e <vTaskSwitchContext+0x8e>
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4a09      	ldr	r2, [pc, #36]	@ (800527c <vTaskSwitchContext+0xbc>)
 8005256:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005258:	4b08      	ldr	r3, [pc, #32]	@ (800527c <vTaskSwitchContext+0xbc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	334c      	adds	r3, #76	@ 0x4c
 800525e:	4a08      	ldr	r2, [pc, #32]	@ (8005280 <vTaskSwitchContext+0xc0>)
 8005260:	6013      	str	r3, [r2, #0]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	2000047c 	.word	0x2000047c
 8005270:	20000468 	.word	0x20000468
 8005274:	2000045c 	.word	0x2000045c
 8005278:	20000358 	.word	0x20000358
 800527c:	20000354 	.word	0x20000354
 8005280:	20000034 	.word	0x20000034

08005284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10b      	bne.n	80052ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	60fb      	str	r3, [r7, #12]
}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	e7fd      	b.n	80052a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052ac:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <vTaskPlaceOnEventList+0x48>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3318      	adds	r3, #24
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7fe fe75 	bl	8003fa4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052ba:	2101      	movs	r1, #1
 80052bc:	6838      	ldr	r0, [r7, #0]
 80052be:	f000 fa77 	bl	80057b0 <prvAddCurrentTaskToDelayedList>
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000354 	.word	0x20000354

080052d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	3318      	adds	r3, #24
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fe86 	bl	8004014 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005308:	4b1d      	ldr	r3, [pc, #116]	@ (8005380 <xTaskRemoveFromEventList+0xb0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11c      	bne.n	800534a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	3304      	adds	r3, #4
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe fe7d 	bl	8004014 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	2201      	movs	r2, #1
 8005320:	409a      	lsls	r2, r3
 8005322:	4b18      	ldr	r3, [pc, #96]	@ (8005384 <xTaskRemoveFromEventList+0xb4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4313      	orrs	r3, r2
 8005328:	4a16      	ldr	r2, [pc, #88]	@ (8005384 <xTaskRemoveFromEventList+0xb4>)
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4a13      	ldr	r2, [pc, #76]	@ (8005388 <xTaskRemoveFromEventList+0xb8>)
 800533a:	441a      	add	r2, r3
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f7fe fe0b 	bl	8003f5e <vListInsertEnd>
 8005348:	e005      	b.n	8005356 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	3318      	adds	r3, #24
 800534e:	4619      	mov	r1, r3
 8005350:	480e      	ldr	r0, [pc, #56]	@ (800538c <xTaskRemoveFromEventList+0xbc>)
 8005352:	f7fe fe04 	bl	8003f5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535a:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <xTaskRemoveFromEventList+0xc0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	429a      	cmp	r2, r3
 8005362:	d905      	bls.n	8005370 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005364:	2301      	movs	r3, #1
 8005366:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005368:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <xTaskRemoveFromEventList+0xc4>)
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	e001      	b.n	8005374 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005374:	697b      	ldr	r3, [r7, #20]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	2000047c 	.word	0x2000047c
 8005384:	2000045c 	.word	0x2000045c
 8005388:	20000358 	.word	0x20000358
 800538c:	20000414 	.word	0x20000414
 8005390:	20000354 	.word	0x20000354
 8005394:	20000468 	.word	0x20000468

08005398 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053a0:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <vTaskInternalSetTimeOutState+0x24>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <vTaskInternalSetTimeOutState+0x28>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	605a      	str	r2, [r3, #4]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	2000046c 	.word	0x2000046c
 80053c0:	20000458 	.word	0x20000458

080053c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	613b      	str	r3, [r7, #16]
}
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
 80053ea:	e7fd      	b.n	80053e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	60fb      	str	r3, [r7, #12]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800540a:	f000 fb27 	bl	8005a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800540e:	4b1d      	ldr	r3, [pc, #116]	@ (8005484 <xTaskCheckForTimeOut+0xc0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d102      	bne.n	800542e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	e023      	b.n	8005476 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b15      	ldr	r3, [pc, #84]	@ (8005488 <xTaskCheckForTimeOut+0xc4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d007      	beq.n	800544a <xTaskCheckForTimeOut+0x86>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	429a      	cmp	r2, r3
 8005442:	d302      	bcc.n	800544a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e015      	b.n	8005476 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	429a      	cmp	r2, r3
 8005452:	d20b      	bcs.n	800546c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff ff99 	bl	8005398 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e004      	b.n	8005476 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005476:	f000 fb21 	bl	8005abc <vPortExitCritical>

	return xReturn;
 800547a:	69fb      	ldr	r3, [r7, #28]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000458 	.word	0x20000458
 8005488:	2000046c 	.word	0x2000046c

0800548c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005490:	4b03      	ldr	r3, [pc, #12]	@ (80054a0 <vTaskMissedYield+0x14>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000468 	.word	0x20000468

080054a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054ac:	f000 f852 	bl	8005554 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054b0:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <prvIdleTask+0x28>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d9f9      	bls.n	80054ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <prvIdleTask+0x2c>)
 80054ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054c8:	e7f0      	b.n	80054ac <prvIdleTask+0x8>
 80054ca:	bf00      	nop
 80054cc:	20000358 	.word	0x20000358
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054da:	2300      	movs	r3, #0
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	e00c      	b.n	80054fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4a12      	ldr	r2, [pc, #72]	@ (8005534 <prvInitialiseTaskLists+0x60>)
 80054ec:	4413      	add	r3, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe fd0a 	bl	8003f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3301      	adds	r3, #1
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b06      	cmp	r3, #6
 80054fe:	d9ef      	bls.n	80054e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005500:	480d      	ldr	r0, [pc, #52]	@ (8005538 <prvInitialiseTaskLists+0x64>)
 8005502:	f7fe fd01 	bl	8003f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005506:	480d      	ldr	r0, [pc, #52]	@ (800553c <prvInitialiseTaskLists+0x68>)
 8005508:	f7fe fcfe 	bl	8003f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800550c:	480c      	ldr	r0, [pc, #48]	@ (8005540 <prvInitialiseTaskLists+0x6c>)
 800550e:	f7fe fcfb 	bl	8003f08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005512:	480c      	ldr	r0, [pc, #48]	@ (8005544 <prvInitialiseTaskLists+0x70>)
 8005514:	f7fe fcf8 	bl	8003f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005518:	480b      	ldr	r0, [pc, #44]	@ (8005548 <prvInitialiseTaskLists+0x74>)
 800551a:	f7fe fcf5 	bl	8003f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800551e:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <prvInitialiseTaskLists+0x78>)
 8005520:	4a05      	ldr	r2, [pc, #20]	@ (8005538 <prvInitialiseTaskLists+0x64>)
 8005522:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005524:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <prvInitialiseTaskLists+0x7c>)
 8005526:	4a05      	ldr	r2, [pc, #20]	@ (800553c <prvInitialiseTaskLists+0x68>)
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000358 	.word	0x20000358
 8005538:	200003e4 	.word	0x200003e4
 800553c:	200003f8 	.word	0x200003f8
 8005540:	20000414 	.word	0x20000414
 8005544:	20000428 	.word	0x20000428
 8005548:	20000440 	.word	0x20000440
 800554c:	2000040c 	.word	0x2000040c
 8005550:	20000410 	.word	0x20000410

08005554 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800555a:	e019      	b.n	8005590 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800555c:	f000 fa7e 	bl	8005a5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005560:	4b10      	ldr	r3, [pc, #64]	@ (80055a4 <prvCheckTasksWaitingTermination+0x50>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fd51 	bl	8004014 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005572:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <prvCheckTasksWaitingTermination+0x54>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	4a0b      	ldr	r2, [pc, #44]	@ (80055a8 <prvCheckTasksWaitingTermination+0x54>)
 800557a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800557c:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <prvCheckTasksWaitingTermination+0x58>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3b01      	subs	r3, #1
 8005582:	4a0a      	ldr	r2, [pc, #40]	@ (80055ac <prvCheckTasksWaitingTermination+0x58>)
 8005584:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005586:	f000 fa99 	bl	8005abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f810 	bl	80055b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005590:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <prvCheckTasksWaitingTermination+0x58>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e1      	bne.n	800555c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000428 	.word	0x20000428
 80055a8:	20000454 	.word	0x20000454
 80055ac:	2000043c 	.word	0x2000043c

080055b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	334c      	adds	r3, #76	@ 0x4c
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fd49 	bl	8006054 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d108      	bne.n	80055de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fc0d 	bl	8005df0 <vPortFree>
				vPortFree( pxTCB );
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fc0a 	bl	8005df0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055dc:	e019      	b.n	8005612 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d103      	bne.n	80055f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fc01 	bl	8005df0 <vPortFree>
	}
 80055ee:	e010      	b.n	8005612 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d00b      	beq.n	8005612 <prvDeleteTCB+0x62>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	60fb      	str	r3, [r7, #12]
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	e7fd      	b.n	800560e <prvDeleteTCB+0x5e>
	}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005622:	4b0e      	ldr	r3, [pc, #56]	@ (800565c <prvResetNextTaskUnblockTime+0x40>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <prvResetNextTaskUnblockTime+0x14>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <prvResetNextTaskUnblockTime+0x16>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005636:	4b0a      	ldr	r3, [pc, #40]	@ (8005660 <prvResetNextTaskUnblockTime+0x44>)
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800563e:	e008      	b.n	8005652 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005640:	4b06      	ldr	r3, [pc, #24]	@ (800565c <prvResetNextTaskUnblockTime+0x40>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	4a04      	ldr	r2, [pc, #16]	@ (8005660 <prvResetNextTaskUnblockTime+0x44>)
 8005650:	6013      	str	r3, [r2, #0]
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr
 800565c:	2000040c 	.word	0x2000040c
 8005660:	20000474 	.word	0x20000474

08005664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800566a:	4b0b      	ldr	r3, [pc, #44]	@ (8005698 <xTaskGetSchedulerState+0x34>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005672:	2301      	movs	r3, #1
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	e008      	b.n	800568a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005678:	4b08      	ldr	r3, [pc, #32]	@ (800569c <xTaskGetSchedulerState+0x38>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005680:	2302      	movs	r3, #2
 8005682:	607b      	str	r3, [r7, #4]
 8005684:	e001      	b.n	800568a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005686:	2300      	movs	r3, #0
 8005688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800568a:	687b      	ldr	r3, [r7, #4]
	}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000460 	.word	0x20000460
 800569c:	2000047c 	.word	0x2000047c

080056a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d070      	beq.n	8005798 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056b6:	4b3b      	ldr	r3, [pc, #236]	@ (80057a4 <xTaskPriorityDisinherit+0x104>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d00b      	beq.n	80056d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	60fb      	str	r3, [r7, #12]
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	e7fd      	b.n	80056d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	60bb      	str	r3, [r7, #8]
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	e7fd      	b.n	80056f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056fc:	1e5a      	subs	r2, r3, #1
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	429a      	cmp	r2, r3
 800570c:	d044      	beq.n	8005798 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005712:	2b00      	cmp	r3, #0
 8005714:	d140      	bne.n	8005798 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	3304      	adds	r3, #4
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fc7a 	bl	8004014 <uxListRemove>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d115      	bne.n	8005752 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572a:	491f      	ldr	r1, [pc, #124]	@ (80057a8 <xTaskPriorityDisinherit+0x108>)
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xTaskPriorityDisinherit+0xb2>
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005740:	2201      	movs	r2, #1
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43da      	mvns	r2, r3
 8005748:	4b18      	ldr	r3, [pc, #96]	@ (80057ac <xTaskPriorityDisinherit+0x10c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4013      	ands	r3, r2
 800574e:	4a17      	ldr	r2, [pc, #92]	@ (80057ac <xTaskPriorityDisinherit+0x10c>)
 8005750:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	f1c3 0207 	rsb	r2, r3, #7
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	2201      	movs	r2, #1
 800576c:	409a      	lsls	r2, r3
 800576e:	4b0f      	ldr	r3, [pc, #60]	@ (80057ac <xTaskPriorityDisinherit+0x10c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4313      	orrs	r3, r2
 8005774:	4a0d      	ldr	r2, [pc, #52]	@ (80057ac <xTaskPriorityDisinherit+0x10c>)
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4a08      	ldr	r2, [pc, #32]	@ (80057a8 <xTaskPriorityDisinherit+0x108>)
 8005786:	441a      	add	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f7fe fbe5 	bl	8003f5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005794:	2301      	movs	r3, #1
 8005796:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005798:	697b      	ldr	r3, [r7, #20]
	}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000354 	.word	0x20000354
 80057a8:	20000358 	.word	0x20000358
 80057ac:	2000045c 	.word	0x2000045c

080057b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057ba:	4b29      	ldr	r3, [pc, #164]	@ (8005860 <prvAddCurrentTaskToDelayedList+0xb0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057c0:	4b28      	ldr	r3, [pc, #160]	@ (8005864 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fc24 	bl	8004014 <uxListRemove>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10b      	bne.n	80057ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80057d2:	4b24      	ldr	r3, [pc, #144]	@ (8005864 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	2201      	movs	r2, #1
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	43da      	mvns	r2, r3
 80057e0:	4b21      	ldr	r3, [pc, #132]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4013      	ands	r3, r2
 80057e6:	4a20      	ldr	r2, [pc, #128]	@ (8005868 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d10a      	bne.n	8005808 <prvAddCurrentTaskToDelayedList+0x58>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005864 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3304      	adds	r3, #4
 80057fe:	4619      	mov	r1, r3
 8005800:	481a      	ldr	r0, [pc, #104]	@ (800586c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005802:	f7fe fbac 	bl	8003f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005806:	e026      	b.n	8005856 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005810:	4b14      	ldr	r3, [pc, #80]	@ (8005864 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	429a      	cmp	r2, r3
 800581e:	d209      	bcs.n	8005834 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005820:	4b13      	ldr	r3, [pc, #76]	@ (8005870 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b0f      	ldr	r3, [pc, #60]	@ (8005864 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3304      	adds	r3, #4
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7fe fbb9 	bl	8003fa4 <vListInsert>
}
 8005832:	e010      	b.n	8005856 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005834:	4b0f      	ldr	r3, [pc, #60]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <prvAddCurrentTaskToDelayedList+0xb4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3304      	adds	r3, #4
 800583e:	4619      	mov	r1, r3
 8005840:	4610      	mov	r0, r2
 8005842:	f7fe fbaf 	bl	8003fa4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005846:	4b0c      	ldr	r3, [pc, #48]	@ (8005878 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	429a      	cmp	r2, r3
 800584e:	d202      	bcs.n	8005856 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005850:	4a09      	ldr	r2, [pc, #36]	@ (8005878 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6013      	str	r3, [r2, #0]
}
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000458 	.word	0x20000458
 8005864:	20000354 	.word	0x20000354
 8005868:	2000045c 	.word	0x2000045c
 800586c:	20000440 	.word	0x20000440
 8005870:	20000410 	.word	0x20000410
 8005874:	2000040c 	.word	0x2000040c
 8005878:	20000474 	.word	0x20000474

0800587c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	3b04      	subs	r3, #4
 800588c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b04      	subs	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3b04      	subs	r3, #4
 80058aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058ac:	4a08      	ldr	r2, [pc, #32]	@ (80058d0 <pxPortInitialiseStack+0x54>)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3b14      	subs	r3, #20
 80058b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3b20      	subs	r3, #32
 80058c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058c4:	68fb      	ldr	r3, [r7, #12]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr
 80058d0:	080058d5 	.word	0x080058d5

080058d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058de:	4b12      	ldr	r3, [pc, #72]	@ (8005928 <prvTaskExitError+0x54>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d00b      	beq.n	8005900 <prvTaskExitError+0x2c>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	60fb      	str	r3, [r7, #12]
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <prvTaskExitError+0x28>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	60bb      	str	r3, [r7, #8]
}
 8005912:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005914:	bf00      	nop
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0fc      	beq.n	8005916 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr
 8005928:	20000030 	.word	0x20000030
 800592c:	00000000 	.word	0x00000000

08005930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005930:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <pxCurrentTCBConst2>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	6808      	ldr	r0, [r1, #0]
 8005936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800593a:	f380 8809 	msr	PSP, r0
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8811 	msr	BASEPRI, r0
 800594a:	f04e 0e0d 	orr.w	lr, lr, #13
 800594e:	4770      	bx	lr

08005950 <pxCurrentTCBConst2>:
 8005950:	20000354 	.word	0x20000354
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop

08005958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005958:	4806      	ldr	r0, [pc, #24]	@ (8005974 <prvPortStartFirstTask+0x1c>)
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	f380 8808 	msr	MSP, r0
 8005962:	b662      	cpsie	i
 8005964:	b661      	cpsie	f
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	df00      	svc	0
 8005970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005972:	bf00      	nop
 8005974:	e000ed08 	.word	0xe000ed08

08005978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800597e:	4b32      	ldr	r3, [pc, #200]	@ (8005a48 <xPortStartScheduler+0xd0>)
 8005980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	22ff      	movs	r2, #255	@ 0xff
 800598e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a4c <xPortStartScheduler+0xd4>)
 80059a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a50 <xPortStartScheduler+0xd8>)
 80059a8:	2207      	movs	r2, #7
 80059aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ac:	e009      	b.n	80059c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80059ae:	4b28      	ldr	r3, [pc, #160]	@ (8005a50 <xPortStartScheduler+0xd8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	4a26      	ldr	r2, [pc, #152]	@ (8005a50 <xPortStartScheduler+0xd8>)
 80059b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ca:	2b80      	cmp	r3, #128	@ 0x80
 80059cc:	d0ef      	beq.n	80059ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059ce:	4b20      	ldr	r3, [pc, #128]	@ (8005a50 <xPortStartScheduler+0xd8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1c3 0307 	rsb	r3, r3, #7
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d00b      	beq.n	80059f2 <xPortStartScheduler+0x7a>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	60bb      	str	r3, [r7, #8]
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	e7fd      	b.n	80059ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059f2:	4b17      	ldr	r3, [pc, #92]	@ (8005a50 <xPortStartScheduler+0xd8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	4a15      	ldr	r2, [pc, #84]	@ (8005a50 <xPortStartScheduler+0xd8>)
 80059fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059fc:	4b14      	ldr	r3, [pc, #80]	@ (8005a50 <xPortStartScheduler+0xd8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a04:	4a12      	ldr	r2, [pc, #72]	@ (8005a50 <xPortStartScheduler+0xd8>)
 8005a06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a10:	4b10      	ldr	r3, [pc, #64]	@ (8005a54 <xPortStartScheduler+0xdc>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a0f      	ldr	r2, [pc, #60]	@ (8005a54 <xPortStartScheduler+0xdc>)
 8005a16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <xPortStartScheduler+0xdc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a0c      	ldr	r2, [pc, #48]	@ (8005a54 <xPortStartScheduler+0xdc>)
 8005a22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a28:	f000 f8b8 	bl	8005b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <xPortStartScheduler+0xe0>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a32:	f7ff ff91 	bl	8005958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a36:	f7ff fbc3 	bl	80051c0 <vTaskSwitchContext>
	prvTaskExitError();
 8005a3a:	f7ff ff4b 	bl	80058d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	e000e400 	.word	0xe000e400
 8005a4c:	20000480 	.word	0x20000480
 8005a50:	20000484 	.word	0x20000484
 8005a54:	e000ed20 	.word	0xe000ed20
 8005a58:	20000030 	.word	0x20000030

08005a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	607b      	str	r3, [r7, #4]
}
 8005a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a76:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab4 <vPortEnterCritical+0x58>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ab4 <vPortEnterCritical+0x58>)
 8005a7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a80:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab4 <vPortEnterCritical+0x58>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d110      	bne.n	8005aaa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a88:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab8 <vPortEnterCritical+0x5c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <vPortEnterCritical+0x4e>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	603b      	str	r3, [r7, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <vPortEnterCritical+0x4a>
	}
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr
 8005ab4:	20000030 	.word	0x20000030
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ac2:	4b12      	ldr	r3, [pc, #72]	@ (8005b0c <vPortExitCritical+0x50>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10b      	bne.n	8005ae2 <vPortExitCritical+0x26>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	607b      	str	r3, [r7, #4]
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	e7fd      	b.n	8005ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8005b0c <vPortExitCritical+0x50>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	4a08      	ldr	r2, [pc, #32]	@ (8005b0c <vPortExitCritical+0x50>)
 8005aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aec:	4b07      	ldr	r3, [pc, #28]	@ (8005b0c <vPortExitCritical+0x50>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <vPortExitCritical+0x44>
 8005af4:	2300      	movs	r3, #0
 8005af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f383 8811 	msr	BASEPRI, r3
}
 8005afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000030 	.word	0x20000030

08005b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b10:	f3ef 8009 	mrs	r0, PSP
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4b0d      	ldr	r3, [pc, #52]	@ (8005b50 <pxCurrentTCBConst>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b20:	6010      	str	r0, [r2, #0]
 8005b22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005b26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b2a:	f380 8811 	msr	BASEPRI, r0
 8005b2e:	f7ff fb47 	bl	80051c0 <vTaskSwitchContext>
 8005b32:	f04f 0000 	mov.w	r0, #0
 8005b36:	f380 8811 	msr	BASEPRI, r0
 8005b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	6808      	ldr	r0, [r1, #0]
 8005b42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b46:	f380 8809 	msr	PSP, r0
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	4770      	bx	lr

08005b50 <pxCurrentTCBConst>:
 8005b50:	20000354 	.word	0x20000354
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop

08005b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
}
 8005b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b72:	f7ff fa5f 	bl	8005034 <xTaskIncrementTick>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <SysTick_Handler+0x40>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
}
 8005b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <vPortSetupTimerInterrupt+0x30>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bac:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <vPortSetupTimerInterrupt+0x38>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a09      	ldr	r2, [pc, #36]	@ (8005bd8 <vPortSetupTimerInterrupt+0x3c>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	4a08      	ldr	r2, [pc, #32]	@ (8005bdc <vPortSetupTimerInterrupt+0x40>)
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bbe:	4b03      	ldr	r3, [pc, #12]	@ (8005bcc <vPortSetupTimerInterrupt+0x30>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	e000e010 	.word	0xe000e010
 8005bd0:	e000e018 	.word	0xe000e018
 8005bd4:	20000024 	.word	0x20000024
 8005bd8:	10624dd3 	.word	0x10624dd3
 8005bdc:	e000e014 	.word	0xe000e014

08005be0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005be6:	f3ef 8305 	mrs	r3, IPSR
 8005bea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b0f      	cmp	r3, #15
 8005bf0:	d915      	bls.n	8005c1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bf2:	4a17      	ldr	r2, [pc, #92]	@ (8005c50 <vPortValidateInterruptPriority+0x70>)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bfc:	4b15      	ldr	r3, [pc, #84]	@ (8005c54 <vPortValidateInterruptPriority+0x74>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	7afa      	ldrb	r2, [r7, #11]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d20b      	bcs.n	8005c1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	607b      	str	r3, [r7, #4]
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	e7fd      	b.n	8005c1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c58 <vPortValidateInterruptPriority+0x78>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c26:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <vPortValidateInterruptPriority+0x7c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d90b      	bls.n	8005c46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	603b      	str	r3, [r7, #0]
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <vPortValidateInterruptPriority+0x62>
	}
 8005c46:	bf00      	nop
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr
 8005c50:	e000e3f0 	.word	0xe000e3f0
 8005c54:	20000480 	.word	0x20000480
 8005c58:	e000ed0c 	.word	0xe000ed0c
 8005c5c:	20000484 	.word	0x20000484

08005c60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08a      	sub	sp, #40	@ 0x28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c6c:	f7ff f936 	bl	8004edc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c70:	4b5a      	ldr	r3, [pc, #360]	@ (8005ddc <pvPortMalloc+0x17c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c78:	f000 f916 	bl	8005ea8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c7c:	4b58      	ldr	r3, [pc, #352]	@ (8005de0 <pvPortMalloc+0x180>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 8090 	bne.w	8005daa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01e      	beq.n	8005cce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c90:	2208      	movs	r2, #8
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d015      	beq.n	8005cce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f023 0307 	bic.w	r3, r3, #7
 8005ca8:	3308      	adds	r3, #8
 8005caa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00b      	beq.n	8005cce <pvPortMalloc+0x6e>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	617b      	str	r3, [r7, #20]
}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	e7fd      	b.n	8005cca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d06a      	beq.n	8005daa <pvPortMalloc+0x14a>
 8005cd4:	4b43      	ldr	r3, [pc, #268]	@ (8005de4 <pvPortMalloc+0x184>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d865      	bhi.n	8005daa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cde:	4b42      	ldr	r3, [pc, #264]	@ (8005de8 <pvPortMalloc+0x188>)
 8005ce0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ce2:	4b41      	ldr	r3, [pc, #260]	@ (8005de8 <pvPortMalloc+0x188>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ce8:	e004      	b.n	8005cf4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d903      	bls.n	8005d06 <pvPortMalloc+0xa6>
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f1      	bne.n	8005cea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d06:	4b35      	ldr	r3, [pc, #212]	@ (8005ddc <pvPortMalloc+0x17c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d04c      	beq.n	8005daa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2208      	movs	r2, #8
 8005d16:	4413      	add	r3, r2
 8005d18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	1ad2      	subs	r2, r2, r3
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d920      	bls.n	8005d74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4413      	add	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <pvPortMalloc+0xfc>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	613b      	str	r3, [r7, #16]
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	e7fd      	b.n	8005d58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	1ad2      	subs	r2, r2, r3
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d6e:	69b8      	ldr	r0, [r7, #24]
 8005d70:	f000 f8fc 	bl	8005f6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d74:	4b1b      	ldr	r3, [pc, #108]	@ (8005de4 <pvPortMalloc+0x184>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	4a19      	ldr	r2, [pc, #100]	@ (8005de4 <pvPortMalloc+0x184>)
 8005d80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d82:	4b18      	ldr	r3, [pc, #96]	@ (8005de4 <pvPortMalloc+0x184>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4b19      	ldr	r3, [pc, #100]	@ (8005dec <pvPortMalloc+0x18c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d203      	bcs.n	8005d96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d8e:	4b15      	ldr	r3, [pc, #84]	@ (8005de4 <pvPortMalloc+0x184>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a16      	ldr	r2, [pc, #88]	@ (8005dec <pvPortMalloc+0x18c>)
 8005d94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	4b11      	ldr	r3, [pc, #68]	@ (8005de0 <pvPortMalloc+0x180>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005daa:	f7ff f8a5 	bl	8004ef8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00b      	beq.n	8005dd0 <pvPortMalloc+0x170>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	60fb      	str	r3, [r7, #12]
}
 8005dca:	bf00      	nop
 8005dcc:	bf00      	nop
 8005dce:	e7fd      	b.n	8005dcc <pvPortMalloc+0x16c>
	return pvReturn;
 8005dd0:	69fb      	ldr	r3, [r7, #28]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3728      	adds	r7, #40	@ 0x28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20001090 	.word	0x20001090
 8005de0:	2000109c 	.word	0x2000109c
 8005de4:	20001094 	.word	0x20001094
 8005de8:	20001088 	.word	0x20001088
 8005dec:	20001098 	.word	0x20001098

08005df0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d04a      	beq.n	8005e98 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e02:	2308      	movs	r3, #8
 8005e04:	425b      	negs	r3, r3
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	4b22      	ldr	r3, [pc, #136]	@ (8005ea0 <vPortFree+0xb0>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <vPortFree+0x46>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	60fb      	str	r3, [r7, #12]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <vPortFree+0x66>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60bb      	str	r3, [r7, #8]
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	e7fd      	b.n	8005e52 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	4b11      	ldr	r3, [pc, #68]	@ (8005ea0 <vPortFree+0xb0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d019      	beq.n	8005e98 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d115      	bne.n	8005e98 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea0 <vPortFree+0xb0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	43db      	mvns	r3, r3
 8005e76:	401a      	ands	r2, r3
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e7c:	f7ff f82e 	bl	8004edc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	4b07      	ldr	r3, [pc, #28]	@ (8005ea4 <vPortFree+0xb4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4413      	add	r3, r2
 8005e8a:	4a06      	ldr	r2, [pc, #24]	@ (8005ea4 <vPortFree+0xb4>)
 8005e8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e8e:	6938      	ldr	r0, [r7, #16]
 8005e90:	f000 f86c 	bl	8005f6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e94:	f7ff f830 	bl	8004ef8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e98:	bf00      	nop
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	2000109c 	.word	0x2000109c
 8005ea4:	20001094 	.word	0x20001094

08005ea8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005eb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005eb4:	4b27      	ldr	r3, [pc, #156]	@ (8005f54 <prvHeapInit+0xac>)
 8005eb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00c      	beq.n	8005edc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3307      	adds	r3, #7
 8005ec6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0307 	bic.w	r3, r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8005f54 <prvHeapInit+0xac>)
 8005ed8:	4413      	add	r3, r2
 8005eda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f58 <prvHeapInit+0xb0>)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f58 <prvHeapInit+0xb0>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0307 	bic.w	r3, r3, #7
 8005f02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a15      	ldr	r2, [pc, #84]	@ (8005f5c <prvHeapInit+0xb4>)
 8005f08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f0a:	4b14      	ldr	r3, [pc, #80]	@ (8005f5c <prvHeapInit+0xb4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f12:	4b12      	ldr	r3, [pc, #72]	@ (8005f5c <prvHeapInit+0xb4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	1ad2      	subs	r2, r2, r3
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f28:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <prvHeapInit+0xb4>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	4a0a      	ldr	r2, [pc, #40]	@ (8005f60 <prvHeapInit+0xb8>)
 8005f36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4a09      	ldr	r2, [pc, #36]	@ (8005f64 <prvHeapInit+0xbc>)
 8005f3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f40:	4b09      	ldr	r3, [pc, #36]	@ (8005f68 <prvHeapInit+0xc0>)
 8005f42:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f46:	601a      	str	r2, [r3, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000488 	.word	0x20000488
 8005f58:	20001088 	.word	0x20001088
 8005f5c:	20001090 	.word	0x20001090
 8005f60:	20001098 	.word	0x20001098
 8005f64:	20001094 	.word	0x20001094
 8005f68:	2000109c 	.word	0x2000109c

08005f6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f74:	4b27      	ldr	r3, [pc, #156]	@ (8006014 <prvInsertBlockIntoFreeList+0xa8>)
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	e002      	b.n	8005f80 <prvInsertBlockIntoFreeList+0x14>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d8f7      	bhi.n	8005f7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	4413      	add	r3, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d108      	bne.n	8005fae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	441a      	add	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d118      	bne.n	8005ff4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b14      	ldr	r3, [pc, #80]	@ (8006018 <prvInsertBlockIntoFreeList+0xac>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d00d      	beq.n	8005fea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	441a      	add	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	e008      	b.n	8005ffc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fea:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <prvInsertBlockIntoFreeList+0xac>)
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	e003      	b.n	8005ffc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d002      	beq.n	800600a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr
 8006014:	20001088 	.word	0x20001088
 8006018:	20001090 	.word	0x20001090

0800601c <memset>:
 800601c:	4603      	mov	r3, r0
 800601e:	4402      	add	r2, r0
 8006020:	4293      	cmp	r3, r2
 8006022:	d100      	bne.n	8006026 <memset+0xa>
 8006024:	4770      	bx	lr
 8006026:	f803 1b01 	strb.w	r1, [r3], #1
 800602a:	e7f9      	b.n	8006020 <memset+0x4>

0800602c <strncpy>:
 800602c:	4603      	mov	r3, r0
 800602e:	b510      	push	{r4, lr}
 8006030:	3901      	subs	r1, #1
 8006032:	b132      	cbz	r2, 8006042 <strncpy+0x16>
 8006034:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006038:	3a01      	subs	r2, #1
 800603a:	f803 4b01 	strb.w	r4, [r3], #1
 800603e:	2c00      	cmp	r4, #0
 8006040:	d1f7      	bne.n	8006032 <strncpy+0x6>
 8006042:	2100      	movs	r1, #0
 8006044:	441a      	add	r2, r3
 8006046:	4293      	cmp	r3, r2
 8006048:	d100      	bne.n	800604c <strncpy+0x20>
 800604a:	bd10      	pop	{r4, pc}
 800604c:	f803 1b01 	strb.w	r1, [r3], #1
 8006050:	e7f9      	b.n	8006046 <strncpy+0x1a>
	...

08006054 <_reclaim_reent>:
 8006054:	4b29      	ldr	r3, [pc, #164]	@ (80060fc <_reclaim_reent+0xa8>)
 8006056:	b570      	push	{r4, r5, r6, lr}
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4604      	mov	r4, r0
 800605c:	4283      	cmp	r3, r0
 800605e:	d04b      	beq.n	80060f8 <_reclaim_reent+0xa4>
 8006060:	69c3      	ldr	r3, [r0, #28]
 8006062:	b1ab      	cbz	r3, 8006090 <_reclaim_reent+0x3c>
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	b16b      	cbz	r3, 8006084 <_reclaim_reent+0x30>
 8006068:	2500      	movs	r5, #0
 800606a:	69e3      	ldr	r3, [r4, #28]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	5959      	ldr	r1, [r3, r5]
 8006070:	2900      	cmp	r1, #0
 8006072:	d13b      	bne.n	80060ec <_reclaim_reent+0x98>
 8006074:	3504      	adds	r5, #4
 8006076:	2d80      	cmp	r5, #128	@ 0x80
 8006078:	d1f7      	bne.n	800606a <_reclaim_reent+0x16>
 800607a:	69e3      	ldr	r3, [r4, #28]
 800607c:	4620      	mov	r0, r4
 800607e:	68d9      	ldr	r1, [r3, #12]
 8006080:	f000 f872 	bl	8006168 <_free_r>
 8006084:	69e3      	ldr	r3, [r4, #28]
 8006086:	6819      	ldr	r1, [r3, #0]
 8006088:	b111      	cbz	r1, 8006090 <_reclaim_reent+0x3c>
 800608a:	4620      	mov	r0, r4
 800608c:	f000 f86c 	bl	8006168 <_free_r>
 8006090:	6961      	ldr	r1, [r4, #20]
 8006092:	b111      	cbz	r1, 800609a <_reclaim_reent+0x46>
 8006094:	4620      	mov	r0, r4
 8006096:	f000 f867 	bl	8006168 <_free_r>
 800609a:	69e1      	ldr	r1, [r4, #28]
 800609c:	b111      	cbz	r1, 80060a4 <_reclaim_reent+0x50>
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 f862 	bl	8006168 <_free_r>
 80060a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80060a6:	b111      	cbz	r1, 80060ae <_reclaim_reent+0x5a>
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 f85d 	bl	8006168 <_free_r>
 80060ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060b0:	b111      	cbz	r1, 80060b8 <_reclaim_reent+0x64>
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 f858 	bl	8006168 <_free_r>
 80060b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80060ba:	b111      	cbz	r1, 80060c2 <_reclaim_reent+0x6e>
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 f853 	bl	8006168 <_free_r>
 80060c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80060c4:	b111      	cbz	r1, 80060cc <_reclaim_reent+0x78>
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f84e 	bl	8006168 <_free_r>
 80060cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80060ce:	b111      	cbz	r1, 80060d6 <_reclaim_reent+0x82>
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 f849 	bl	8006168 <_free_r>
 80060d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80060d8:	b111      	cbz	r1, 80060e0 <_reclaim_reent+0x8c>
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 f844 	bl	8006168 <_free_r>
 80060e0:	6a23      	ldr	r3, [r4, #32]
 80060e2:	b14b      	cbz	r3, 80060f8 <_reclaim_reent+0xa4>
 80060e4:	4620      	mov	r0, r4
 80060e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060ea:	4718      	bx	r3
 80060ec:	680e      	ldr	r6, [r1, #0]
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 f83a 	bl	8006168 <_free_r>
 80060f4:	4631      	mov	r1, r6
 80060f6:	e7bb      	b.n	8006070 <_reclaim_reent+0x1c>
 80060f8:	bd70      	pop	{r4, r5, r6, pc}
 80060fa:	bf00      	nop
 80060fc:	20000034 	.word	0x20000034

08006100 <__libc_init_array>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	2600      	movs	r6, #0
 8006104:	4d0c      	ldr	r5, [pc, #48]	@ (8006138 <__libc_init_array+0x38>)
 8006106:	4c0d      	ldr	r4, [pc, #52]	@ (800613c <__libc_init_array+0x3c>)
 8006108:	1b64      	subs	r4, r4, r5
 800610a:	10a4      	asrs	r4, r4, #2
 800610c:	42a6      	cmp	r6, r4
 800610e:	d109      	bne.n	8006124 <__libc_init_array+0x24>
 8006110:	f000 f87e 	bl	8006210 <_init>
 8006114:	2600      	movs	r6, #0
 8006116:	4d0a      	ldr	r5, [pc, #40]	@ (8006140 <__libc_init_array+0x40>)
 8006118:	4c0a      	ldr	r4, [pc, #40]	@ (8006144 <__libc_init_array+0x44>)
 800611a:	1b64      	subs	r4, r4, r5
 800611c:	10a4      	asrs	r4, r4, #2
 800611e:	42a6      	cmp	r6, r4
 8006120:	d105      	bne.n	800612e <__libc_init_array+0x2e>
 8006122:	bd70      	pop	{r4, r5, r6, pc}
 8006124:	f855 3b04 	ldr.w	r3, [r5], #4
 8006128:	4798      	blx	r3
 800612a:	3601      	adds	r6, #1
 800612c:	e7ee      	b.n	800610c <__libc_init_array+0xc>
 800612e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006132:	4798      	blx	r3
 8006134:	3601      	adds	r6, #1
 8006136:	e7f2      	b.n	800611e <__libc_init_array+0x1e>
 8006138:	08006354 	.word	0x08006354
 800613c:	08006354 	.word	0x08006354
 8006140:	08006354 	.word	0x08006354
 8006144:	08006358 	.word	0x08006358

08006148 <__retarget_lock_acquire_recursive>:
 8006148:	4770      	bx	lr

0800614a <__retarget_lock_release_recursive>:
 800614a:	4770      	bx	lr

0800614c <memcpy>:
 800614c:	440a      	add	r2, r1
 800614e:	4291      	cmp	r1, r2
 8006150:	f100 33ff 	add.w	r3, r0, #4294967295
 8006154:	d100      	bne.n	8006158 <memcpy+0xc>
 8006156:	4770      	bx	lr
 8006158:	b510      	push	{r4, lr}
 800615a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800615e:	4291      	cmp	r1, r2
 8006160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006164:	d1f9      	bne.n	800615a <memcpy+0xe>
 8006166:	bd10      	pop	{r4, pc}

08006168 <_free_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4605      	mov	r5, r0
 800616c:	2900      	cmp	r1, #0
 800616e:	d040      	beq.n	80061f2 <_free_r+0x8a>
 8006170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006174:	1f0c      	subs	r4, r1, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfb8      	it	lt
 800617a:	18e4      	addlt	r4, r4, r3
 800617c:	f000 f83c 	bl	80061f8 <__malloc_lock>
 8006180:	4a1c      	ldr	r2, [pc, #112]	@ (80061f4 <_free_r+0x8c>)
 8006182:	6813      	ldr	r3, [r2, #0]
 8006184:	b933      	cbnz	r3, 8006194 <_free_r+0x2c>
 8006186:	6063      	str	r3, [r4, #4]
 8006188:	6014      	str	r4, [r2, #0]
 800618a:	4628      	mov	r0, r5
 800618c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006190:	f000 b838 	b.w	8006204 <__malloc_unlock>
 8006194:	42a3      	cmp	r3, r4
 8006196:	d908      	bls.n	80061aa <_free_r+0x42>
 8006198:	6820      	ldr	r0, [r4, #0]
 800619a:	1821      	adds	r1, r4, r0
 800619c:	428b      	cmp	r3, r1
 800619e:	bf01      	itttt	eq
 80061a0:	6819      	ldreq	r1, [r3, #0]
 80061a2:	685b      	ldreq	r3, [r3, #4]
 80061a4:	1809      	addeq	r1, r1, r0
 80061a6:	6021      	streq	r1, [r4, #0]
 80061a8:	e7ed      	b.n	8006186 <_free_r+0x1e>
 80061aa:	461a      	mov	r2, r3
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	b10b      	cbz	r3, 80061b4 <_free_r+0x4c>
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	d9fa      	bls.n	80061aa <_free_r+0x42>
 80061b4:	6811      	ldr	r1, [r2, #0]
 80061b6:	1850      	adds	r0, r2, r1
 80061b8:	42a0      	cmp	r0, r4
 80061ba:	d10b      	bne.n	80061d4 <_free_r+0x6c>
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	4401      	add	r1, r0
 80061c0:	1850      	adds	r0, r2, r1
 80061c2:	4283      	cmp	r3, r0
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	d1e0      	bne.n	800618a <_free_r+0x22>
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4408      	add	r0, r1
 80061ce:	6010      	str	r0, [r2, #0]
 80061d0:	6053      	str	r3, [r2, #4]
 80061d2:	e7da      	b.n	800618a <_free_r+0x22>
 80061d4:	d902      	bls.n	80061dc <_free_r+0x74>
 80061d6:	230c      	movs	r3, #12
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	e7d6      	b.n	800618a <_free_r+0x22>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	1821      	adds	r1, r4, r0
 80061e0:	428b      	cmp	r3, r1
 80061e2:	bf01      	itttt	eq
 80061e4:	6819      	ldreq	r1, [r3, #0]
 80061e6:	685b      	ldreq	r3, [r3, #4]
 80061e8:	1809      	addeq	r1, r1, r0
 80061ea:	6021      	streq	r1, [r4, #0]
 80061ec:	6063      	str	r3, [r4, #4]
 80061ee:	6054      	str	r4, [r2, #4]
 80061f0:	e7cb      	b.n	800618a <_free_r+0x22>
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	200011dc 	.word	0x200011dc

080061f8 <__malloc_lock>:
 80061f8:	4801      	ldr	r0, [pc, #4]	@ (8006200 <__malloc_lock+0x8>)
 80061fa:	f7ff bfa5 	b.w	8006148 <__retarget_lock_acquire_recursive>
 80061fe:	bf00      	nop
 8006200:	200011d8 	.word	0x200011d8

08006204 <__malloc_unlock>:
 8006204:	4801      	ldr	r0, [pc, #4]	@ (800620c <__malloc_unlock+0x8>)
 8006206:	f7ff bfa0 	b.w	800614a <__retarget_lock_release_recursive>
 800620a:	bf00      	nop
 800620c:	200011d8 	.word	0x200011d8

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
