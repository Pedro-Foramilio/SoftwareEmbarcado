
proj_final_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005134  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005244  08005244  00006244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005314  08005314  00007084  2**0
                  CONTENTS
  4 .ARM          00000000  08005314  08005314  00007084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005314  08005314  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005314  08005314  00006314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005318  08005318  00006318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800531c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  20000084  080053a0  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011d4  080053a0  000071d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fd9  00000000  00000000  000070ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003396  00000000  00000000  0001a086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0001d420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea1  00000000  00000000  0001e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abe1  00000000  00000000  0001f591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160d4  00000000  00000000  0003a172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000980df  00000000  00000000  00050246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8325  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005034  00000000  00000000  000e8368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000ed39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	0800522c 	.word	0x0800522c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	0800522c 	.word	0x0800522c

08000150 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	4a06      	ldr	r2, [pc, #24]	@ (8000184 <vApplicationGetIdleTaskMemory+0x28>)
 800016c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800016e:	68bb      	ldr	r3, [r7, #8]
 8000170:	4a05      	ldr	r2, [pc, #20]	@ (8000188 <vApplicationGetIdleTaskMemory+0x2c>)
 8000172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	2240      	movs	r2, #64	@ 0x40
 8000178:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017a:	bf00      	nop
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	200000a0 	.word	0x200000a0
 8000188:	20000140 	.word	0x20000140

0800018c <conv_7_seg>:
argmento:  valHEX(valor hexadecimal) + kte TIPO_DISPLAY="0" anodo comum
A ordem dos bits no registrador de deslocamento e':
dp g f e d c b a 0 0 0 0 0 0 0 0  (fazer OR no retorno p/ ligar 1 dos displays)
OBS: esta rotina nao liga o DP   (ele deve ser ligado no retorno)
 ----------------------------------------------------------------------------*/
uint16_t conv_7_seg(int8_t valHEX) {
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
  uint16_t sseg = 0xFF00;              // inicializa MSByte da palavra com 0xFF
 8000196:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800019a:	81fb      	strh	r3, [r7, #14]
  switch(valHEX)                       // valores default p/ ANODO comum
 800019c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a0:	2b10      	cmp	r3, #16
 80001a2:	d869      	bhi.n	8000278 <conv_7_seg+0xec>
 80001a4:	a201      	add	r2, pc, #4	@ (adr r2, 80001ac <conv_7_seg+0x20>)
 80001a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001aa:	bf00      	nop
 80001ac:	080001f1 	.word	0x080001f1
 80001b0:	080001f9 	.word	0x080001f9
 80001b4:	08000201 	.word	0x08000201
 80001b8:	08000209 	.word	0x08000209
 80001bc:	08000211 	.word	0x08000211
 80001c0:	08000219 	.word	0x08000219
 80001c4:	08000221 	.word	0x08000221
 80001c8:	08000229 	.word	0x08000229
 80001cc:	08000231 	.word	0x08000231
 80001d0:	08000239 	.word	0x08000239
 80001d4:	08000241 	.word	0x08000241
 80001d8:	08000249 	.word	0x08000249
 80001dc:	08000251 	.word	0x08000251
 80001e0:	08000259 	.word	0x08000259
 80001e4:	08000261 	.word	0x08000261
 80001e8:	08000269 	.word	0x08000269
 80001ec:	08000271 	.word	0x08000271
  {
    case 0x0: {sseg = 0xC000; break;}  // retorna val p/ 0
 80001f0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80001f4:	81fb      	strh	r3, [r7, #14]
 80001f6:	e043      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x1: {sseg = 0xF900; break;}  // retorna val p/ 1
 80001f8:	f44f 4379 	mov.w	r3, #63744	@ 0xf900
 80001fc:	81fb      	strh	r3, [r7, #14]
 80001fe:	e03f      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x2: {sseg = 0xA400; break;}  // retorna val p/ 2
 8000200:	f44f 4324 	mov.w	r3, #41984	@ 0xa400
 8000204:	81fb      	strh	r3, [r7, #14]
 8000206:	e03b      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x3: {sseg = 0xB000; break;}  // retorna val p/ 3
 8000208:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800020c:	81fb      	strh	r3, [r7, #14]
 800020e:	e037      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x4: {sseg = 0x9900; break;}  // retorna val p/ 4
 8000210:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000214:	81fb      	strh	r3, [r7, #14]
 8000216:	e033      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x5: {sseg = 0x9200; break;}  // retorna val p/ 5
 8000218:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 800021c:	81fb      	strh	r3, [r7, #14]
 800021e:	e02f      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x6: {sseg = 0x8200; break;}  // retorna val p/ 6
 8000220:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8000224:	81fb      	strh	r3, [r7, #14]
 8000226:	e02b      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x7: {sseg = 0xF800; break;}  // retorna val p/ 7
 8000228:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800022c:	81fb      	strh	r3, [r7, #14]
 800022e:	e027      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x8: {sseg = 0x8000; break;}  // retorna val p/ 8
 8000230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000234:	81fb      	strh	r3, [r7, #14]
 8000236:	e023      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x9: {sseg = 0x9000; break;}  // retorna val p/ 9
 8000238:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800023c:	81fb      	strh	r3, [r7, #14]
 800023e:	e01f      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xA: {sseg = 0x8800; break;} // retorna val p/ A
 8000240:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8000244:	81fb      	strh	r3, [r7, #14]
 8000246:	e01b      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xB: {sseg = 0x8300; break;} // retorna val p/ B
 8000248:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
 800024c:	81fb      	strh	r3, [r7, #14]
 800024e:	e017      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xC: {sseg = 0xC600; break;} // retorna val p/ C
 8000250:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000254:	81fb      	strh	r3, [r7, #14]
 8000256:	e013      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xD: {sseg = 0xA100; break;} // retorna val p/ D
 8000258:	f44f 4321 	mov.w	r3, #41216	@ 0xa100
 800025c:	81fb      	strh	r3, [r7, #14]
 800025e:	e00f      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xE: {sseg = 0x8600; break;} // retorna val p/ E
 8000260:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8000264:	81fb      	strh	r3, [r7, #14]
 8000266:	e00b      	b.n	8000280 <conv_7_seg+0xf4>
    case 0xF: {sseg = 0x8E00; break;} // retorna val p/ F
 8000268:	f44f 430e 	mov.w	r3, #36352	@ 0x8e00
 800026c:	81fb      	strh	r3, [r7, #14]
 800026e:	e007      	b.n	8000280 <conv_7_seg+0xf4>
    case 0x10: {sseg = 0xFF00; break;} // default = tudo desligado
 8000270:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000274:	81fb      	strh	r3, [r7, #14]
 8000276:	e003      	b.n	8000280 <conv_7_seg+0xf4>
    default: {sseg = 0xBF00; break;} // ERRO retorna "-" (so' g ligado)
 8000278:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800027c:	81fb      	strh	r3, [r7, #14]
 800027e:	bf00      	nop
  }
  if (TIPO_DISPLAY == 0)             // 0 = ANODO COMUM sai como a tabela
    return sseg;
 8000280:	89fb      	ldrh	r3, [r7, #14]
  else                               // CATODO COMUM, inverte bits (bitwise)
    return ~sseg;
}
 8000282:	4618      	mov	r0, r3
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <serializar>:


// fn serializa dados de 'ser_data' p/ 74HC595 (shield multifuncao do Arduino)
// Baixa RCLK, envia 16 bits p/ SDATA e pulsa SCLK. Ao final, sobe RCLK
void serializar(uint16_t ser_data) {
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	80fb      	strh	r3, [r7, #6]
  GPIOB->ODR = GPIOB->ODR & ~(0x1 << 6);     // zera pino GPIOB_6
 8000296:	4b20      	ldr	r3, [pc, #128]	@ (8000318 <serializar+0x8c>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a1f      	ldr	r2, [pc, #124]	@ (8000318 <serializar+0x8c>)
 800029c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002a0:	60d3      	str	r3, [r2, #12]
  int stts = 15;                             // 1o. envia bit MSB 1o. = dp
 80002a2:	230f      	movs	r3, #15
 80002a4:	60fb      	str	r3, [r7, #12]
  do {                                       // repete enquanto stts >= 0
    if ((ser_data >> stts) & 1) {            // ser_data desloc >> ssts ='1'
 80002a6:	88fa      	ldrh	r2, [r7, #6]
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	fa42 f303 	asr.w	r3, r2, r3
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d006      	beq.n	80002c4 <serializar+0x38>
      GPIOB->ODR = GPIOB->ODR | (0x1 << 10); // liga GPIOB_10 (SDATA = 1)
 80002b6:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <serializar+0x8c>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a17      	ldr	r2, [pc, #92]	@ (8000318 <serializar+0x8c>)
 80002bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002c0:	60d3      	str	r3, [r2, #12]
 80002c2:	e005      	b.n	80002d0 <serializar+0x44>
    } else {
      GPIOB->ODR = GPIOB->ODR & ~(0x1 << 10);// desliga B10 (SDATA=0)
 80002c4:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <serializar+0x8c>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a13      	ldr	r2, [pc, #76]	@ (8000318 <serializar+0x8c>)
 80002ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002ce:	60d3      	str	r3, [r2, #12]
    }
    // ajustado o pino SDATA (acima), agora pulsa o clock SCLK
    GPIOB->ODR = GPIOB->ODR | (0x1 << 9);    // liga GPIOB_9
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <serializar+0x8c>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a10      	ldr	r2, [pc, #64]	@ (8000318 <serializar+0x8c>)
 80002d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002da:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR = GPIOB->ODR & ~(0x1 << 9);   // desliga B9
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <serializar+0x8c>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000318 <serializar+0x8c>)
 80002e2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80002e6:	60d3      	str	r3, [r2, #12]
    -- stts;                                 // dec stts p/ o novo bit
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	3b01      	subs	r3, #1
 80002ec:	60fb      	str	r3, [r7, #12]
  } while (stts >= 0);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	dad8      	bge.n	80002a6 <serializar+0x1a>
  // depois de serializar os 16 bits, gera RCK p/ paralelizar os dados
  GPIOB->ODR = GPIOB->ODR & ~(0x1 << 10);    // desliga B10
 80002f4:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <serializar+0x8c>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a07      	ldr	r2, [pc, #28]	@ (8000318 <serializar+0x8c>)
 80002fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002fe:	60d3      	str	r3, [r2, #12]
  GPIOB->ODR = GPIOB->ODR | (0x1 << 6);      // liga pino GPIOB_6
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <serializar+0x8c>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a04      	ldr	r2, [pc, #16]	@ (8000318 <serializar+0x8c>)
 8000306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800030a:	60d3      	str	r3, [r2, #12]
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40010c00 	.word	0x40010c00

0800031c <conv_num_ASC>:


// fn que converte um dos valores numericos em codigo ASCII
// faz critica do valor 'n' que tem que ser entre 0 e 9
uint8_t conv_num_ASC(int8_t n) {
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
  // testa se n esta' dentro da faixa numerica
  if ((n < 0) || (n > 9)) return 0x45; // sai cod ascii do 'E' (erro)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	2b00      	cmp	r3, #0
 800032c:	db03      	blt.n	8000336 <conv_num_ASC+0x1a>
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	2b09      	cmp	r3, #9
 8000334:	dd01      	ble.n	800033a <conv_num_ASC+0x1e>
 8000336:	2345      	movs	r3, #69	@ 0x45
 8000338:	e002      	b.n	8000340 <conv_num_ASC+0x24>
  else return (0x00 | (n + 0x30));     // uint8_t <= sai cod ascii
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	3330      	adds	r3, #48	@ 0x30
 800033e:	b2db      	uxtb	r3, r3
}
 8000340:	4618      	mov	r0, r3
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr

0800034a <conv_ASC_num>:


// fn que converte ASCII de um numero em valor decimal
// faz critica de cados, o caractere 'c' tem que estar entre 0x30 e 0x39
int8_t conv_ASC_num(uint8_t c) {
 800034a:	b480      	push	{r7}
 800034c:	b083      	sub	sp, #12
 800034e:	af00      	add	r7, sp, #0
 8000350:	4603      	mov	r3, r0
 8000352:	71fb      	strb	r3, [r7, #7]
  // testa se esta' fora da faixa numerica
  if ((c < 0x30) || (c > 0x39)) return 0x45;  // cod ascii do 'E' (erro)
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	2b2f      	cmp	r3, #47	@ 0x2f
 8000358:	d902      	bls.n	8000360 <conv_ASC_num+0x16>
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b39      	cmp	r3, #57	@ 0x39
 800035e:	d901      	bls.n	8000364 <conv_ASC_num+0x1a>
 8000360:	2345      	movs	r3, #69	@ 0x45
 8000362:	e003      	b.n	800036c <conv_ASC_num+0x22>
  else return (c - 0x30);              // int8_t <= sai valor numerico
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	3b30      	subs	r3, #48	@ 0x30
 8000368:	b2db      	uxtb	r3, r3
 800036a:	b25b      	sxtb	r3, r3
}
 800036c:	4618      	mov	r0, r3
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
	...

08000378 <mostrar_no_display>:


// fn que faz a varredura e mostra no display os dados do vetor Dsp[]
// ajuste o vetor D[] e var pto e chame essa funcao
// chame essa funcao pelo menos 30 x 4displays = 120 vezes por segundo
void mostrar_no_display(int8_t D[], uint8_t pto) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	70fb      	strb	r3, [r7, #3]
  // var de estado que controla a varredura (qual display é mostrado)
  static enum {DIG_MIL, DIG_CEN, DIG_DEZ, DIG_UNI} sttVARRE=DIG_UNI;
  uint16_t ser_data;                   // dado a ser serializado
  uint16_t val7seg;                    // dado com quais segmts ligam
  switch(sttVARRE)                     // escolher qual DIG vai varrer
 8000384:	4b5b      	ldr	r3, [pc, #364]	@ (80004f4 <mostrar_no_display+0x17c>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b03      	cmp	r3, #3
 800038a:	f200 80a6 	bhi.w	80004da <mostrar_no_display+0x162>
 800038e:	a201      	add	r2, pc, #4	@ (adr r2, 8000394 <mostrar_no_display+0x1c>)
 8000390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000394:	0800048d 	.word	0x0800048d
 8000398:	08000437 	.word	0x08000437
 800039c:	080003d5 	.word	0x080003d5
 80003a0:	080003a5 	.word	0x080003a5
  {
    case DIG_UNI: {                    // unidade (digito menos significante LSD)
      sttVARRE = DIG_DEZ;              // prox digito = DEZENA
 80003a4:	4b53      	ldr	r3, [pc, #332]	@ (80004f4 <mostrar_no_display+0x17c>)
 80003a6:	2202      	movs	r2, #2
 80003a8:	701a      	strb	r2, [r3, #0]
      ser_data = 0x0008;               // display #1 (LSD = 0x0008 no shield)
 80003aa:	2308      	movs	r3, #8
 80003ac:	81fb      	strh	r3, [r7, #14]
      val7seg = conv_7_seg(D[0]);      // conv dsp1_hex para 7-seg
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f993 3000 	ldrsb.w	r3, [r3]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff fee9 	bl	800018c <conv_7_seg>
 80003ba:	4603      	mov	r3, r0
 80003bc:	81bb      	strh	r3, [r7, #12]
      if (pto & 0x1) val7seg &= 0x7FFF;    // liga o ponto decimal
 80003be:	78fb      	ldrb	r3, [r7, #3]
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	f000 8085 	beq.w	80004d4 <mostrar_no_display+0x15c>
 80003ca:	89bb      	ldrh	r3, [r7, #12]
 80003cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003d0:	81bb      	strh	r3, [r7, #12]
      break;
 80003d2:	e07f      	b.n	80004d4 <mostrar_no_display+0x15c>
    }
    case DIG_DEZ: {                    // dezena (2o. digito dir <- esq)
      sttVARRE = DIG_CEN;              // ajusta p/ prox digito = CENTENA
 80003d4:	4b47      	ldr	r3, [pc, #284]	@ (80004f4 <mostrar_no_display+0x17c>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
      ser_data = 0x00004;              // bit p/ ativar display #2
 80003da:	2304      	movs	r3, #4
 80003dc:	81fb      	strh	r3, [r7, #14]
      if(D[3]>0 || D[2]>0 || D[1]>0) { // se D3 ou D2 > 0; ou D[1] != 0
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3303      	adds	r3, #3
 80003e2:	f993 3000 	ldrsb.w	r3, [r3]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	dc0b      	bgt.n	8000402 <mostrar_no_display+0x8a>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3302      	adds	r3, #2
 80003ee:	f993 3000 	ldrsb.w	r3, [r3]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	dc05      	bgt.n	8000402 <mostrar_no_display+0x8a>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	3301      	adds	r3, #1
 80003fa:	f993 3000 	ldrsb.w	r3, [r3]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	dd12      	ble.n	8000428 <mostrar_no_display+0xb0>
        val7seg = conv_7_seg(D[1]);    // converte 7-seg
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	3301      	adds	r3, #1
 8000406:	f993 3000 	ldrsb.w	r3, [r3]
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff febe 	bl	800018c <conv_7_seg>
 8000410:	4603      	mov	r3, r0
 8000412:	81bb      	strh	r3, [r7, #12]
        if (pto & 0x2) val7seg &= 0x7FFF;  // liga o ponto decimal
 8000414:	78fb      	ldrb	r3, [r7, #3]
 8000416:	f003 0302 	and.w	r3, r3, #2
 800041a:	2b00      	cmp	r3, #0
 800041c:	d00a      	beq.n	8000434 <mostrar_no_display+0xbc>
 800041e:	89bb      	ldrh	r3, [r7, #12]
 8000420:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000424:	81bb      	strh	r3, [r7, #12]
 8000426:	e005      	b.n	8000434 <mostrar_no_display+0xbc>
      } else {
        val7seg = conv_7_seg(DIG_APAGADO); // se D3,D2,D1=0 apaga esse
 8000428:	2010      	movs	r0, #16
 800042a:	f7ff feaf 	bl	800018c <conv_7_seg>
 800042e:	4603      	mov	r3, r0
 8000430:	81bb      	strh	r3, [r7, #12]
      }
      break;
 8000432:	e052      	b.n	80004da <mostrar_no_display+0x162>
 8000434:	e051      	b.n	80004da <mostrar_no_display+0x162>
    }
    case DIG_CEN: {                    // centena (3o. digito dir <- esq)
      sttVARRE = DIG_MIL;              // ajusta p/ prox digito = MILHAR
 8000436:	4b2f      	ldr	r3, [pc, #188]	@ (80004f4 <mostrar_no_display+0x17c>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
      ser_data = 0x0002;               // bit p/ ativar display #3
 800043c:	2302      	movs	r3, #2
 800043e:	81fb      	strh	r3, [r7, #14]
      if(D[3]>0 || D[2]>0) {           // se D3>0 ou D2>0
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3303      	adds	r3, #3
 8000444:	f993 3000 	ldrsb.w	r3, [r3]
 8000448:	2b00      	cmp	r3, #0
 800044a:	dc05      	bgt.n	8000458 <mostrar_no_display+0xe0>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3302      	adds	r3, #2
 8000450:	f993 3000 	ldrsb.w	r3, [r3]
 8000454:	2b00      	cmp	r3, #0
 8000456:	dd12      	ble.n	800047e <mostrar_no_display+0x106>
        val7seg = conv_7_seg(D[2]);    // converte 7-seg
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3302      	adds	r3, #2
 800045c:	f993 3000 	ldrsb.w	r3, [r3]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fe93 	bl	800018c <conv_7_seg>
 8000466:	4603      	mov	r3, r0
 8000468:	81bb      	strh	r3, [r7, #12]
        if (pto & 0x4) val7seg &=0x7FFF;   // liga o ponto decimal
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	2b00      	cmp	r3, #0
 8000472:	d00a      	beq.n	800048a <mostrar_no_display+0x112>
 8000474:	89bb      	ldrh	r3, [r7, #12]
 8000476:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800047a:	81bb      	strh	r3, [r7, #12]
 800047c:	e005      	b.n	800048a <mostrar_no_display+0x112>
      } else {
        val7seg = conv_7_seg(DIG_APAGADO); // se D3 e D2=0 apaga esse
 800047e:	2010      	movs	r0, #16
 8000480:	f7ff fe84 	bl	800018c <conv_7_seg>
 8000484:	4603      	mov	r3, r0
 8000486:	81bb      	strh	r3, [r7, #12]
      }
      break;
 8000488:	e027      	b.n	80004da <mostrar_no_display+0x162>
 800048a:	e026      	b.n	80004da <mostrar_no_display+0x162>
    }
    case DIG_MIL: {                    // milhar (MSD em 4 digitos)
      sttVARRE = DIG_UNI;              // ajusta p/ prox digito = UNIDADE
 800048c:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <mostrar_no_display+0x17c>)
 800048e:	2203      	movs	r2, #3
 8000490:	701a      	strb	r2, [r3, #0]
      ser_data = 0x0001;               // bit p/ ativar display #4
 8000492:	2301      	movs	r3, #1
 8000494:	81fb      	strh	r3, [r7, #14]
      if(D[3]>0) {                     // se D3 != 0
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3303      	adds	r3, #3
 800049a:	f993 3000 	ldrsb.w	r3, [r3]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	dd12      	ble.n	80004c8 <mostrar_no_display+0x150>
        val7seg = conv_7_seg(D[3]);    // converte 7-seg
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	3303      	adds	r3, #3
 80004a6:	f993 3000 	ldrsb.w	r3, [r3]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fe6e 	bl	800018c <conv_7_seg>
 80004b0:	4603      	mov	r3, r0
 80004b2:	81bb      	strh	r3, [r7, #12]
        if (pto & 0x8) val7seg &=0x7FFF;   // liga o ponto decimal
 80004b4:	78fb      	ldrb	r3, [r7, #3]
 80004b6:	f003 0308 	and.w	r3, r3, #8
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d00c      	beq.n	80004d8 <mostrar_no_display+0x160>
 80004be:	89bb      	ldrh	r3, [r7, #12]
 80004c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004c4:	81bb      	strh	r3, [r7, #12]
      } else {
        val7seg = conv_7_seg(DIG_APAGADO); // se D3=0 apagar esse
      }
      break;
 80004c6:	e007      	b.n	80004d8 <mostrar_no_display+0x160>
        val7seg = conv_7_seg(DIG_APAGADO); // se D3=0 apagar esse
 80004c8:	2010      	movs	r0, #16
 80004ca:	f7ff fe5f 	bl	800018c <conv_7_seg>
 80004ce:	4603      	mov	r3, r0
 80004d0:	81bb      	strh	r3, [r7, #12]
      break;
 80004d2:	e001      	b.n	80004d8 <mostrar_no_display+0x160>
      break;
 80004d4:	bf00      	nop
 80004d6:	e000      	b.n	80004da <mostrar_no_display+0x162>
      break;
 80004d8:	bf00      	nop
    }
  }  // fim case
  ser_data |= val7seg;                 // OR com val7seg = dado a serializar
 80004da:	89fa      	ldrh	r2, [r7, #14]
 80004dc:	89bb      	ldrh	r3, [r7, #12]
 80004de:	4313      	orrs	r3, r2
 80004e0:	81fb      	strh	r3, [r7, #14]
  serializar(ser_data);                // serializa dado p/74HC595 (shift reg)
 80004e2:	89fb      	ldrh	r3, [r7, #14]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff fed1 	bl	800028c <serializar>
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000000 	.word	0x20000000

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b5b0      	push	{r4, r5, r7, lr}
 80004fa:	b09c      	sub	sp, #112	@ 0x70
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f001 f81b 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f873 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f961 	bl	80007cc <MX_GPIO_Init>
  MX_ADC1_Init();
 800050a:	f000 f8f7 	bl	80006fc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800050e:	f000 f933 	bl	8000778 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000512:	f000 f8c6 	bl	80006a2 <MX_NVIC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 8000516:	4b2a      	ldr	r3, [pc, #168]	@ (80005c0 <main+0xc8>)
 8000518:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800052a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f003 fba5 	bl	8003c80 <osThreadCreate>
 8000536:	4603      	mov	r3, r0
 8000538:	4a22      	ldr	r2, [pc, #136]	@ (80005c4 <main+0xcc>)
 800053a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_MngLED */
  osThreadDef(Task_MngLED, fnTask_MngLED, osPriorityIdle, 0, 64);
 800053c:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <main+0xd0>)
 800053e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_MngLEDHandle = osThreadCreate(osThread(Task_MngLED), NULL);
 8000550:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fb92 	bl	8003c80 <osThreadCreate>
 800055c:	4603      	mov	r3, r0
 800055e:	4a1b      	ldr	r2, [pc, #108]	@ (80005cc <main+0xd4>)
 8000560:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDisplay */
  osThreadDef(TaskDisplay, fn_TaskDisplay, osPriorityIdle, 0, 64);
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <main+0xd8>)
 8000564:	f107 041c 	add.w	r4, r7, #28
 8000568:	461d      	mov	r5, r3
 800056a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDisplayHandle = osThreadCreate(osThread(TaskDisplay), NULL);
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fb7f 	bl	8003c80 <osThreadCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a13      	ldr	r2, [pc, #76]	@ (80005d4 <main+0xdc>)
 8000586:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Varrer */
  osThreadDef(Task_Varrer, fn_Task_Varrer, osPriorityIdle, 0, 64);
 8000588:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <main+0xe0>)
 800058a:	463c      	mov	r4, r7
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_VarrerHandle = osThreadCreate(osThread(Task_Varrer), NULL);
 800059a:	463b      	mov	r3, r7
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 fb6e 	bl	8003c80 <osThreadCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a0d      	ldr	r2, [pc, #52]	@ (80005dc <main+0xe4>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005aa:	f003 fb62 	bl	8003c72 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
        // ATENÇÃO: como aqui nunca vai chegar mesmo!
        // exemplo de comandO para ENVIAR o buffer BufOUT pela UART1
        HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <main+0xe8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	490b      	ldr	r1, [pc, #44]	@ (80005e4 <main+0xec>)
 80005b8:	480b      	ldr	r0, [pc, #44]	@ (80005e8 <main+0xf0>)
 80005ba:	f002 fef0 	bl	800339e <HAL_UART_Transmit_IT>
 80005be:	e7f6      	b.n	80005ae <main+0xb6>
 80005c0:	08005250 	.word	0x08005250
 80005c4:	200002b4 	.word	0x200002b4
 80005c8:	08005278 	.word	0x08005278
 80005cc:	200002b8 	.word	0x200002b8
 80005d0:	080052a0 	.word	0x080052a0
 80005d4:	200002bc 	.word	0x200002bc
 80005d8:	080052c8 	.word	0x080052c8
 80005dc:	200002c0 	.word	0x200002c0
 80005e0:	20000018 	.word	0x20000018
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20000270 	.word	0x20000270

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005f6:	2228      	movs	r2, #40	@ 0x28
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 fd3e 	bl	800507c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000638:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800063c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000642:	4618      	mov	r0, r3
 8000644:	f001 ff14 	bl	8002470 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800064e:	f000 fd2f 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000662:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f980 	bl	8002974 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800067a:	f000 fd19 	bl	80010b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800067e:	2302      	movs	r3, #2
 8000680:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000686:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fb3a 	bl	8002d04 <HAL_RCCEx_PeriphCLKConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000696:	f000 fd0b 	bl	80010b0 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2105      	movs	r1, #5
 80006aa:	2009      	movs	r0, #9
 80006ac:	f001 fc2d 	bl	8001f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006b0:	2009      	movs	r0, #9
 80006b2:	f001 fc46 	bl	8001f42 <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2105      	movs	r1, #5
 80006ba:	2008      	movs	r0, #8
 80006bc:	f001 fc25 	bl	8001f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80006c0:	2008      	movs	r0, #8
 80006c2:	f001 fc3e 	bl	8001f42 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2105      	movs	r1, #5
 80006ca:	2007      	movs	r0, #7
 80006cc:	f001 fc1d 	bl	8001f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006d0:	2007      	movs	r0, #7
 80006d2:	f001 fc36 	bl	8001f42 <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2105      	movs	r1, #5
 80006da:	2012      	movs	r0, #18
 80006dc:	f001 fc15 	bl	8001f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006e0:	2012      	movs	r0, #18
 80006e2:	f001 fc2e 	bl	8001f42 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2105      	movs	r1, #5
 80006ea:	2025      	movs	r0, #37	@ 0x25
 80006ec:	f001 fc0d 	bl	8001f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006f0:	2025      	movs	r0, #37	@ 0x25
 80006f2:	f001 fc26 	bl	8001f42 <HAL_NVIC_EnableIRQ>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800070c:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_ADC1_Init+0x74>)
 800070e:	4a19      	ldr	r2, [pc, #100]	@ (8000774 <MX_ADC1_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_ADC1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000718:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_ADC1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071e:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_ADC1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_ADC1_Init+0x74>)
 8000726:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800072a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_ADC1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_ADC1_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000738:	480d      	ldr	r0, [pc, #52]	@ (8000770 <MX_ADC1_Init+0x74>)
 800073a:	f000 ff2f 	bl	800159c <HAL_ADC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 fcb4 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074c:	2301      	movs	r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_ADC1_Init+0x74>)
 800075a:	f001 f985 	bl	8001a68 <HAL_ADC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000764:	f000 fca4 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000240 	.word	0x20000240
 8000774:	40012400 	.word	0x40012400

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <MX_USART1_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007b0:	f002 fda8 	bl	8003304 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 fc79 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000270 	.word	0x20000270
 80007c8:	40013800 	.word	0x40013800

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e0:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <MX_GPIO_Init+0xb4>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a26      	ldr	r2, [pc, #152]	@ (8000880 <MX_GPIO_Init+0xb4>)
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_GPIO_Init+0xb4>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_GPIO_Init+0xb4>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a20      	ldr	r2, [pc, #128]	@ (8000880 <MX_GPIO_Init+0xb4>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_GPIO_Init+0xb4>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_GPIO_Init+0xb4>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a1a      	ldr	r2, [pc, #104]	@ (8000880 <MX_GPIO_Init+0xb4>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_GPIO_Init+0xb4>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800082e:	4815      	ldr	r0, [pc, #84]	@ (8000884 <MX_GPIO_Init+0xb8>)
 8000830:	f001 fdca 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800083a:	4812      	ldr	r0, [pc, #72]	@ (8000884 <MX_GPIO_Init+0xb8>)
 800083c:	f001 fdc4 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000840:	230e      	movs	r3, #14
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000844:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_GPIO_Init+0xbc>)
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4619      	mov	r1, r3
 8000852:	480e      	ldr	r0, [pc, #56]	@ (800088c <MX_GPIO_Init+0xc0>)
 8000854:	f001 fc34 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000858:	f24f 6340 	movw	r3, #63040	@ 0xf640
 800085c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2302      	movs	r3, #2
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_GPIO_Init+0xb8>)
 8000872:	f001 fc25 	bl	80020c0 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	40010c00 	.word	0x40010c00
 8000888:	10210000 	.word	0x10210000
 800088c:	40010800 	.word	0x40010800

08000890 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// fn que atende ao callback da ISR do conversor ADC1
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint16_t val_adc = 0;                // define var para ler ADC
 8000898:	2300      	movs	r3, #0
 800089a:	83fb      	strh	r3, [r7, #30]
  if(hadc->Instance == ADC1) {         // se veio ADC1
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a31      	ldr	r2, [pc, #196]	@ (8000968 <HAL_ADC_ConvCpltCallback+0xd8>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d15c      	bne.n	8000960 <HAL_ADC_ConvCpltCallback+0xd0>
    val_adc = HAL_ADC_GetValue(&hadc1);// capta valor adc
 80008a6:	4831      	ldr	r0, [pc, #196]	@ (800096c <HAL_ADC_ConvCpltCallback+0xdc>)
 80008a8:	f001 f806 	bl	80018b8 <HAL_ADC_GetValue>
 80008ac:	4603      	mov	r3, r0
 80008ae:	83fb      	strh	r3, [r7, #30]
    // converter o valor lido em valores hexa p/ display
    int miliVolt = val_adc*3300/4095;
 80008b0:	8bfb      	ldrh	r3, [r7, #30]
 80008b2:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80008b6:	fb02 f303 	mul.w	r3, r2, r3
 80008ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000970 <HAL_ADC_ConvCpltCallback+0xe0>)
 80008bc:	fb82 1203 	smull	r1, r2, r2, r3
 80008c0:	441a      	add	r2, r3
 80008c2:	12d2      	asrs	r2, r2, #11
 80008c4:	17db      	asrs	r3, r3, #31
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	61bb      	str	r3, [r7, #24]
    int uniADC = miliVolt/1000;
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	4a29      	ldr	r2, [pc, #164]	@ (8000974 <HAL_ADC_ConvCpltCallback+0xe4>)
 80008ce:	fb82 1203 	smull	r1, r2, r2, r3
 80008d2:	1192      	asrs	r2, r2, #6
 80008d4:	17db      	asrs	r3, r3, #31
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	617b      	str	r3, [r7, #20]
    int decADC = (miliVolt-(uniADC*1000))/100;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	4a26      	ldr	r2, [pc, #152]	@ (8000978 <HAL_ADC_ConvCpltCallback+0xe8>)
 80008de:	fb03 f202 	mul.w	r2, r3, r2
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_ConvCpltCallback+0xec>)
 80008e8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ec:	1152      	asrs	r2, r2, #5
 80008ee:	17db      	asrs	r3, r3, #31
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	613b      	str	r3, [r7, #16]
    int cnsADC = (miliVolt-(uniADC*1000)-(decADC*100))/10;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	4a20      	ldr	r2, [pc, #128]	@ (8000978 <HAL_ADC_ConvCpltCallback+0xe8>)
 80008f8:	fb03 f202 	mul.w	r2, r3, r2
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	441a      	add	r2, r3
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8000906:	fb01 f303 	mul.w	r3, r1, r3
 800090a:	4413      	add	r3, r2
 800090c:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_ConvCpltCallback+0xf0>)
 800090e:	fb82 1203 	smull	r1, r2, r2, r3
 8000912:	1092      	asrs	r2, r2, #2
 8000914:	17db      	asrs	r3, r3, #31
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	60fb      	str	r3, [r7, #12]
    int mlsADC = miliVolt-(uniADC*1000)-(decADC*100)-(cnsADC*10);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	4a16      	ldr	r2, [pc, #88]	@ (8000978 <HAL_ADC_ConvCpltCallback+0xe8>)
 800091e:	fb03 f202 	mul.w	r2, r3, r2
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	441a      	add	r2, r3
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 800092c:	fb01 f303 	mul.w	r3, r1, r3
 8000930:	441a      	add	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f06f 0109 	mvn.w	r1, #9
 8000938:	fb01 f303 	mul.w	r3, r1, r3
 800093c:	4413      	add	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
    ValAdc[3] = uniADC;         // dig mais significativo
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	b25a      	sxtb	r2, r3
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000946:	70da      	strb	r2, [r3, #3]
    ValAdc[2] = decADC;
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	b25a      	sxtb	r2, r3
 800094c:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_ADC_ConvCpltCallback+0xf4>)
 800094e:	709a      	strb	r2, [r3, #2]
    ValAdc[1] = cnsADC;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	b25a      	sxtb	r2, r3
 8000954:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000956:	705a      	strb	r2, [r3, #1]
    ValAdc[0] = mlsADC;
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	b25a      	sxtb	r2, r3
 800095c:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_ADC_ConvCpltCallback+0xf4>)
 800095e:	701a      	strb	r2, [r3, #0]
  }
}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40012400 	.word	0x40012400
 800096c:	20000240 	.word	0x20000240
 8000970:	80080081 	.word	0x80080081
 8000974:	10624dd3 	.word	0x10624dd3
 8000978:	fffffc18 	.word	0xfffffc18
 800097c:	51eb851f 	.word	0x51eb851f
 8000980:	66666667 	.word	0x66666667
 8000984:	200002c8 	.word	0x200002c8

08000988 <HAL_UART_RxCpltCallback>:


// fn que atende ao callback da ISR quando RECEBE dado pela UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  // o que veio na UART? aqui vc vai fazer testes p/ identificar mensagens

	__disable_irq();                   // desabilita IRQs

  // exemplo: se veio um valor iniciado com 'aXXXX", veio o valor do ADC
	if (BufIN[0] == 's')
 8000994:	4b80      	ldr	r3, [pc, #512]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b73      	cmp	r3, #115	@ 0x73
 800099a:	d116      	bne.n	80009ca <HAL_UART_RxCpltCallback+0x42>
	{
		HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009a2:	487e      	ldr	r0, [pc, #504]	@ (8000b9c <HAL_UART_RxCpltCallback+0x214>)
 80009a4:	f001 fd10 	bl	80023c8 <HAL_GPIO_WritePin>
		modoDisplay = DISPLAY_EXTRN;
 80009a8:	4b7d      	ldr	r3, [pc, #500]	@ (8000ba0 <HAL_UART_RxCpltCallback+0x218>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
		recebendoDados = 1;
 80009ae:	4b7d      	ldr	r3, [pc, #500]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x21c>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
		if (A1_foi_apertado == 0)
 80009b4:	4b7c      	ldr	r3, [pc, #496]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x220>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d103      	bne.n	80009c4 <HAL_UART_RxCpltCallback+0x3c>
		{
			modoLed = WFI;
 80009bc:	4b7b      	ldr	r3, [pc, #492]	@ (8000bac <HAL_UART_RxCpltCallback+0x224>)
 80009be:	2205      	movs	r2, #5
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e002      	b.n	80009ca <HAL_UART_RxCpltCallback+0x42>
		}
		else
		{
			//setup modo 2s 4 valores
			modoLed = LED_CRON_EXT;
 80009c4:	4b79      	ldr	r3, [pc, #484]	@ (8000bac <HAL_UART_RxCpltCallback+0x224>)
 80009c6:	2203      	movs	r2, #3
 80009c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (BufIN[0] == 'n')
 80009ca:	4b73      	ldr	r3, [pc, #460]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b6e      	cmp	r3, #110	@ 0x6e
 80009d0:	d116      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x78>
	{
		modoDisplay = DISPLAY_INTRN;
 80009d2:	4b73      	ldr	r3, [pc, #460]	@ (8000ba0 <HAL_UART_RxCpltCallback+0x218>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009de:	486f      	ldr	r0, [pc, #444]	@ (8000b9c <HAL_UART_RxCpltCallback+0x214>)
 80009e0:	f001 fcf2 	bl	80023c8 <HAL_GPIO_WritePin>
		recebendoDados = 0;
 80009e4:	4b6f      	ldr	r3, [pc, #444]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x21c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
		if (A1_foi_apertado == 0)
 80009ea:	4b6f      	ldr	r3, [pc, #444]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x220>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d103      	bne.n	80009fa <HAL_UART_RxCpltCallback+0x72>
		{
			modoLed = WFI;
 80009f2:	4b6e      	ldr	r3, [pc, #440]	@ (8000bac <HAL_UART_RxCpltCallback+0x224>)
 80009f4:	2205      	movs	r2, #5
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	e002      	b.n	8000a00 <HAL_UART_RxCpltCallback+0x78>
		}
		else
		{
			modoLed = LED_CRON;
 80009fa:	4b6c      	ldr	r3, [pc, #432]	@ (8000bac <HAL_UART_RxCpltCallback+0x224>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
		}

	}

	if (BufIN[0]=='A')
 8000a00:	4b65      	ldr	r3, [pc, #404]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b41      	cmp	r3, #65	@ 0x41
 8000a06:	d123      	bne.n	8000a50 <HAL_UART_RxCpltCallback+0xc8>
	{

		ValAdcExt[0] = conv_ASC_num(BufIN[1]);
 8000a08:	4b63      	ldr	r3, [pc, #396]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000a0a:	785b      	ldrb	r3, [r3, #1]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fc9c 	bl	800034a <conv_ASC_num>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b66      	ldr	r3, [pc, #408]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x228>)
 8000a18:	701a      	strb	r2, [r3, #0]
		ValAdcExt[1] = conv_ASC_num(BufIN[2]);
 8000a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000a1c:	789b      	ldrb	r3, [r3, #2]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fc93 	bl	800034a <conv_ASC_num>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b61      	ldr	r3, [pc, #388]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x228>)
 8000a2a:	705a      	strb	r2, [r3, #1]
		ValAdcExt[2] = conv_ASC_num(BufIN[3]);
 8000a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000a2e:	78db      	ldrb	r3, [r3, #3]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fc8a 	bl	800034a <conv_ASC_num>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x228>)
 8000a3c:	709a      	strb	r2, [r3, #2]
		ValAdcExt[3] = conv_ASC_num(BufIN[4]);
 8000a3e:	4b56      	ldr	r3, [pc, #344]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fc81 	bl	800034a <conv_ASC_num>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b58      	ldr	r3, [pc, #352]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x228>)
 8000a4e:	70da      	strb	r2, [r3, #3]


	}

	if (BufIN[0]=='T')
 8000a50:	4b51      	ldr	r3, [pc, #324]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b54      	cmp	r3, #84	@ 0x54
 8000a56:	d123      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x118>
	{
		CronoExt[0] = conv_ASC_num(BufIN[1]);
 8000a58:	4b4f      	ldr	r3, [pc, #316]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fc74 	bl	800034a <conv_ASC_num>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b53      	ldr	r3, [pc, #332]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x22c>)
 8000a68:	701a      	strb	r2, [r3, #0]
		CronoExt[1] = conv_ASC_num(BufIN[2]);
 8000a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000a6c:	789b      	ldrb	r3, [r3, #2]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fc6b 	bl	800034a <conv_ASC_num>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x22c>)
 8000a7a:	705a      	strb	r2, [r3, #1]
		CronoExt[2] = conv_ASC_num(BufIN[3]);
 8000a7c:	4b46      	ldr	r3, [pc, #280]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000a7e:	78db      	ldrb	r3, [r3, #3]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fc62 	bl	800034a <conv_ASC_num>
 8000a86:	4603      	mov	r3, r0
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x22c>)
 8000a8c:	709a      	strb	r2, [r3, #2]
		CronoExt[3] = conv_ASC_num(BufIN[4]);
 8000a8e:	4b42      	ldr	r3, [pc, #264]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000a90:	791b      	ldrb	r3, [r3, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fc59 	bl	800034a <conv_ASC_num>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b45      	ldr	r3, [pc, #276]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x22c>)
 8000a9e:	70da      	strb	r2, [r3, #3]

	}

	if (BufIN[0] == 't')
 8000aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b74      	cmp	r3, #116	@ 0x74
 8000aa6:	d132      	bne.n	8000b0e <HAL_UART_RxCpltCallback+0x186>
	{
		BufOUT[0] = 'T';
 8000aa8:	4b43      	ldr	r3, [pc, #268]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000aaa:	2254      	movs	r2, #84	@ 0x54
 8000aac:	701a      	strb	r2, [r3, #0]
		BufOUT[1] = conv_num_ASC(Crono[0]);
 8000aae:	4b43      	ldr	r3, [pc, #268]	@ (8000bbc <HAL_UART_RxCpltCallback+0x234>)
 8000ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fc31 	bl	800031c <conv_num_ASC>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000ac0:	705a      	strb	r2, [r3, #1]
		BufOUT[2] = conv_num_ASC(Crono[1]);
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bbc <HAL_UART_RxCpltCallback+0x234>)
 8000ac4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fc27 	bl	800031c <conv_num_ASC>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b39      	ldr	r3, [pc, #228]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000ad4:	709a      	strb	r2, [r3, #2]
		BufOUT[3] = conv_num_ASC(Crono[2]);
 8000ad6:	4b39      	ldr	r3, [pc, #228]	@ (8000bbc <HAL_UART_RxCpltCallback+0x234>)
 8000ad8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fc1d 	bl	800031c <conv_num_ASC>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b34      	ldr	r3, [pc, #208]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000ae8:	70da      	strb	r2, [r3, #3]
		BufOUT[4] = conv_num_ASC(Crono[3]);
 8000aea:	4b34      	ldr	r3, [pc, #208]	@ (8000bbc <HAL_UART_RxCpltCallback+0x234>)
 8000aec:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fc13 	bl	800031c <conv_num_ASC>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000afc:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
 8000afe:	4b30      	ldr	r3, [pc, #192]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x238>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	492c      	ldr	r1, [pc, #176]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000b08:	482e      	ldr	r0, [pc, #184]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x23c>)
 8000b0a:	f002 fc48 	bl	800339e <HAL_UART_Transmit_IT>
	}

	if (BufIN[0] == 'a')
 8000b0e:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b61      	cmp	r3, #97	@ 0x61
 8000b14:	d132      	bne.n	8000b7c <HAL_UART_RxCpltCallback+0x1f4>
	{
		BufOUT[0] = 'A';
 8000b16:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000b18:	2241      	movs	r2, #65	@ 0x41
 8000b1a:	701a      	strb	r2, [r3, #0]
		BufOUT[1] = conv_num_ASC(ValAdc[0]);
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x240>)
 8000b1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fbfa 	bl	800031c <conv_num_ASC>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000b2e:	705a      	strb	r2, [r3, #1]
		BufOUT[2] = conv_num_ASC(ValAdc[1]);
 8000b30:	4b25      	ldr	r3, [pc, #148]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x240>)
 8000b32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fbf0 	bl	800031c <conv_num_ASC>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000b42:	709a      	strb	r2, [r3, #2]
		BufOUT[3] = conv_num_ASC(ValAdc[2]);
 8000b44:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x240>)
 8000b46:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fbe6 	bl	800031c <conv_num_ASC>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000b56:	70da      	strb	r2, [r3, #3]
		BufOUT[4] = conv_num_ASC(ValAdc[3]);
 8000b58:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x240>)
 8000b5a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fbdc 	bl	800031c <conv_num_ASC>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000b6a:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x238>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	4910      	ldr	r1, [pc, #64]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x230>)
 8000b76:	4813      	ldr	r0, [pc, #76]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x23c>)
 8000b78:	f002 fc11 	bl	800339e <HAL_UART_Transmit_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b7c:	b662      	cpsie	i
}
 8000b7e:	bf00      	nop

  	  __enable_irq();                      // volta habilitar IRQs

  // como precisa escutar a UART continuamente, reativar RECEPÇÃO via irq
  //TODO: disprar pela primeira vez em algum lugar
  	  HAL_UART_Receive_IT(&huart1, BufIN, sizeBuffs);
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x238>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	461a      	mov	r2, r3
 8000b88:	4903      	ldr	r1, [pc, #12]	@ (8000b98 <HAL_UART_RxCpltCallback+0x210>)
 8000b8a:	480e      	ldr	r0, [pc, #56]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x23c>)
 8000b8c:	f002 fc4b 	bl	8003426 <HAL_UART_Receive_IT>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000000c 	.word	0x2000000c
 8000b9c:	40010c00 	.word	0x40010c00
 8000ba0:	200002dc 	.word	0x200002dc
 8000ba4:	200002dd 	.word	0x200002dd
 8000ba8:	200002ec 	.word	0x200002ec
 8000bac:	2000001c 	.word	0x2000001c
 8000bb0:	200002d0 	.word	0x200002d0
 8000bb4:	200002cc 	.word	0x200002cc
 8000bb8:	20000004 	.word	0x20000004
 8000bbc:	200002c4 	.word	0x200002c4
 8000bc0:	20000018 	.word	0x20000018
 8000bc4:	20000270 	.word	0x20000270
 8000bc8:	200002c8 	.word	0x200002c8

08000bcc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	startTime = HAL_GetTick();
 8000bd4:	f000 fcd8 	bl	8001588 <HAL_GetTick>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <StartDefaultTask+0x38>)
 8000bdc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, LED1 | LED2 | LED3 | LED4 , GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000be4:	4808      	ldr	r0, [pc, #32]	@ (8000c08 <StartDefaultTask+0x3c>)
 8000be6:	f001 fbef 	bl	80023c8 <HAL_GPIO_WritePin>

	HAL_UART_Receive_IT(&huart1, BufIN, sizeBuffs);
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <StartDefaultTask+0x40>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4907      	ldr	r1, [pc, #28]	@ (8000c10 <StartDefaultTask+0x44>)
 8000bf4:	4807      	ldr	r0, [pc, #28]	@ (8000c14 <StartDefaultTask+0x48>)
 8000bf6:	f002 fc16 	bl	8003426 <HAL_UART_Receive_IT>
	/* Infinite loop */
  for(;;)
  {
	  // essa é a task default - vai colocar algo nela?
	  osDelay(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f003 f88c 	bl	8003d18 <osDelay>
 8000c00:	e7fb      	b.n	8000bfa <StartDefaultTask+0x2e>
 8000c02:	bf00      	nop
 8000c04:	200002e4 	.word	0x200002e4
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	20000018 	.word	0x20000018
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	20000270 	.word	0x20000270

08000c18 <fnTask_MngLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fnTask_MngLED */
void fnTask_MngLED(void const * argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
 //HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_SET);

  for(;;)
  {
    switch (modoLed)
 8000c20:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <fnTask_MngLED+0xb8>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	3b01      	subs	r3, #1
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	d84d      	bhi.n	8000cc8 <fnTask_MngLED+0xb0>
 8000c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <fnTask_MngLED+0x1c>)
 8000c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000c69 	.word	0x08000c69
 8000c38:	08000c81 	.word	0x08000c81
 8000c3c:	08000c99 	.word	0x08000c99
 8000c40:	08000cb1 	.word	0x08000cb1
 8000c44:	08000c5b 	.word	0x08000c5b
 8000c48:	08000c4d 	.word	0x08000c4d
    {
      case STARTUP:
    	HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c52:	4820      	ldr	r0, [pc, #128]	@ (8000cd4 <fnTask_MngLED+0xbc>)
 8000c54:	f001 fbb8 	bl	80023c8 <HAL_GPIO_WritePin>
    	break;
 8000c58:	e036      	b.n	8000cc8 <fnTask_MngLED+0xb0>
      case WFI:
    	HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c60:	481c      	ldr	r0, [pc, #112]	@ (8000cd4 <fnTask_MngLED+0xbc>)
 8000c62:	f001 fbb1 	bl	80023c8 <HAL_GPIO_WritePin>
    	break;
 8000c66:	e02f      	b.n	8000cc8 <fnTask_MngLED+0xb0>
      case LED_CRON:
        HAL_GPIO_TogglePin(GPIOB, LED1);
 8000c68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c6c:	4819      	ldr	r0, [pc, #100]	@ (8000cd4 <fnTask_MngLED+0xbc>)
 8000c6e:	f001 fbc3 	bl	80023f8 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000c78:	4816      	ldr	r0, [pc, #88]	@ (8000cd4 <fnTask_MngLED+0xbc>)
 8000c7a:	f001 fba5 	bl	80023c8 <HAL_GPIO_WritePin>
        break;
 8000c7e:	e023      	b.n	8000cc8 <fnTask_MngLED+0xb0>
      case LED_ADC:
        HAL_GPIO_TogglePin(GPIOB, LED2);
 8000c80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <fnTask_MngLED+0xbc>)
 8000c86:	f001 fbb7 	bl	80023f8 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED1, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8000c90:	4810      	ldr	r0, [pc, #64]	@ (8000cd4 <fnTask_MngLED+0xbc>)
 8000c92:	f001 fb99 	bl	80023c8 <HAL_GPIO_WritePin>
        break;
 8000c96:	e017      	b.n	8000cc8 <fnTask_MngLED+0xb0>
      case LED_CRON_EXT:
        HAL_GPIO_TogglePin(GPIOB, LED3);
 8000c98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9c:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <fnTask_MngLED+0xbc>)
 8000c9e:	f001 fbab 	bl	80023f8 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOB, LED4 | LED2 | LED1, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8000ca8:	480a      	ldr	r0, [pc, #40]	@ (8000cd4 <fnTask_MngLED+0xbc>)
 8000caa:	f001 fb8d 	bl	80023c8 <HAL_GPIO_WritePin>
        break;
 8000cae:	e00b      	b.n	8000cc8 <fnTask_MngLED+0xb0>
      case LED_ADC_EXT:
        HAL_GPIO_TogglePin(GPIOB, LED4);
 8000cb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb4:	4807      	ldr	r0, [pc, #28]	@ (8000cd4 <fnTask_MngLED+0xbc>)
 8000cb6:	f001 fb9f 	bl	80023f8 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOB, LED3 | LED2 | LED1, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000cc0:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <fnTask_MngLED+0xbc>)
 8000cc2:	f001 fb81 	bl	80023c8 <HAL_GPIO_WritePin>
        break;
 8000cc6:	bf00      	nop
    }

    osDelay(DT_LEDS);
 8000cc8:	2078      	movs	r0, #120	@ 0x78
 8000cca:	f003 f825 	bl	8003d18 <osDelay>
    switch (modoLed)
 8000cce:	e7a7      	b.n	8000c20 <fnTask_MngLED+0x8>
 8000cd0:	2000001c 	.word	0x2000001c
 8000cd4:	40010c00 	.word	0x40010c00

08000cd8 <fn_TaskDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fn_TaskDisplay */
void fn_TaskDisplay(void const * argument)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fn_TaskDisplay */
  /* Infinite loop */
  for(;;)
  {

	  switch (modoDisplay)
 8000ce0:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <fn_TaskDisplay+0xd8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d04d      	beq.n	8000d86 <fn_TaskDisplay+0xae>
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	dc50      	bgt.n	8000d90 <fn_TaskDisplay+0xb8>
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <fn_TaskDisplay+0x20>
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d012      	beq.n	8000d1c <fn_TaskDisplay+0x44>
 8000cf6:	e04b      	b.n	8000d90 <fn_TaskDisplay+0xb8>
	  	  case WFI:
	  		  break;

	  	  case DISPLAY_INTRN:
	  		//trocar para ADC
	  		  if (modoLed == LED_CRON)
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d103      	bne.n	8000d0a <fn_TaskDisplay+0x32>
	  		  {
	  			  modoLed = LED_ADC;
 8000d02:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	701a      	strb	r2, [r3, #0]
	  		  else if (modoLed == LED_ADC)
	  		  {
	  			  modoLed = LED_CRON;
	  		  }

	  		  break;
 8000d08:	e03f      	b.n	8000d8a <fn_TaskDisplay+0xb2>
	  		  else if (modoLed == LED_ADC)
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d13a      	bne.n	8000d8a <fn_TaskDisplay+0xb2>
	  			  modoLed = LED_CRON;
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000d1a:	e036      	b.n	8000d8a <fn_TaskDisplay+0xb2>

	  	  case DISPLAY_EXTRN:
	  		if (modoLed == WFI)
 8000d1c:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b05      	cmp	r3, #5
 8000d24:	d103      	bne.n	8000d2e <fn_TaskDisplay+0x56>
	  		{
	  			modoLed = LED_CRON_EXT;
 8000d26:	4b23      	ldr	r3, [pc, #140]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d28:	2203      	movs	r2, #3
 8000d2a:	701a      	strb	r2, [r3, #0]
	  			else
	  			{
	  				modoLed = LED_CRON;
	  			}
	  		}
	  		break; //break do case DISPLAY EXTRN
 8000d2c:	e02f      	b.n	8000d8e <fn_TaskDisplay+0xb6>
	  		else if (modoLed == LED_CRON)
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d103      	bne.n	8000d40 <fn_TaskDisplay+0x68>
	  			modoLed = LED_ADC;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	701a      	strb	r2, [r3, #0]
	  		break; //break do case DISPLAY EXTRN
 8000d3e:	e026      	b.n	8000d8e <fn_TaskDisplay+0xb6>
	  		else if (modoLed == LED_ADC)
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d103      	bne.n	8000d52 <fn_TaskDisplay+0x7a>
	  			modoLed = LED_CRON_EXT;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	701a      	strb	r2, [r3, #0]
	  		break; //break do case DISPLAY EXTRN
 8000d50:	e01d      	b.n	8000d8e <fn_TaskDisplay+0xb6>
	  		else if (modoLed == LED_CRON_EXT)
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d103      	bne.n	8000d64 <fn_TaskDisplay+0x8c>
	  			modoLed = LED_ADC_EXT;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	701a      	strb	r2, [r3, #0]
	  		break; //break do case DISPLAY EXTRN
 8000d62:	e014      	b.n	8000d8e <fn_TaskDisplay+0xb6>
	  		else if (modoLed == LED_ADC_EXT)
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d10f      	bne.n	8000d8e <fn_TaskDisplay+0xb6>
	  			if (A1_foi_apertado == 0)
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <fn_TaskDisplay+0xe0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d103      	bne.n	8000d7e <fn_TaskDisplay+0xa6>
	  				modoLed = WFI;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d78:	2205      	movs	r2, #5
 8000d7a:	701a      	strb	r2, [r3, #0]
	  		break; //break do case DISPLAY EXTRN
 8000d7c:	e007      	b.n	8000d8e <fn_TaskDisplay+0xb6>
	  				modoLed = LED_CRON;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <fn_TaskDisplay+0xdc>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
	  		break; //break do case DISPLAY EXTRN
 8000d84:	e003      	b.n	8000d8e <fn_TaskDisplay+0xb6>
	  		  break;
 8000d86:	bf00      	nop
 8000d88:	e002      	b.n	8000d90 <fn_TaskDisplay+0xb8>
	  		  break;
 8000d8a:	bf00      	nop
 8000d8c:	e000      	b.n	8000d90 <fn_TaskDisplay+0xb8>
	  		break; //break do case DISPLAY EXTRN
 8000d8e:	bf00      	nop
	  }


	  if (modoDisplay == DISPLAY_INTRN)
 8000d90:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <fn_TaskDisplay+0xd8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d104      	bne.n	8000da4 <fn_TaskDisplay+0xcc>
	  {
		  osDelay(DT_DISPLAY_MD1);
 8000d9a:	f640 709f 	movw	r0, #3999	@ 0xf9f
 8000d9e:	f002 ffbb 	bl	8003d18 <osDelay>
 8000da2:	e79d      	b.n	8000ce0 <fn_TaskDisplay+0x8>
	  }
	  else
	  {
		  osDelay(DT_DISPLAY_MD2);
 8000da4:	f240 70cf 	movw	r0, #1999	@ 0x7cf
 8000da8:	f002 ffb6 	bl	8003d18 <osDelay>
	  switch (modoDisplay)
 8000dac:	e798      	b.n	8000ce0 <fn_TaskDisplay+0x8>
 8000dae:	bf00      	nop
 8000db0:	200002dc 	.word	0x200002dc
 8000db4:	2000001c 	.word	0x2000001c
 8000db8:	200002ec 	.word	0x200002ec

08000dbc <fn_Task_Varrer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fn_Task_Varrer */
void fn_Task_Varrer(void const * argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fn_Task_Varrer */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GetTick() - startTime > 2000  && startupComplete != 1)
 8000dc4:	f000 fbe0 	bl	8001588 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	4b6f      	ldr	r3, [pc, #444]	@ (8000f88 <fn_Task_Varrer+0x1cc>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000dd4:	d909      	bls.n	8000dea <fn_Task_Varrer+0x2e>
 8000dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8000f8c <fn_Task_Varrer+0x1d0>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d005      	beq.n	8000dea <fn_Task_Varrer+0x2e>
	  {
		  modoLed = WFI;
 8000dde:	4b6c      	ldr	r3, [pc, #432]	@ (8000f90 <fn_Task_Varrer+0x1d4>)
 8000de0:	2205      	movs	r2, #5
 8000de2:	701a      	strb	r2, [r3, #0]
		  startupComplete = 1;
 8000de4:	4b69      	ldr	r3, [pc, #420]	@ (8000f8c <fn_Task_Varrer+0x1d0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
	  }
	  switch (modoLed)
 8000dea:	4b69      	ldr	r3, [pc, #420]	@ (8000f90 <fn_Task_Varrer+0x1d4>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	3b01      	subs	r3, #1
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	f200 80bd 	bhi.w	8000f72 <fn_Task_Varrer+0x1b6>
 8000df8:	a201      	add	r2, pc, #4	@ (adr r2, 8000e00 <fn_Task_Varrer+0x44>)
 8000dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfe:	bf00      	nop
 8000e00:	08000e63 	.word	0x08000e63
 8000e04:	08000e93 	.word	0x08000e93
 8000e08:	08000ec3 	.word	0x08000ec3
 8000e0c:	08000f1b 	.word	0x08000f1b
 8000e10:	08000e39 	.word	0x08000e39
 8000e14:	08000e19 	.word	0x08000e19
	  		  {
	  	  	  	  case STARTUP:
	  	  	  		  DspHex[0] = 8;
 8000e18:	4b5e      	ldr	r3, [pc, #376]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	701a      	strb	r2, [r3, #0]
	  	  	  		  DspHex[1] = 8;
 8000e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	705a      	strb	r2, [r3, #1]
	  	  	  		  DspHex[2] = 8;
 8000e24:	4b5b      	ldr	r3, [pc, #364]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e26:	2208      	movs	r2, #8
 8000e28:	709a      	strb	r2, [r3, #2]
	  	  	  		  DspHex[3] = 8;
 8000e2a:	4b5a      	ldr	r3, [pc, #360]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	70da      	strb	r2, [r3, #3]
	  	  	  		  ptoDec = 15;
 8000e30:	4b59      	ldr	r3, [pc, #356]	@ (8000f98 <fn_Task_Varrer+0x1dc>)
 8000e32:	220f      	movs	r2, #15
 8000e34:	701a      	strb	r2, [r3, #0]
	  	  	  		  break;
 8000e36:	e09c      	b.n	8000f72 <fn_Task_Varrer+0x1b6>
	  		  	  case WFI:
	  		  		  DspHex[3] = RA[0];
 8000e38:	4b58      	ldr	r3, [pc, #352]	@ (8000f9c <fn_Task_Varrer+0x1e0>)
 8000e3a:	f993 2000 	ldrsb.w	r2, [r3]
 8000e3e:	4b55      	ldr	r3, [pc, #340]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e40:	70da      	strb	r2, [r3, #3]
	  		  		  DspHex[2] = RA[1];
 8000e42:	4b56      	ldr	r3, [pc, #344]	@ (8000f9c <fn_Task_Varrer+0x1e0>)
 8000e44:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000e48:	4b52      	ldr	r3, [pc, #328]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e4a:	709a      	strb	r2, [r3, #2]
	  		  		  DspHex[1] = RA[2];
 8000e4c:	4b53      	ldr	r3, [pc, #332]	@ (8000f9c <fn_Task_Varrer+0x1e0>)
 8000e4e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000e52:	4b50      	ldr	r3, [pc, #320]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e54:	705a      	strb	r2, [r3, #1]
	  		  		  DspHex[0] = RA[3];
 8000e56:	4b51      	ldr	r3, [pc, #324]	@ (8000f9c <fn_Task_Varrer+0x1e0>)
 8000e58:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e5e:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000e60:	e087      	b.n	8000f72 <fn_Task_Varrer+0x1b6>
	  		  	  case LED_CRON:
	  		  		  DspHex[0] = Crono[0];
 8000e62:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa0 <fn_Task_Varrer+0x1e4>)
 8000e64:	f993 2000 	ldrsb.w	r2, [r3]
 8000e68:	4b4a      	ldr	r3, [pc, #296]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e6a:	701a      	strb	r2, [r3, #0]
	  		  		  DspHex[1] = Crono[1];
 8000e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8000fa0 <fn_Task_Varrer+0x1e4>)
 8000e6e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000e72:	4b48      	ldr	r3, [pc, #288]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e74:	705a      	strb	r2, [r3, #1]
	  		  		  DspHex[2] = Crono[2];
 8000e76:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa0 <fn_Task_Varrer+0x1e4>)
 8000e78:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000e7c:	4b45      	ldr	r3, [pc, #276]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e7e:	709a      	strb	r2, [r3, #2]
	  		  		  DspHex[3] = Crono[3];
 8000e80:	4b47      	ldr	r3, [pc, #284]	@ (8000fa0 <fn_Task_Varrer+0x1e4>)
 8000e82:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000e86:	4b43      	ldr	r3, [pc, #268]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e88:	70da      	strb	r2, [r3, #3]
	  		  		  ptoDec = 10;
 8000e8a:	4b43      	ldr	r3, [pc, #268]	@ (8000f98 <fn_Task_Varrer+0x1dc>)
 8000e8c:	220a      	movs	r2, #10
 8000e8e:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000e90:	e06f      	b.n	8000f72 <fn_Task_Varrer+0x1b6>
	  		  	  case LED_ADC:
	  		  		  DspHex[0] = ValAdc[0];
 8000e92:	4b44      	ldr	r3, [pc, #272]	@ (8000fa4 <fn_Task_Varrer+0x1e8>)
 8000e94:	f993 2000 	ldrsb.w	r2, [r3]
 8000e98:	4b3e      	ldr	r3, [pc, #248]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000e9a:	701a      	strb	r2, [r3, #0]
	  		  		  DspHex[1] = ValAdc[1];
 8000e9c:	4b41      	ldr	r3, [pc, #260]	@ (8000fa4 <fn_Task_Varrer+0x1e8>)
 8000e9e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000ea4:	705a      	strb	r2, [r3, #1]
	  		  		  DspHex[2] = ValAdc[2];
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa4 <fn_Task_Varrer+0x1e8>)
 8000ea8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000eac:	4b39      	ldr	r3, [pc, #228]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000eae:	709a      	strb	r2, [r3, #2]
	  		  		  DspHex[3] = ValAdc[3];
 8000eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa4 <fn_Task_Varrer+0x1e8>)
 8000eb2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000eb6:	4b37      	ldr	r3, [pc, #220]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000eb8:	70da      	strb	r2, [r3, #3]
	  		  		  ptoDec = 8;
 8000eba:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <fn_Task_Varrer+0x1dc>)
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000ec0:	e057      	b.n	8000f72 <fn_Task_Varrer+0x1b6>
	  		  	  case LED_CRON_EXT:

	  		  		  BufOUT[0] = REQCRN[0];
 8000ec2:	2274      	movs	r2, #116	@ 0x74
 8000ec4:	4b38      	ldr	r3, [pc, #224]	@ (8000fa8 <fn_Task_Varrer+0x1ec>)
 8000ec6:	701a      	strb	r2, [r3, #0]
	  		  		  BufOUT[1] = REQCRN[1];
 8000ec8:	2230      	movs	r2, #48	@ 0x30
 8000eca:	4b37      	ldr	r3, [pc, #220]	@ (8000fa8 <fn_Task_Varrer+0x1ec>)
 8000ecc:	705a      	strb	r2, [r3, #1]
	  		  		  BufOUT[2] = REQCRN[2];
 8000ece:	2230      	movs	r2, #48	@ 0x30
 8000ed0:	4b35      	ldr	r3, [pc, #212]	@ (8000fa8 <fn_Task_Varrer+0x1ec>)
 8000ed2:	709a      	strb	r2, [r3, #2]
	  		  		  BufOUT[3] = REQCRN[3];
 8000ed4:	2230      	movs	r2, #48	@ 0x30
 8000ed6:	4b34      	ldr	r3, [pc, #208]	@ (8000fa8 <fn_Task_Varrer+0x1ec>)
 8000ed8:	70da      	strb	r2, [r3, #3]
	  		  		  HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
 8000eda:	4b34      	ldr	r3, [pc, #208]	@ (8000fac <fn_Task_Varrer+0x1f0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4931      	ldr	r1, [pc, #196]	@ (8000fa8 <fn_Task_Varrer+0x1ec>)
 8000ee4:	4832      	ldr	r0, [pc, #200]	@ (8000fb0 <fn_Task_Varrer+0x1f4>)
 8000ee6:	f002 fa5a 	bl	800339e <HAL_UART_Transmit_IT>

	  		  		  DspHex[0] = CronoExt[0];
 8000eea:	4b32      	ldr	r3, [pc, #200]	@ (8000fb4 <fn_Task_Varrer+0x1f8>)
 8000eec:	f993 2000 	ldrsb.w	r2, [r3]
 8000ef0:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000ef2:	701a      	strb	r2, [r3, #0]
	  		  		  DspHex[1] = CronoExt[1];
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <fn_Task_Varrer+0x1f8>)
 8000ef6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000efa:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000efc:	705a      	strb	r2, [r3, #1]
	  		  		  DspHex[2] = CronoExt[2];
 8000efe:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <fn_Task_Varrer+0x1f8>)
 8000f00:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000f04:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000f06:	709a      	strb	r2, [r3, #2]
	  		  		  DspHex[3] = CronoExt[3];
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <fn_Task_Varrer+0x1f8>)
 8000f0a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000f10:	70da      	strb	r2, [r3, #3]
	  		  		  ptoDec = 10;
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <fn_Task_Varrer+0x1dc>)
 8000f14:	220a      	movs	r2, #10
 8000f16:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000f18:	e02b      	b.n	8000f72 <fn_Task_Varrer+0x1b6>
	  		  	  case LED_ADC_EXT:

	  		  		  BufOUT[0] = REQADC[0];
 8000f1a:	2261      	movs	r2, #97	@ 0x61
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <fn_Task_Varrer+0x1ec>)
 8000f1e:	701a      	strb	r2, [r3, #0]
	  		  		  BufOUT[1] = REQADC[1];
 8000f20:	2230      	movs	r2, #48	@ 0x30
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <fn_Task_Varrer+0x1ec>)
 8000f24:	705a      	strb	r2, [r3, #1]
	  		  		  BufOUT[2] = REQADC[2];
 8000f26:	2230      	movs	r2, #48	@ 0x30
 8000f28:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <fn_Task_Varrer+0x1ec>)
 8000f2a:	709a      	strb	r2, [r3, #2]
	  		  		  BufOUT[3] = REQADC[3];
 8000f2c:	2230      	movs	r2, #48	@ 0x30
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <fn_Task_Varrer+0x1ec>)
 8000f30:	70da      	strb	r2, [r3, #3]
	  		  		  HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <fn_Task_Varrer+0x1f0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	491b      	ldr	r1, [pc, #108]	@ (8000fa8 <fn_Task_Varrer+0x1ec>)
 8000f3c:	481c      	ldr	r0, [pc, #112]	@ (8000fb0 <fn_Task_Varrer+0x1f4>)
 8000f3e:	f002 fa2e 	bl	800339e <HAL_UART_Transmit_IT>

	  		  		  DspHex[0] = ValAdcExt[0];
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <fn_Task_Varrer+0x1fc>)
 8000f44:	f993 2000 	ldrsb.w	r2, [r3]
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000f4a:	701a      	strb	r2, [r3, #0]
	  		  		  DspHex[1] = ValAdcExt[1];
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <fn_Task_Varrer+0x1fc>)
 8000f4e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000f54:	705a      	strb	r2, [r3, #1]
	  		  		  DspHex[2] = ValAdcExt[2];
 8000f56:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <fn_Task_Varrer+0x1fc>)
 8000f58:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000f5e:	709a      	strb	r2, [r3, #2]
	  		  		  DspHex[3] = ValAdcExt[3];
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <fn_Task_Varrer+0x1fc>)
 8000f62:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000f68:	70da      	strb	r2, [r3, #3]
	  		  		  ptoDec = 8;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <fn_Task_Varrer+0x1dc>)
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000f70:	bf00      	nop
	  		  }
	  mostrar_no_display(DspHex, ptoDec);
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <fn_Task_Varrer+0x1dc>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <fn_Task_Varrer+0x1d8>)
 8000f7a:	f7ff f9fd 	bl	8000378 <mostrar_no_display>
	  osDelay(DT_VARRE_DISPLAY);
 8000f7e:	2006      	movs	r0, #6
 8000f80:	f002 feca 	bl	8003d18 <osDelay>
	  if (HAL_GetTick() - startTime > 2000  && startupComplete != 1)
 8000f84:	e71e      	b.n	8000dc4 <fn_Task_Varrer+0x8>
 8000f86:	bf00      	nop
 8000f88:	200002e4 	.word	0x200002e4
 8000f8c:	200002e8 	.word	0x200002e8
 8000f90:	2000001c 	.word	0x2000001c
 8000f94:	20000014 	.word	0x20000014
 8000f98:	200002d4 	.word	0x200002d4
 8000f9c:	20000020 	.word	0x20000020
 8000fa0:	200002c4 	.word	0x200002c4
 8000fa4:	200002c8 	.word	0x200002c8
 8000fa8:	20000004 	.word	0x20000004
 8000fac:	20000018 	.word	0x20000018
 8000fb0:	20000270 	.word	0x20000270
 8000fb4:	200002cc 	.word	0x200002cc
 8000fb8:	200002d0 	.word	0x200002d0

08000fbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a34      	ldr	r2, [pc, #208]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fce:	f000 fac9 	bl	8001564 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  //TODO:chamar att ADC no DT certo
  if (HAL_GetTick()- tADC > DT_ADC)
 8000fd2:	f000 fad9 	bl	8001588 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b28      	cmp	r3, #40	@ 0x28
 8000fe0:	d907      	bls.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0x36>
  {
	  HAL_ADC_Start_IT(&hadc1);
 8000fe2:	4830      	ldr	r0, [pc, #192]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000fe4:	f000 fbb2 	bl	800174c <HAL_ADC_Start_IT>
	  tADC = HAL_GetTick();
 8000fe8:	f000 face 	bl	8001588 <HAL_GetTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a2c      	ldr	r2, [pc, #176]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000ff0:	6013      	str	r3, [r2, #0]
  }

  // CRONOMETRO UP/DOWN: teste se já passou DT_CRONO ms
    if ((HAL_GetTick() - tinCrono) > DT_CRONO)
 8000ff2:	f000 fac9 	bl	8001588 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b63      	cmp	r3, #99	@ 0x63
 8001000:	d948      	bls.n	8001094 <HAL_TIM_PeriodElapsedCallback+0xd8>
    {
      tinCrono = HAL_GetTick();          // atualiza o tempo de entrada aqui
 8001002:	f000 fac1 	bl	8001588 <HAL_GetTick>
 8001006:	4603      	mov	r3, r0
 8001008:	4a27      	ldr	r2, [pc, #156]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800100a:	6013      	str	r3, [r2, #0]
      if(MD_CRONO == 0){                 // MD_CRONO = 0 incrementa o cronômetro
        ++ Crono[0];                     // inc decimo de segundos
 800100c:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800100e:	f993 3000 	ldrsb.w	r3, [r3]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	b25a      	sxtb	r2, r3
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800101c:	701a      	strb	r2, [r3, #0]
        if (Crono[0] > 9){               // se > 9
 800101e:	4b23      	ldr	r3, [pc, #140]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001020:	f993 3000 	ldrsb.w	r3, [r3]
 8001024:	2b09      	cmp	r3, #9
 8001026:	dd35      	ble.n	8001094 <HAL_TIM_PeriodElapsedCallback+0xd8>
          Crono[0] = 0;                  // volta p/ zero
 8001028:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
          ++ Crono[1];                   // inc unidade de segundo
 800102e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001030:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	b25a      	sxtb	r2, r3
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800103e:	705a      	strb	r2, [r3, #1]
          if (Crono[1] > 9){             // se > 9
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001042:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001046:	2b09      	cmp	r3, #9
 8001048:	dd24      	ble.n	8001094 <HAL_TIM_PeriodElapsedCallback+0xd8>
            Crono[1] = 0;                // volta p/ zero
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800104c:	2200      	movs	r2, #0
 800104e:	705a      	strb	r2, [r3, #1]
            ++ Crono[2];                 // inc dezena de segundos
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001052:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	b25a      	sxtb	r2, r3
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001060:	709a      	strb	r2, [r3, #2]
            if (Crono[2] > 5){           // se > 5
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001064:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001068:	2b05      	cmp	r3, #5
 800106a:	dd13      	ble.n	8001094 <HAL_TIM_PeriodElapsedCallback+0xd8>
              Crono[2] = 0;              // volta p/ zero
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800106e:	2200      	movs	r2, #0
 8001070:	709a      	strb	r2, [r3, #2]
              ++ Crono[3];               // inc minutos
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001074:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	3301      	adds	r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	b25a      	sxtb	r2, r3
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001082:	70da      	strb	r2, [r3, #3]
              if (Crono[3] > 9){         // se > 9
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001086:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800108a:	2b09      	cmp	r3, #9
 800108c:	dd02      	ble.n	8001094 <HAL_TIM_PeriodElapsedCallback+0xd8>
                Crono[3] = 0;            // volta p/ zero
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001090:	2200      	movs	r2, #0
 8001092:	70da      	strb	r2, [r3, #3]
        }  }  }  }
      }
    }

  /* USER CODE END Callback 1 */
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40000800 	.word	0x40000800
 80010a0:	200002e0 	.word	0x200002e0
 80010a4:	20000240 	.word	0x20000240
 80010a8:	200002d8 	.word	0x200002d8
 80010ac:	200002c4 	.word	0x200002c4

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <Error_Handler+0x8>

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_MspInit+0x68>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <HAL_MspInit+0x68>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_MspInit+0x68>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <HAL_MspInit+0x68>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <HAL_MspInit+0x68>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_MspInit+0x68>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	210f      	movs	r1, #15
 80010f6:	f06f 0001 	mvn.w	r0, #1
 80010fa:	f000 ff06 	bl	8001f0a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_MspInit+0x6c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <HAL_MspInit+0x6c>)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	40010000 	.word	0x40010000

0800112c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <HAL_ADC_MspInit+0x6c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d121      	bne.n	8001190 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <HAL_ADC_MspInit+0x70>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <HAL_ADC_MspInit+0x70>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b10      	ldr	r3, [pc, #64]	@ (800119c <HAL_ADC_MspInit+0x70>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <HAL_ADC_MspInit+0x70>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <HAL_ADC_MspInit+0x70>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_ADC_MspInit+0x70>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <HAL_ADC_MspInit+0x74>)
 800118c:	f000 ff98 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40012400 	.word	0x40012400
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010800 	.word	0x40010800

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <HAL_UART_MspInit+0x8c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d131      	bne.n	8001228 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_UART_MspInit+0x90>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001234 <HAL_UART_MspInit+0x90>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HAL_UART_MspInit+0x90>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_UART_MspInit+0x90>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a14      	ldr	r2, [pc, #80]	@ (8001234 <HAL_UART_MspInit+0x90>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_UART_MspInit+0x90>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4619      	mov	r1, r3
 8001208:	480b      	ldr	r0, [pc, #44]	@ (8001238 <HAL_UART_MspInit+0x94>)
 800120a:	f000 ff59 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800120e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <HAL_UART_MspInit+0x94>)
 8001224:	f000 ff4c 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40013800 	.word	0x40013800
 8001234:	40021000 	.word	0x40021000
 8001238:	40010800 	.word	0x40010800

0800123c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001252:	4b34      	ldr	r3, [pc, #208]	@ (8001324 <HAL_InitTick+0xe8>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a33      	ldr	r2, [pc, #204]	@ (8001324 <HAL_InitTick+0xe8>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	4b31      	ldr	r3, [pc, #196]	@ (8001324 <HAL_InitTick+0xe8>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800126a:	f107 0210 	add.w	r2, r7, #16
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fcf7 	bl	8002c68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800127e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001280:	2b00      	cmp	r3, #0
 8001282:	d103      	bne.n	800128c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001284:	f001 fcc8 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8001288:	6378      	str	r0, [r7, #52]	@ 0x34
 800128a:	e004      	b.n	8001296 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800128c:	f001 fcc4 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8001290:	4603      	mov	r3, r0
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001298:	4a23      	ldr	r2, [pc, #140]	@ (8001328 <HAL_InitTick+0xec>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0c9b      	lsrs	r3, r3, #18
 80012a0:	3b01      	subs	r3, #1
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80012a4:	4b21      	ldr	r3, [pc, #132]	@ (800132c <HAL_InitTick+0xf0>)
 80012a6:	4a22      	ldr	r2, [pc, #136]	@ (8001330 <HAL_InitTick+0xf4>)
 80012a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80012aa:	4b20      	ldr	r3, [pc, #128]	@ (800132c <HAL_InitTick+0xf0>)
 80012ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012b0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80012b2:	4a1e      	ldr	r2, [pc, #120]	@ (800132c <HAL_InitTick+0xf0>)
 80012b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_InitTick+0xf0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <HAL_InitTick+0xf0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_InitTick+0xf0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80012ca:	4818      	ldr	r0, [pc, #96]	@ (800132c <HAL_InitTick+0xf0>)
 80012cc:	f001 fdd0 	bl	8002e70 <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d11b      	bne.n	8001316 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80012de:	4813      	ldr	r0, [pc, #76]	@ (800132c <HAL_InitTick+0xf0>)
 80012e0:	f001 fe1e 	bl	8002f20 <HAL_TIM_Base_Start_IT>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d111      	bne.n	8001316 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012f2:	201e      	movs	r0, #30
 80012f4:	f000 fe25 	bl	8001f42 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	d808      	bhi.n	8001310 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80012fe:	2200      	movs	r2, #0
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	201e      	movs	r0, #30
 8001304:	f000 fe01 	bl	8001f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001308:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <HAL_InitTick+0xf8>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e002      	b.n	8001316 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001316:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800131a:	4618      	mov	r0, r3
 800131c:	3738      	adds	r7, #56	@ 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	431bde83 	.word	0x431bde83
 800132c:	200002f0 	.word	0x200002f0
 8001330:	40000800 	.word	0x40000800
 8001334:	20000028 	.word	0x20000028

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <NMI_Handler+0x4>

08001340 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <HardFault_Handler+0x4>

08001348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <MemManage_Handler+0x4>

08001350 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <UsageFault_Handler+0x4>

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if((HAL_GetTick()-tIN_IRQ1) > DT_DEBOUNCING)
 8001370:	f000 f90a 	bl	8001588 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <EXTI1_IRQHandler+0x58>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001380:	d31b      	bcc.n	80013ba <EXTI1_IRQHandler+0x4e>
	{
		tIN_IRQ1 = HAL_GetTick();          // tIN (ms) da ultima IRQ1
 8001382:	f000 f901 	bl	8001588 <HAL_GetTick>
 8001386:	4603      	mov	r3, r0
 8001388:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <EXTI1_IRQHandler+0x58>)
 800138a:	6013      	str	r3, [r2, #0]
		//setup modo 4s 2 valores
		modoLed = LED_CRON;
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <EXTI1_IRQHandler+0x5c>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
		if (recebendoDados == 0)
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <EXTI1_IRQHandler+0x60>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d103      	bne.n	80013a2 <EXTI1_IRQHandler+0x36>
		{
			modoDisplay = DISPLAY_INTRN;
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <EXTI1_IRQHandler+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	e002      	b.n	80013a8 <EXTI1_IRQHandler+0x3c>
		}
		else
		{
			modoDisplay = DISPLAY_EXTRN;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <EXTI1_IRQHandler+0x64>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
		}
		A1_foi_apertado = 1;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <EXTI1_IRQHandler+0x68>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LED4 | LED3 | LED2 | LED1, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80013b4:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <EXTI1_IRQHandler+0x6c>)
 80013b6:	f001 f807 	bl	80023c8 <HAL_GPIO_WritePin>
	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013ba:	2002      	movs	r0, #2
 80013bc:	f001 f836 	bl	800242c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000338 	.word	0x20000338
 80013c8:	2000001c 	.word	0x2000001c
 80013cc:	200002dd 	.word	0x200002dd
 80013d0:	200002dc 	.word	0x200002dc
 80013d4:	200002ec 	.word	0x200002ec
 80013d8:	40010c00 	.word	0x40010c00

080013dc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	if((HAL_GetTick()-tIN_IRQ2) > DT_DEBOUNCING)
 80013e0:	f000 f8d2 	bl	8001588 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <EXTI2_IRQHandler+0x54>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80013f0:	d318      	bcc.n	8001424 <EXTI2_IRQHandler+0x48>
	{
		tIN_IRQ2 = HAL_GetTick();          // tIN (ms) da ultima IRQ2
 80013f2:	f000 f8c9 	bl	8001588 <HAL_GetTick>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001430 <EXTI2_IRQHandler+0x54>)
 80013fa:	6013      	str	r3, [r2, #0]
		//...  o que vc vai fazer aqui???
		BufOUT[0] = REQSRV[0];
 80013fc:	2273      	movs	r2, #115	@ 0x73
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <EXTI2_IRQHandler+0x58>)
 8001400:	701a      	strb	r2, [r3, #0]
		BufOUT[1] = REQSRV[1];
 8001402:	2230      	movs	r2, #48	@ 0x30
 8001404:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <EXTI2_IRQHandler+0x58>)
 8001406:	705a      	strb	r2, [r3, #1]
		BufOUT[2] = REQSRV[2];
 8001408:	2230      	movs	r2, #48	@ 0x30
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <EXTI2_IRQHandler+0x58>)
 800140c:	709a      	strb	r2, [r3, #2]
		BufOUT[3] = REQSRV[3];
 800140e:	2230      	movs	r2, #48	@ 0x30
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <EXTI2_IRQHandler+0x58>)
 8001412:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <EXTI2_IRQHandler+0x5c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	4905      	ldr	r1, [pc, #20]	@ (8001434 <EXTI2_IRQHandler+0x58>)
 800141e:	4807      	ldr	r0, [pc, #28]	@ (800143c <EXTI2_IRQHandler+0x60>)
 8001420:	f001 ffbd 	bl	800339e <HAL_UART_Transmit_IT>

	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001424:	2004      	movs	r0, #4
 8001426:	f001 f801 	bl	800242c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000033c 	.word	0x2000033c
 8001434:	20000004 	.word	0x20000004
 8001438:	20000018 	.word	0x20000018
 800143c:	20000270 	.word	0x20000270

08001440 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	if((HAL_GetTick()-tIN_IRQ3) > DT_DEBOUNCING)
 8001444:	f000 f8a0 	bl	8001588 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <EXTI3_IRQHandler+0x54>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001454:	d318      	bcc.n	8001488 <EXTI3_IRQHandler+0x48>
	{
		tIN_IRQ3 = HAL_GetTick();          // tIN (ms) da ultima IRQ3
 8001456:	f000 f897 	bl	8001588 <HAL_GetTick>
 800145a:	4603      	mov	r3, r0
 800145c:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <EXTI3_IRQHandler+0x54>)
 800145e:	6013      	str	r3, [r2, #0]
		//...  o que vc vai fazer aqui???
		BufOUT[0] = REQOFF[0];
 8001460:	226e      	movs	r2, #110	@ 0x6e
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <EXTI3_IRQHandler+0x58>)
 8001464:	701a      	strb	r2, [r3, #0]
		BufOUT[1] = REQOFF[1];
 8001466:	2230      	movs	r2, #48	@ 0x30
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <EXTI3_IRQHandler+0x58>)
 800146a:	705a      	strb	r2, [r3, #1]
		BufOUT[2] = REQOFF[2];
 800146c:	2230      	movs	r2, #48	@ 0x30
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <EXTI3_IRQHandler+0x58>)
 8001470:	709a      	strb	r2, [r3, #2]
		BufOUT[3] = REQOFF[3];
 8001472:	2230      	movs	r2, #48	@ 0x30
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <EXTI3_IRQHandler+0x58>)
 8001476:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(&huart1, BufOUT, sizeBuffs);
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <EXTI3_IRQHandler+0x5c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	4905      	ldr	r1, [pc, #20]	@ (8001498 <EXTI3_IRQHandler+0x58>)
 8001482:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <EXTI3_IRQHandler+0x60>)
 8001484:	f001 ff8b 	bl	800339e <HAL_UART_Transmit_IT>
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001488:	2008      	movs	r0, #8
 800148a:	f000 ffcf 	bl	800242c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000340 	.word	0x20000340
 8001498:	20000004 	.word	0x20000004
 800149c:	20000018 	.word	0x20000018
 80014a0:	20000270 	.word	0x20000270

080014a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <ADC1_2_IRQHandler+0x10>)
 80014aa:	f000 fa11 	bl	80018d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000240 	.word	0x20000240

080014b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <TIM4_IRQHandler+0x10>)
 80014be:	f001 fd81 	bl	8002fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200002f0 	.word	0x200002f0

080014cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <USART1_IRQHandler+0x10>)
 80014d2:	f001 ffd9 	bl	8003488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000270 	.word	0x20000270

080014e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	@ (8001520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	@ (8001524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	@ (8001530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001512:	f7ff ffe5 	bl	80014e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f003 fe0f 	bl	8005138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800151a:	f7fe ffed 	bl	80004f8 <main>
  bx lr
 800151e:	4770      	bx	lr
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001528:	0800531c 	.word	0x0800531c
  ldr r2, =_sbss
 800152c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001530:	200011d4 	.word	0x200011d4

08001534 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <CAN1_RX1_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <HAL_Init+0x28>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	@ (8001560 <HAL_Init+0x28>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 fcd3 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	200f      	movs	r0, #15
 8001550:	f7ff fe74 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fdb2 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40022000 	.word	0x40022000

08001564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <HAL_IncTick+0x1c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <HAL_IncTick+0x20>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a03      	ldr	r2, [pc, #12]	@ (8001584 <HAL_IncTick+0x20>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	2000002c 	.word	0x2000002c
 8001584:	20000344 	.word	0x20000344

08001588 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b02      	ldr	r3, [pc, #8]	@ (8001598 <HAL_GetTick+0x10>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000344 	.word	0x20000344

0800159c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0be      	b.n	800173c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fda6 	bl	800112c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 fb93 	bl	8001d0c <ADC_ConversionStop_Disable>
 80015e6:	4603      	mov	r3, r0
 80015e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 8099 	bne.w	800172a <HAL_ADC_Init+0x18e>
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 8095 	bne.w	800172a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001608:	f023 0302 	bic.w	r3, r3, #2
 800160c:	f043 0202 	orr.w	r2, r3, #2
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800161c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7b1b      	ldrb	r3, [r3, #12]
 8001622:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001624:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	4313      	orrs	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001634:	d003      	beq.n	800163e <HAL_ADC_Init+0xa2>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d102      	bne.n	8001644 <HAL_ADC_Init+0xa8>
 800163e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001642:	e000      	b.n	8001646 <HAL_ADC_Init+0xaa>
 8001644:	2300      	movs	r3, #0
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7d1b      	ldrb	r3, [r3, #20]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d119      	bne.n	8001688 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7b1b      	ldrb	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d109      	bne.n	8001670 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	3b01      	subs	r3, #1
 8001662:	035a      	lsls	r2, r3, #13
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	e00b      	b.n	8001688 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001674:	f043 0220 	orr.w	r2, r3, #32
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001680:	f043 0201 	orr.w	r2, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <HAL_ADC_Init+0x1a8>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	430b      	orrs	r3, r1
 80016ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016b8:	d003      	beq.n	80016c2 <HAL_ADC_Init+0x126>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d104      	bne.n	80016cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	051b      	lsls	r3, r3, #20
 80016ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	430a      	orrs	r2, r1
 80016de:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <HAL_ADC_Init+0x1ac>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d10b      	bne.n	8001708 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fa:	f023 0303 	bic.w	r3, r3, #3
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001706:	e018      	b.n	800173a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170c:	f023 0312 	bic.w	r3, r3, #18
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001728:	e007      	b.n	800173a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172e:	f043 0210 	orr.w	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800173a:	7dfb      	ldrb	r3, [r7, #23]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	ffe1f7fd 	.word	0xffe1f7fd
 8001748:	ff1f0efe 	.word	0xff1f0efe

0800174c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Start_IT+0x1a>
 8001762:	2302      	movs	r3, #2
 8001764:	e0a0      	b.n	80018a8 <HAL_ADC_Start_IT+0x15c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fa72 	bl	8001c58 <ADC_Enable>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 808f 	bne.w	800189e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001784:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a45      	ldr	r2, [pc, #276]	@ (80018b0 <HAL_ADC_Start_IT+0x164>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d105      	bne.n	80017aa <HAL_ADC_Start_IT+0x5e>
 800179e:	4b45      	ldr	r3, [pc, #276]	@ (80018b4 <HAL_ADC_Start_IT+0x168>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d115      	bne.n	80017d6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d026      	beq.n	8001812 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017d4:	e01d      	b.n	8001812 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a33      	ldr	r2, [pc, #204]	@ (80018b4 <HAL_ADC_Start_IT+0x168>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d004      	beq.n	80017f6 <HAL_ADC_Start_IT+0xaa>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a2f      	ldr	r2, [pc, #188]	@ (80018b0 <HAL_ADC_Start_IT+0x164>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10d      	bne.n	8001812 <HAL_ADC_Start_IT+0xc6>
 80017f6:	4b2f      	ldr	r3, [pc, #188]	@ (80018b4 <HAL_ADC_Start_IT+0x168>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001806:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800180a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001822:	f023 0206 	bic.w	r2, r3, #6
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	62da      	str	r2, [r3, #44]	@ 0x2c
 800182a:	e002      	b.n	8001832 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f06f 0202 	mvn.w	r2, #2
 8001842:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0220 	orr.w	r2, r2, #32
 8001852:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800185e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001862:	d113      	bne.n	800188c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001868:	4a11      	ldr	r2, [pc, #68]	@ (80018b0 <HAL_ADC_Start_IT+0x164>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d105      	bne.n	800187a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_ADC_Start_IT+0x168>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	e00c      	b.n	80018a6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	e003      	b.n	80018a6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40012800 	.word	0x40012800
 80018b4:	40012400 	.word	0x40012400

080018b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	d140      	bne.n	8001968 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d139      	bne.n	8001968 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001916:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800191a:	d11d      	bne.n	8001958 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001920:	2b00      	cmp	r3, #0
 8001922:	d119      	bne.n	8001958 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0220 	bic.w	r2, r2, #32
 8001932:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7fe ff99 	bl	8000890 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f06f 0212 	mvn.w	r2, #18
 8001966:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001972:	2b80      	cmp	r3, #128	@ 0x80
 8001974:	d14f      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b04      	cmp	r3, #4
 8001982:	d148      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001994:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80019a6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80019aa:	d012      	beq.n	80019d2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d125      	bne.n	8001a06 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019c4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019c8:	d11d      	bne.n	8001a06 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d119      	bne.n	8001a06 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d105      	bne.n	8001a06 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f9c1 	bl	8001d8e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f06f 020c 	mvn.w	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a20:	2b40      	cmp	r3, #64	@ 0x40
 8001a22:	d114      	bne.n	8001a4e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10d      	bne.n	8001a4e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a36:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f809 	bl	8001a56 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f06f 0201 	mvn.w	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x20>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e0dc      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x1da>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	d81c      	bhi.n	8001ad2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b05      	subs	r3, #5
 8001aaa:	221f      	movs	r2, #31
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4019      	ands	r1, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b05      	subs	r3, #5
 8001ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ad0:	e03c      	b.n	8001b4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d81c      	bhi.n	8001b14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b23      	subs	r3, #35	@ 0x23
 8001aec:	221f      	movs	r2, #31
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	4019      	ands	r1, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3b23      	subs	r3, #35	@ 0x23
 8001b06:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b12:	e01b      	b.n	8001b4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b41      	subs	r3, #65	@ 0x41
 8001b26:	221f      	movs	r2, #31
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b41      	subs	r3, #65	@ 0x41
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b09      	cmp	r3, #9
 8001b52:	d91c      	bls.n	8001b8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68d9      	ldr	r1, [r3, #12]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	3b1e      	subs	r3, #30
 8001b66:	2207      	movs	r2, #7
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4019      	ands	r1, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6898      	ldr	r0, [r3, #8]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b1e      	subs	r3, #30
 8001b80:	fa00 f203 	lsl.w	r2, r0, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	e019      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6919      	ldr	r1, [r3, #16]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6898      	ldr	r0, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d003      	beq.n	8001bd2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bce:	2b11      	cmp	r3, #17
 8001bd0:	d132      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c4c <HAL_ADC_ConfigChannel+0x1e4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d125      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d126      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001bf8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d11a      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c02:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a13      	ldr	r2, [pc, #76]	@ (8001c54 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	0c9a      	lsrs	r2, r3, #18
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c18:	e002      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f9      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x1b2>
 8001c26:	e007      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40012400 	.word	0x40012400
 8001c50:	20000024 	.word	0x20000024
 8001c54:	431bde83 	.word	0x431bde83

08001c58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d040      	beq.n	8001cf8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c86:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <ADC_Enable+0xac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d08 <ADC_Enable+0xb0>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	0c9b      	lsrs	r3, r3, #18
 8001c92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c94:	e002      	b.n	8001c9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ca2:	f7ff fc71 	bl	8001588 <HAL_GetTick>
 8001ca6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ca8:	e01f      	b.n	8001cea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001caa:	f7ff fc6d 	bl	8001588 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d918      	bls.n	8001cea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d011      	beq.n	8001cea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cca:	f043 0210 	orr.w	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	f043 0201 	orr.w	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e007      	b.n	8001cfa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d1d8      	bne.n	8001caa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000024 	.word	0x20000024
 8001d08:	431bde83 	.word	0x431bde83

08001d0c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d12e      	bne.n	8001d84 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d36:	f7ff fc27 	bl	8001588 <HAL_GetTick>
 8001d3a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d3c:	e01b      	b.n	8001d76 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d3e:	f7ff fc23 	bl	8001588 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d914      	bls.n	8001d76 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10d      	bne.n	8001d76 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	f043 0210 	orr.w	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e007      	b.n	8001d86 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d0dc      	beq.n	8001d3e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4906      	ldr	r1, [pc, #24]	@ (8001e38 <__NVIC_EnableIRQ+0x34>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	@ (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	@ 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff4f 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1c:	f7ff ff64 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	6978      	ldr	r0, [r7, #20]
 8001f28:	f7ff ffb2 	bl	8001e90 <NVIC_EncodePriority>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff81 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff57 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2204      	movs	r2, #4
 8001f78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e020      	b.n	8001fc8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 020e 	bic.w	r2, r2, #14
 8001f94:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d005      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2204      	movs	r2, #4
 8001fee:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	e051      	b.n	800209a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 020e 	bic.w	r2, r2, #14
 8002004:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a22      	ldr	r2, [pc, #136]	@ (80020a4 <HAL_DMA_Abort_IT+0xd0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d029      	beq.n	8002074 <HAL_DMA_Abort_IT+0xa0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a20      	ldr	r2, [pc, #128]	@ (80020a8 <HAL_DMA_Abort_IT+0xd4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d022      	beq.n	8002070 <HAL_DMA_Abort_IT+0x9c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <HAL_DMA_Abort_IT+0xd8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d01a      	beq.n	800206a <HAL_DMA_Abort_IT+0x96>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1d      	ldr	r2, [pc, #116]	@ (80020b0 <HAL_DMA_Abort_IT+0xdc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d012      	beq.n	8002064 <HAL_DMA_Abort_IT+0x90>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1c      	ldr	r2, [pc, #112]	@ (80020b4 <HAL_DMA_Abort_IT+0xe0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00a      	beq.n	800205e <HAL_DMA_Abort_IT+0x8a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1a      	ldr	r2, [pc, #104]	@ (80020b8 <HAL_DMA_Abort_IT+0xe4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d102      	bne.n	8002058 <HAL_DMA_Abort_IT+0x84>
 8002052:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002056:	e00e      	b.n	8002076 <HAL_DMA_Abort_IT+0xa2>
 8002058:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800205c:	e00b      	b.n	8002076 <HAL_DMA_Abort_IT+0xa2>
 800205e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002062:	e008      	b.n	8002076 <HAL_DMA_Abort_IT+0xa2>
 8002064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002068:	e005      	b.n	8002076 <HAL_DMA_Abort_IT+0xa2>
 800206a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206e:	e002      	b.n	8002076 <HAL_DMA_Abort_IT+0xa2>
 8002070:	2310      	movs	r3, #16
 8002072:	e000      	b.n	8002076 <HAL_DMA_Abort_IT+0xa2>
 8002074:	2301      	movs	r3, #1
 8002076:	4a11      	ldr	r2, [pc, #68]	@ (80020bc <HAL_DMA_Abort_IT+0xe8>)
 8002078:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
    } 
  }
  return status;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40020008 	.word	0x40020008
 80020a8:	4002001c 	.word	0x4002001c
 80020ac:	40020030 	.word	0x40020030
 80020b0:	40020044 	.word	0x40020044
 80020b4:	40020058 	.word	0x40020058
 80020b8:	4002006c 	.word	0x4002006c
 80020bc:	40020000 	.word	0x40020000

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b08b      	sub	sp, #44	@ 0x2c
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d2:	e169      	b.n	80023a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020d4:	2201      	movs	r2, #1
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f040 8158 	bne.w	80023a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a9a      	ldr	r2, [pc, #616]	@ (8002360 <HAL_GPIO_Init+0x2a0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d05e      	beq.n	80021ba <HAL_GPIO_Init+0xfa>
 80020fc:	4a98      	ldr	r2, [pc, #608]	@ (8002360 <HAL_GPIO_Init+0x2a0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d875      	bhi.n	80021ee <HAL_GPIO_Init+0x12e>
 8002102:	4a98      	ldr	r2, [pc, #608]	@ (8002364 <HAL_GPIO_Init+0x2a4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d058      	beq.n	80021ba <HAL_GPIO_Init+0xfa>
 8002108:	4a96      	ldr	r2, [pc, #600]	@ (8002364 <HAL_GPIO_Init+0x2a4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d86f      	bhi.n	80021ee <HAL_GPIO_Init+0x12e>
 800210e:	4a96      	ldr	r2, [pc, #600]	@ (8002368 <HAL_GPIO_Init+0x2a8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d052      	beq.n	80021ba <HAL_GPIO_Init+0xfa>
 8002114:	4a94      	ldr	r2, [pc, #592]	@ (8002368 <HAL_GPIO_Init+0x2a8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d869      	bhi.n	80021ee <HAL_GPIO_Init+0x12e>
 800211a:	4a94      	ldr	r2, [pc, #592]	@ (800236c <HAL_GPIO_Init+0x2ac>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d04c      	beq.n	80021ba <HAL_GPIO_Init+0xfa>
 8002120:	4a92      	ldr	r2, [pc, #584]	@ (800236c <HAL_GPIO_Init+0x2ac>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d863      	bhi.n	80021ee <HAL_GPIO_Init+0x12e>
 8002126:	4a92      	ldr	r2, [pc, #584]	@ (8002370 <HAL_GPIO_Init+0x2b0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d046      	beq.n	80021ba <HAL_GPIO_Init+0xfa>
 800212c:	4a90      	ldr	r2, [pc, #576]	@ (8002370 <HAL_GPIO_Init+0x2b0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d85d      	bhi.n	80021ee <HAL_GPIO_Init+0x12e>
 8002132:	2b12      	cmp	r3, #18
 8002134:	d82a      	bhi.n	800218c <HAL_GPIO_Init+0xcc>
 8002136:	2b12      	cmp	r3, #18
 8002138:	d859      	bhi.n	80021ee <HAL_GPIO_Init+0x12e>
 800213a:	a201      	add	r2, pc, #4	@ (adr r2, 8002140 <HAL_GPIO_Init+0x80>)
 800213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002140:	080021bb 	.word	0x080021bb
 8002144:	08002195 	.word	0x08002195
 8002148:	080021a7 	.word	0x080021a7
 800214c:	080021e9 	.word	0x080021e9
 8002150:	080021ef 	.word	0x080021ef
 8002154:	080021ef 	.word	0x080021ef
 8002158:	080021ef 	.word	0x080021ef
 800215c:	080021ef 	.word	0x080021ef
 8002160:	080021ef 	.word	0x080021ef
 8002164:	080021ef 	.word	0x080021ef
 8002168:	080021ef 	.word	0x080021ef
 800216c:	080021ef 	.word	0x080021ef
 8002170:	080021ef 	.word	0x080021ef
 8002174:	080021ef 	.word	0x080021ef
 8002178:	080021ef 	.word	0x080021ef
 800217c:	080021ef 	.word	0x080021ef
 8002180:	080021ef 	.word	0x080021ef
 8002184:	0800219d 	.word	0x0800219d
 8002188:	080021b1 	.word	0x080021b1
 800218c:	4a79      	ldr	r2, [pc, #484]	@ (8002374 <HAL_GPIO_Init+0x2b4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002192:	e02c      	b.n	80021ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	623b      	str	r3, [r7, #32]
          break;
 800219a:	e029      	b.n	80021f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	3304      	adds	r3, #4
 80021a2:	623b      	str	r3, [r7, #32]
          break;
 80021a4:	e024      	b.n	80021f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	3308      	adds	r3, #8
 80021ac:	623b      	str	r3, [r7, #32]
          break;
 80021ae:	e01f      	b.n	80021f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	330c      	adds	r3, #12
 80021b6:	623b      	str	r3, [r7, #32]
          break;
 80021b8:	e01a      	b.n	80021f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021c2:	2304      	movs	r3, #4
 80021c4:	623b      	str	r3, [r7, #32]
          break;
 80021c6:	e013      	b.n	80021f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d0:	2308      	movs	r3, #8
 80021d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	611a      	str	r2, [r3, #16]
          break;
 80021da:	e009      	b.n	80021f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021dc:	2308      	movs	r3, #8
 80021de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	615a      	str	r2, [r3, #20]
          break;
 80021e6:	e003      	b.n	80021f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
          break;
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_Init+0x130>
          break;
 80021ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2bff      	cmp	r3, #255	@ 0xff
 80021f4:	d801      	bhi.n	80021fa <HAL_GPIO_Init+0x13a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	e001      	b.n	80021fe <HAL_GPIO_Init+0x13e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3304      	adds	r3, #4
 80021fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2bff      	cmp	r3, #255	@ 0xff
 8002204:	d802      	bhi.n	800220c <HAL_GPIO_Init+0x14c>
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	e002      	b.n	8002212 <HAL_GPIO_Init+0x152>
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	3b08      	subs	r3, #8
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	210f      	movs	r1, #15
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	401a      	ands	r2, r3
 8002224:	6a39      	ldr	r1, [r7, #32]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	431a      	orrs	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80b1 	beq.w	80023a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002240:	4b4d      	ldr	r3, [pc, #308]	@ (8002378 <HAL_GPIO_Init+0x2b8>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	4a4c      	ldr	r2, [pc, #304]	@ (8002378 <HAL_GPIO_Init+0x2b8>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6193      	str	r3, [r2, #24]
 800224c:	4b4a      	ldr	r3, [pc, #296]	@ (8002378 <HAL_GPIO_Init+0x2b8>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002258:	4a48      	ldr	r2, [pc, #288]	@ (800237c <HAL_GPIO_Init+0x2bc>)
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002264:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a40      	ldr	r2, [pc, #256]	@ (8002380 <HAL_GPIO_Init+0x2c0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d013      	beq.n	80022ac <HAL_GPIO_Init+0x1ec>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3f      	ldr	r2, [pc, #252]	@ (8002384 <HAL_GPIO_Init+0x2c4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00d      	beq.n	80022a8 <HAL_GPIO_Init+0x1e8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3e      	ldr	r2, [pc, #248]	@ (8002388 <HAL_GPIO_Init+0x2c8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d007      	beq.n	80022a4 <HAL_GPIO_Init+0x1e4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3d      	ldr	r2, [pc, #244]	@ (800238c <HAL_GPIO_Init+0x2cc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_GPIO_Init+0x1e0>
 800229c:	2303      	movs	r3, #3
 800229e:	e006      	b.n	80022ae <HAL_GPIO_Init+0x1ee>
 80022a0:	2304      	movs	r3, #4
 80022a2:	e004      	b.n	80022ae <HAL_GPIO_Init+0x1ee>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e002      	b.n	80022ae <HAL_GPIO_Init+0x1ee>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_GPIO_Init+0x1ee>
 80022ac:	2300      	movs	r3, #0
 80022ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b0:	f002 0203 	and.w	r2, r2, #3
 80022b4:	0092      	lsls	r2, r2, #2
 80022b6:	4093      	lsls	r3, r2
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022be:	492f      	ldr	r1, [pc, #188]	@ (800237c <HAL_GPIO_Init+0x2bc>)
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	492c      	ldr	r1, [pc, #176]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]
 80022e4:	e006      	b.n	80022f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	4928      	ldr	r1, [pc, #160]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002300:	4b23      	ldr	r3, [pc, #140]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4922      	ldr	r1, [pc, #136]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800230e:	4b20      	ldr	r3, [pc, #128]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	43db      	mvns	r3, r3
 8002316:	491e      	ldr	r1, [pc, #120]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 8002318:	4013      	ands	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002328:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	4918      	ldr	r1, [pc, #96]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	608b      	str	r3, [r1, #8]
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002336:	4b16      	ldr	r3, [pc, #88]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	43db      	mvns	r3, r3
 800233e:	4914      	ldr	r1, [pc, #80]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 8002340:	4013      	ands	r3, r2
 8002342:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d021      	beq.n	8002394 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002350:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	490e      	ldr	r1, [pc, #56]	@ (8002390 <HAL_GPIO_Init+0x2d0>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	60cb      	str	r3, [r1, #12]
 800235c:	e021      	b.n	80023a2 <HAL_GPIO_Init+0x2e2>
 800235e:	bf00      	nop
 8002360:	10320000 	.word	0x10320000
 8002364:	10310000 	.word	0x10310000
 8002368:	10220000 	.word	0x10220000
 800236c:	10210000 	.word	0x10210000
 8002370:	10120000 	.word	0x10120000
 8002374:	10110000 	.word	0x10110000
 8002378:	40021000 	.word	0x40021000
 800237c:	40010000 	.word	0x40010000
 8002380:	40010800 	.word	0x40010800
 8002384:	40010c00 	.word	0x40010c00
 8002388:	40011000 	.word	0x40011000
 800238c:	40011400 	.word	0x40011400
 8002390:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_GPIO_Init+0x304>)
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	43db      	mvns	r3, r3
 800239c:	4909      	ldr	r1, [pc, #36]	@ (80023c4 <HAL_GPIO_Init+0x304>)
 800239e:	4013      	ands	r3, r2
 80023a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	3301      	adds	r3, #1
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f47f ae8e 	bne.w	80020d4 <HAL_GPIO_Init+0x14>
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	372c      	adds	r7, #44	@ 0x2c
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40010400 	.word	0x40010400

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023e4:	e003      	b.n	80023ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	041a      	lsls	r2, r3, #16
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43d9      	mvns	r1, r3
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	400b      	ands	r3, r1
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	611a      	str	r2, [r3, #16]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
	...

0800242c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002442:	4a05      	ldr	r2, [pc, #20]	@ (8002458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f806 	bl	800245c <HAL_GPIO_EXTI_Callback>
  }
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40010400 	.word	0x40010400

0800245c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e272      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002490:	4b92      	ldr	r3, [pc, #584]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b04      	cmp	r3, #4
 800249a:	d00c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800249c:	4b8f      	ldr	r3, [pc, #572]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d112      	bne.n	80024ce <HAL_RCC_OscConfig+0x5e>
 80024a8:	4b8c      	ldr	r3, [pc, #560]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b4:	d10b      	bne.n	80024ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b6:	4b89      	ldr	r3, [pc, #548]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d06c      	beq.n	800259c <HAL_RCC_OscConfig+0x12c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d168      	bne.n	800259c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e24c      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x76>
 80024d8:	4b80      	ldr	r3, [pc, #512]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a7f      	ldr	r2, [pc, #508]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e02e      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x98>
 80024ee:	4b7b      	ldr	r3, [pc, #492]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7a      	ldr	r2, [pc, #488]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b78      	ldr	r3, [pc, #480]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a77      	ldr	r2, [pc, #476]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0xbc>
 8002512:	4b72      	ldr	r3, [pc, #456]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a71      	ldr	r2, [pc, #452]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b6f      	ldr	r3, [pc, #444]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6e      	ldr	r2, [pc, #440]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 800252c:	4b6b      	ldr	r3, [pc, #428]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6a      	ldr	r2, [pc, #424]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b68      	ldr	r3, [pc, #416]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a67      	ldr	r2, [pc, #412]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002542:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff f81c 	bl	8001588 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff f818 	bl	8001588 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	@ 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e200      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b5d      	ldr	r3, [pc, #372]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xe4>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff f808 	bl	8001588 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff f804 	bl	8001588 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	@ 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1ec      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b53      	ldr	r3, [pc, #332]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x10c>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	4b4c      	ldr	r3, [pc, #304]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025b6:	4b49      	ldr	r3, [pc, #292]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x18c>
 80025c2:	4b46      	ldr	r3, [pc, #280]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b43      	ldr	r3, [pc, #268]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x176>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1c0      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b3d      	ldr	r3, [pc, #244]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4939      	ldr	r1, [pc, #228]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b36      	ldr	r3, [pc, #216]	@ (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7fe ffbd 	bl	8001588 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002612:	f7fe ffb9 	bl	8001588 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1a1      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b2d      	ldr	r3, [pc, #180]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4927      	ldr	r1, [pc, #156]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe ff9c 	bl	8001588 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002654:	f7fe ff98 	bl	8001588 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e180      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b1d      	ldr	r3, [pc, #116]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d03a      	beq.n	80026f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d019      	beq.n	80026ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <HAL_RCC_OscConfig+0x274>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268c:	f7fe ff7c 	bl	8001588 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7fe ff78 	bl	8001588 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e160      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f000 fb08 	bl	8002cc8 <RCC_Delay>
 80026b8:	e01c      	b.n	80026f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_RCC_OscConfig+0x274>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7fe ff62 	bl	8001588 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c6:	e00f      	b.n	80026e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe ff5e 	bl	8001588 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d908      	bls.n	80026e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e146      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	42420000 	.word	0x42420000
 80026e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b92      	ldr	r3, [pc, #584]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1e9      	bne.n	80026c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a6 	beq.w	800284e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b8b      	ldr	r3, [pc, #556]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	4b88      	ldr	r3, [pc, #544]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a87      	ldr	r2, [pc, #540]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271c:	61d3      	str	r3, [r2, #28]
 800271e:	4b85      	ldr	r3, [pc, #532]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b82      	ldr	r3, [pc, #520]	@ (8002938 <HAL_RCC_OscConfig+0x4c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b7f      	ldr	r3, [pc, #508]	@ (8002938 <HAL_RCC_OscConfig+0x4c8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7e      	ldr	r2, [pc, #504]	@ (8002938 <HAL_RCC_OscConfig+0x4c8>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7fe ff1f 	bl	8001588 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7fe ff1b 	bl	8001588 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	@ 0x64
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e103      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b75      	ldr	r3, [pc, #468]	@ (8002938 <HAL_RCC_OscConfig+0x4c8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x312>
 8002774:	4b6f      	ldr	r3, [pc, #444]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4a6e      	ldr	r2, [pc, #440]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6213      	str	r3, [r2, #32]
 8002780:	e02d      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x334>
 800278a:	4b6a      	ldr	r3, [pc, #424]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4a69      	ldr	r2, [pc, #420]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6213      	str	r3, [r2, #32]
 8002796:	4b67      	ldr	r3, [pc, #412]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a66      	ldr	r2, [pc, #408]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0304 	bic.w	r3, r3, #4
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	e01c      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x356>
 80027ac:	4b61      	ldr	r3, [pc, #388]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a60      	ldr	r2, [pc, #384]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 80027c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	4b58      	ldr	r3, [pc, #352]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a57      	ldr	r2, [pc, #348]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e6:	f7fe fecf 	bl	8001588 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe fecb 	bl	8001588 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0b1      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	4b4b      	ldr	r3, [pc, #300]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ee      	beq.n	80027ee <HAL_RCC_OscConfig+0x37e>
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7fe feb9 	bl	8001588 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe feb5 	bl	8001588 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e09b      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	4b40      	ldr	r3, [pc, #256]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ee      	bne.n	800281a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b3c      	ldr	r3, [pc, #240]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a3b      	ldr	r2, [pc, #236]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800284c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8087 	beq.w	8002966 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002858:	4b36      	ldr	r3, [pc, #216]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d061      	beq.n	8002928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d146      	bne.n	80028fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286c:	4b33      	ldr	r3, [pc, #204]	@ (800293c <HAL_RCC_OscConfig+0x4cc>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe fe89 	bl	8001588 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe fe85 	bl	8001588 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e06d      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288c:	4b29      	ldr	r3, [pc, #164]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a0:	d108      	bne.n	80028b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028a2:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	4921      	ldr	r1, [pc, #132]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a19      	ldr	r1, [r3, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	430b      	orrs	r3, r1
 80028c6:	491b      	ldr	r1, [pc, #108]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7fe fe59 	bl	8001588 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7fe fe55 	bl	8001588 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e03d      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x46a>
 80028f8:	e035      	b.n	8002966 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fa:	4b10      	ldr	r3, [pc, #64]	@ (800293c <HAL_RCC_OscConfig+0x4cc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fe42 	bl	8001588 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fe3e 	bl	8001588 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e026      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x498>
 8002926:	e01e      	b.n	8002966 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d107      	bne.n	8002940 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e019      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
 800293c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x500>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	429a      	cmp	r2, r3
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0d0      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b6a      	ldr	r3, [pc, #424]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d910      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b67      	ldr	r3, [pc, #412]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	4965      	ldr	r1, [pc, #404]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b63      	ldr	r3, [pc, #396]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0b8      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d0:	4b59      	ldr	r3, [pc, #356]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a58      	ldr	r2, [pc, #352]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e8:	4b53      	ldr	r3, [pc, #332]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a52      	ldr	r2, [pc, #328]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b50      	ldr	r3, [pc, #320]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	494d      	ldr	r1, [pc, #308]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d040      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b47      	ldr	r3, [pc, #284]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d115      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e07f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b41      	ldr	r3, [pc, #260]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e073      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a42:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e06b      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a52:	4b39      	ldr	r3, [pc, #228]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4936      	ldr	r1, [pc, #216]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a64:	f7fe fd90 	bl	8001588 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7fe fd8c 	bl	8001588 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e053      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 020c 	and.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1eb      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a94:	4b27      	ldr	r3, [pc, #156]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d210      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 0207 	bic.w	r2, r3, #7
 8002aaa:	4922      	ldr	r1, [pc, #136]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b20      	ldr	r3, [pc, #128]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e032      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad0:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4916      	ldr	r1, [pc, #88]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aee:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	490e      	ldr	r1, [pc, #56]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b02:	f000 f821 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8002b06:	4602      	mov	r2, r0
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	490a      	ldr	r1, [pc, #40]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	5ccb      	ldrb	r3, [r1, r3]
 8002b16:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1a:	4a09      	ldr	r2, [pc, #36]	@ (8002b40 <HAL_RCC_ClockConfig+0x1cc>)
 8002b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <HAL_RCC_ClockConfig+0x1d0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fb8a 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40022000 	.word	0x40022000
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	080052fc 	.word	0x080052fc
 8002b40:	20000024 	.word	0x20000024
 8002b44:	20000028 	.word	0x20000028

08002b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b48:	b490      	push	{r4, r7}
 8002b4a:	b08a      	sub	sp, #40	@ 0x28
 8002b4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b4e:	4b29      	ldr	r3, [pc, #164]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002b50:	1d3c      	adds	r4, r7, #4
 8002b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b58:	f240 2301 	movw	r3, #513	@ 0x201
 8002b5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b72:	4b21      	ldr	r3, [pc, #132]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x40>
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x46>
 8002b86:	e02b      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b88:	4b1c      	ldr	r3, [pc, #112]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b8a:	623b      	str	r3, [r7, #32]
      break;
 8002b8c:	e02b      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	0c9b      	lsrs	r3, r3, #18
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3328      	adds	r3, #40	@ 0x28
 8002b98:	443b      	add	r3, r7
 8002b9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b9e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002baa:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	0c5b      	lsrs	r3, r3, #17
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	3328      	adds	r3, #40	@ 0x28
 8002bb6:	443b      	add	r3, r7
 8002bb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc2:	fb03 f202 	mul.w	r2, r3, r2
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bce:	e004      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	623b      	str	r3, [r7, #32]
      break;
 8002bde:	e002      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002be2:	623b      	str	r3, [r7, #32]
      break;
 8002be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3728      	adds	r7, #40	@ 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc90      	pop	{r4, r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	080052e4 	.word	0x080052e4
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	007a1200 	.word	0x007a1200
 8002c00:	003d0900 	.word	0x003d0900

08002c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b02      	ldr	r3, [pc, #8]	@ (8002c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000024 	.word	0x20000024

08002c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c1c:	f7ff fff2 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4903      	ldr	r1, [pc, #12]	@ (8002c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	0800530c 	.word	0x0800530c

08002c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c44:	f7ff ffde 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0adb      	lsrs	r3, r3, #11
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	@ (8002c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	0800530c 	.word	0x0800530c

08002c68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	220f      	movs	r2, #15
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c78:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c84:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0207 	and.w	r2, r3, #7
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40022000 	.word	0x40022000

08002cc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <RCC_Delay+0x34>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <RCC_Delay+0x38>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0a5b      	lsrs	r3, r3, #9
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce4:	bf00      	nop
  }
  while (Delay --);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1e5a      	subs	r2, r3, #1
 8002cea:	60fa      	str	r2, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f9      	bne.n	8002ce4 <RCC_Delay+0x1c>
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20000024 	.word	0x20000024
 8002d00:	10624dd3 	.word	0x10624dd3

08002d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d07d      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d20:	2300      	movs	r3, #0
 8002d22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d24:	4b4f      	ldr	r3, [pc, #316]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d30:	4b4c      	ldr	r3, [pc, #304]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4a4b      	ldr	r2, [pc, #300]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	61d3      	str	r3, [r2, #28]
 8002d3c:	4b49      	ldr	r3, [pc, #292]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b46      	ldr	r3, [pc, #280]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d118      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d58:	4b43      	ldr	r3, [pc, #268]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a42      	ldr	r2, [pc, #264]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d64:	f7fe fc10 	bl	8001588 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	e008      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe fc0c 	bl	8001588 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e06d      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d8a:	4b36      	ldr	r3, [pc, #216]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d02e      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d027      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002db2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dbe:	4a29      	ldr	r2, [pc, #164]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d014      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe fbdb 	bl	8001588 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe fbd7 	bl	8001588 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e036      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	4b1d      	ldr	r3, [pc, #116]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ee      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4917      	ldr	r1, [pc, #92]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e10:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e28:	4b0e      	ldr	r3, [pc, #56]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	490b      	ldr	r1, [pc, #44]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e46:	4b07      	ldr	r3, [pc, #28]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4904      	ldr	r1, [pc, #16]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	42420440 	.word	0x42420440

08002e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e041      	b.n	8002f06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f839 	bl	8002f0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	f000 f9b4 	bl	800321c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d001      	beq.n	8002f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e03a      	b.n	8002fae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a18      	ldr	r2, [pc, #96]	@ (8002fb8 <HAL_TIM_Base_Start_IT+0x98>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x58>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f62:	d009      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x58>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a14      	ldr	r2, [pc, #80]	@ (8002fbc <HAL_TIM_Base_Start_IT+0x9c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x58>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a13      	ldr	r2, [pc, #76]	@ (8002fc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d111      	bne.n	8002f9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d010      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e007      	b.n	8002fac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800

08002fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0202 	mvn.w	r2, #2
 8002ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8ed 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8e0 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8ef 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b04      	cmp	r3, #4
 800302c:	d122      	bne.n	8003074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b04      	cmp	r3, #4
 800303a:	d11b      	bne.n	8003074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0204 	mvn.w	r2, #4
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8c3 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8b6 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f8c5 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b08      	cmp	r3, #8
 8003080:	d122      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b08      	cmp	r3, #8
 800308e:	d11b      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0208 	mvn.w	r2, #8
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2204      	movs	r2, #4
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f899 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f88c 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f89b 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d122      	bne.n	800311c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d11b      	bne.n	800311c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0210 	mvn.w	r2, #16
 80030ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2208      	movs	r2, #8
 80030f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f86f 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 8003108:	e005      	b.n	8003116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f862 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f871 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0201 	mvn.w	r2, #1
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd ff3a 	bl	8000fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	2b80      	cmp	r3, #128	@ 0x80
 8003154:	d10e      	bne.n	8003174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003160:	2b80      	cmp	r3, #128	@ 0x80
 8003162:	d107      	bne.n	8003174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f8bf 	bl	80032f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317e:	2b40      	cmp	r3, #64	@ 0x40
 8003180:	d10e      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318c:	2b40      	cmp	r3, #64	@ 0x40
 800318e:	d107      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f835 	bl	800320a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d10e      	bne.n	80031cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d107      	bne.n	80031cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0220 	mvn.w	r2, #32
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f88a 	bl	80032e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a29      	ldr	r2, [pc, #164]	@ (80032d4 <TIM_Base_SetConfig+0xb8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00b      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323a:	d007      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a26      	ldr	r2, [pc, #152]	@ (80032d8 <TIM_Base_SetConfig+0xbc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a25      	ldr	r2, [pc, #148]	@ (80032dc <TIM_Base_SetConfig+0xc0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d108      	bne.n	800325e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <TIM_Base_SetConfig+0xb8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00b      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326c:	d007      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a19      	ldr	r2, [pc, #100]	@ (80032d8 <TIM_Base_SetConfig+0xbc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d003      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a18      	ldr	r2, [pc, #96]	@ (80032dc <TIM_Base_SetConfig+0xc0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <TIM_Base_SetConfig+0xb8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	615a      	str	r2, [r3, #20]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800

080032e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e03f      	b.n	8003396 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd ff3a 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	@ 0x24
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fbed 	bl	8003b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800335c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800336c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800337c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	4613      	mov	r3, r2
 80033aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d130      	bne.n	800341a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_UART_Transmit_IT+0x26>
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e029      	b.n	800341c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Transmit_IT+0x38>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e022      	b.n	800341c <HAL_UART_Transmit_IT+0x7e>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	88fa      	ldrh	r2, [r7, #6]
 80033e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	88fa      	ldrh	r2, [r7, #6]
 80033ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2221      	movs	r2, #33	@ 0x21
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003414:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
  }
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	4613      	mov	r3, r2
 8003432:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b20      	cmp	r3, #32
 800343e:	d11d      	bne.n	800347c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_UART_Receive_IT+0x26>
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e016      	b.n	800347e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_UART_Receive_IT+0x38>
 800345a:	2302      	movs	r3, #2
 800345c:	e00f      	b.n	800347e <HAL_UART_Receive_IT+0x58>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	461a      	mov	r2, r3
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f9cf 	bl	8003816 <UART_Start_Receive_IT>
 8003478:	4603      	mov	r3, r0
 800347a:	e000      	b.n	800347e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	@ 0x28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_UART_IRQHandler+0x52>
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa7f 	bl	80039d6 <UART_Receive_IT>
      return;
 80034d8:	e17b      	b.n	80037d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80b1 	beq.w	8003644 <HAL_UART_IRQHandler+0x1bc>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_UART_IRQHandler+0x70>
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80a6 	beq.w	8003644 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_UART_IRQHandler+0x90>
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	f043 0201 	orr.w	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_UART_IRQHandler+0xb0>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	f043 0202 	orr.w	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_UART_IRQHandler+0xd0>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	f043 0204 	orr.w	r2, r3, #4
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00f      	beq.n	8003582 <HAL_UART_IRQHandler+0xfa>
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d104      	bne.n	8003576 <HAL_UART_IRQHandler+0xee>
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	f043 0208 	orr.w	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 811e 	beq.w	80037c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <HAL_UART_IRQHandler+0x11e>
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fa18 	bl	80039d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <HAL_UART_IRQHandler+0x146>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d031      	beq.n	8003632 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f95a 	bl	8003888 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d023      	beq.n	800362a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d013      	beq.n	8003622 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fe:	4a76      	ldr	r2, [pc, #472]	@ (80037d8 <HAL_UART_IRQHandler+0x350>)
 8003600:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fce4 	bl	8001fd4 <HAL_DMA_Abort_IT>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800361c:	4610      	mov	r0, r2
 800361e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003620:	e00e      	b.n	8003640 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8e3 	bl	80037ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003628:	e00a      	b.n	8003640 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8df 	bl	80037ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003630:	e006      	b.n	8003640 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8db 	bl	80037ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800363e:	e0c3      	b.n	80037c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003640:	bf00      	nop
    return;
 8003642:	e0c1      	b.n	80037c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	2b01      	cmp	r3, #1
 800364a:	f040 80a1 	bne.w	8003790 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 809b 	beq.w	8003790 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8095 	beq.w	8003790 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d04e      	beq.n	8003728 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003694:	8a3b      	ldrh	r3, [r7, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8098 	beq.w	80037cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036a0:	8a3a      	ldrh	r2, [r7, #16]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	f080 8092 	bcs.w	80037cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8a3a      	ldrh	r2, [r7, #16]
 80036ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d02b      	beq.n	8003710 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0210 	bic.w	r2, r2, #16
 8003704:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe fc27 	bl	8001f5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003718:	b29b      	uxth	r3, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	b29b      	uxth	r3, r3
 800371e:	4619      	mov	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f86d 	bl	8003800 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003726:	e051      	b.n	80037cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003730:	b29b      	uxth	r3, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d047      	beq.n	80037d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003740:	8a7b      	ldrh	r3, [r7, #18]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d044      	beq.n	80037d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003754:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0210 	bic.w	r2, r2, #16
 8003782:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003784:	8a7b      	ldrh	r3, [r7, #18]
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f839 	bl	8003800 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800378e:	e01f      	b.n	80037d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_UART_IRQHandler+0x324>
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8af 	bl	8003908 <UART_Transmit_IT>
    return;
 80037aa:	e012      	b.n	80037d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <HAL_UART_IRQHandler+0x34a>
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8f0 	bl	80039a6 <UART_EndTransmit_IT>
    return;
 80037c6:	e004      	b.n	80037d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80037c8:	bf00      	nop
 80037ca:	e002      	b.n	80037d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80037cc:	bf00      	nop
 80037ce:	e000      	b.n	80037d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80037d0:	bf00      	nop
  }
}
 80037d2:	3728      	adds	r7, #40	@ 0x28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	080038e1 	.word	0x080038e1

080037dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	4613      	mov	r3, r2
 8003822:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	88fa      	ldrh	r2, [r7, #6]
 800382e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2222      	movs	r2, #34	@ 0x22
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800385a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0220 	orr.w	r2, r2, #32
 800387a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800389e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d107      	bne.n	80038c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0210 	bic.w	r2, r2, #16
 80038c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff ff77 	bl	80037ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b21      	cmp	r3, #33	@ 0x21
 800391a:	d13e      	bne.n	800399a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003924:	d114      	bne.n	8003950 <UART_Transmit_IT+0x48>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d110      	bne.n	8003950 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003942:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	1c9a      	adds	r2, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	621a      	str	r2, [r3, #32]
 800394e:	e008      	b.n	8003962 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	1c59      	adds	r1, r3, #1
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6211      	str	r1, [r2, #32]
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29b      	uxth	r3, r3
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4619      	mov	r1, r3
 8003970:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003984:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003994:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e000      	b.n	800399c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800399a:	2302      	movs	r3, #2
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ff08 	bl	80037dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b22      	cmp	r3, #34	@ 0x22
 80039e8:	f040 8099 	bne.w	8003b1e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f4:	d117      	bne.n	8003a26 <UART_Receive_IT+0x50>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d113      	bne.n	8003a26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a06:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	1c9a      	adds	r2, r3, #2
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a24:	e026      	b.n	8003a74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a38:	d007      	beq.n	8003a4a <UART_Receive_IT+0x74>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <UART_Receive_IT+0x82>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e008      	b.n	8003a6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4619      	mov	r1, r3
 8003a82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d148      	bne.n	8003b1a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0220 	bic.w	r2, r2, #32
 8003a96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d123      	bne.n	8003b10 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0210 	bic.w	r2, r2, #16
 8003adc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d10a      	bne.n	8003b02 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b06:	4619      	mov	r1, r3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fe79 	bl	8003800 <HAL_UARTEx_RxEventCallback>
 8003b0e:	e002      	b.n	8003b16 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fc ff39 	bl	8000988 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e002      	b.n	8003b20 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e000      	b.n	8003b20 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b62:	f023 030c 	bic.w	r3, r3, #12
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c3c <UART_SetConfig+0x114>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d103      	bne.n	8003b98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b90:	f7ff f856 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	e002      	b.n	8003b9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b98:	f7ff f83e 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8003b9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009a      	lsls	r2, r3, #2
 8003ba8:	441a      	add	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	4a22      	ldr	r2, [pc, #136]	@ (8003c40 <UART_SetConfig+0x118>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	0119      	lsls	r1, r3, #4
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009a      	lsls	r2, r3, #2
 8003bc8:	441a      	add	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c40 <UART_SetConfig+0x118>)
 8003bd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2064      	movs	r0, #100	@ 0x64
 8003bde:	fb00 f303 	mul.w	r3, r0, r3
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	3332      	adds	r3, #50	@ 0x32
 8003be8:	4a15      	ldr	r2, [pc, #84]	@ (8003c40 <UART_SetConfig+0x118>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bf4:	4419      	add	r1, r3
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009a      	lsls	r2, r3, #2
 8003c00:	441a      	add	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <UART_SetConfig+0x118>)
 8003c0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	2064      	movs	r0, #100	@ 0x64
 8003c16:	fb00 f303 	mul.w	r3, r0, r3
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	3332      	adds	r3, #50	@ 0x32
 8003c20:	4a07      	ldr	r2, [pc, #28]	@ (8003c40 <UART_SetConfig+0x118>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	f003 020f 	and.w	r2, r3, #15
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	440a      	add	r2, r1
 8003c32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40013800 	.word	0x40013800
 8003c40:	51eb851f 	.word	0x51eb851f

08003c44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c56:	2b84      	cmp	r3, #132	@ 0x84
 8003c58:	d005      	beq.n	8003c66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	3303      	adds	r3, #3
 8003c64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c76:	f000 faef 	bl	8004258 <vTaskStartScheduler>
  
  return osOK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c82:	b089      	sub	sp, #36	@ 0x24
 8003c84:	af04      	add	r7, sp, #16
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d020      	beq.n	8003cd4 <osThreadCreate+0x54>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01c      	beq.n	8003cd4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685c      	ldr	r4, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691e      	ldr	r6, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff ffc9 	bl	8003c44 <makeFreeRtosPriority>
 8003cb2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cbc:	9202      	str	r2, [sp, #8]
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	9100      	str	r1, [sp, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	4632      	mov	r2, r6
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 f8e8 	bl	8003e9e <xTaskCreateStatic>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e01c      	b.n	8003d0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685c      	ldr	r4, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ce0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ffab 	bl	8003c44 <makeFreeRtosPriority>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	f107 030c 	add.w	r3, r7, #12
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	9200      	str	r2, [sp, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4632      	mov	r2, r6
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f000 f92c 	bl	8003f5c <xTaskCreate>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d001      	beq.n	8003d0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e000      	b.n	8003d10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d18 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <osDelay+0x16>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	e000      	b.n	8003d30 <osDelay+0x18>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fa5b 	bl	80041ec <vTaskDelay>
  
  return osOK;
 8003d36:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f103 0208 	add.w	r2, r3, #8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f103 0208 	add.w	r2, r3, #8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f103 0208 	add.w	r2, r3, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d103      	bne.n	8003dfc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e00c      	b.n	8003e16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e002      	b.n	8003e0a <vListInsert+0x2e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d2f6      	bcs.n	8003e04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6892      	ldr	r2, [r2, #8]
 8003e62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6852      	ldr	r2, [r2, #4]
 8003e6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d103      	bne.n	8003e80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1e5a      	subs	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr

08003e9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b08e      	sub	sp, #56	@ 0x38
 8003ea2:	af04      	add	r7, sp, #16
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	61fb      	str	r3, [r7, #28]
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	e7fd      	b.n	8003ee4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ee8:	23a0      	movs	r3, #160	@ 0xa0
 8003eea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ef0:	d00b      	beq.n	8003f0a <xTaskCreateStatic+0x6c>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	61bb      	str	r3, [r7, #24]
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01e      	beq.n	8003f4e <xTaskCreateStatic+0xb0>
 8003f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01b      	beq.n	8003f4e <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9303      	str	r3, [sp, #12]
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	9302      	str	r3, [sp, #8]
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f851 	bl	8003fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f48:	f000 f8e6 	bl	8004118 <prvAddNewTaskToReadyList>
 8003f4c:	e001      	b.n	8003f52 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f52:	697b      	ldr	r3, [r7, #20]
	}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3728      	adds	r7, #40	@ 0x28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08c      	sub	sp, #48	@ 0x30
 8003f60:	af04      	add	r7, sp, #16
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fea5 	bl	8004cc0 <pvPortMalloc>
 8003f76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00e      	beq.n	8003f9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003f7e:	20a0      	movs	r0, #160	@ 0xa0
 8003f80:	f000 fe9e 	bl	8004cc0 <pvPortMalloc>
 8003f84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f92:	e005      	b.n	8003fa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f94:	6978      	ldr	r0, [r7, #20]
 8003f96:	f000 ff5b 	bl	8004e50 <vPortFree>
 8003f9a:	e001      	b.n	8003fa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d017      	beq.n	8003fd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9303      	str	r3, [sp, #12]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	9302      	str	r3, [sp, #8]
 8003fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f80f 	bl	8003fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fca:	69f8      	ldr	r0, [r7, #28]
 8003fcc:	f000 f8a4 	bl	8004118 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	e002      	b.n	8003fdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
	}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3720      	adds	r7, #32
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004000:	3b01      	subs	r3, #1
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f023 0307 	bic.w	r3, r3, #7
 800400e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	617b      	str	r3, [r7, #20]
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	e7fd      	b.n	800402e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	e012      	b.n	800405e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	7819      	ldrb	r1, [r3, #0]
 8004040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	3334      	adds	r3, #52	@ 0x34
 8004048:	460a      	mov	r2, r1
 800404a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	3301      	adds	r3, #1
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b0f      	cmp	r3, #15
 8004062:	d9e9      	bls.n	8004038 <prvInitialiseNewTask+0x50>
 8004064:	e000      	b.n	8004068 <prvInitialiseNewTask+0x80>
		{
			break;
 8004066:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004072:	2b06      	cmp	r3, #6
 8004074:	d901      	bls.n	800407a <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004076:	2306      	movs	r3, #6
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800407e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	2200      	movs	r2, #0
 800408a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408e:	3304      	adds	r3, #4
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fe74 	bl	8003d7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	3318      	adds	r3, #24
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fe6f 	bl	8003d7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	f1c3 0207 	rsb	r2, r3, #7
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b8:	2200      	movs	r2, #0
 80040ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80040c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c8:	334c      	adds	r3, #76	@ 0x4c
 80040ca:	224c      	movs	r2, #76	@ 0x4c
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 ffd4 	bl	800507c <memset>
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	4a0d      	ldr	r2, [pc, #52]	@ (800410c <prvInitialiseNewTask+0x124>)
 80040d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80040da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004110 <prvInitialiseNewTask+0x128>)
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
 80040e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004114 <prvInitialiseNewTask+0x12c>)
 80040e4:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	68f9      	ldr	r1, [r7, #12]
 80040ea:	69b8      	ldr	r0, [r7, #24]
 80040ec:	f000 fc38 	bl	8004960 <pxPortInitialiseStack>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80040f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004100:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004102:	bf00      	nop
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20001094 	.word	0x20001094
 8004110:	200010fc 	.word	0x200010fc
 8004114:	20001164 	.word	0x20001164

08004118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004120:	f000 fd0c 	bl	8004b3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004124:	4b2a      	ldr	r3, [pc, #168]	@ (80041d0 <prvAddNewTaskToReadyList+0xb8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	4a29      	ldr	r2, [pc, #164]	@ (80041d0 <prvAddNewTaskToReadyList+0xb8>)
 800412c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800412e:	4b29      	ldr	r3, [pc, #164]	@ (80041d4 <prvAddNewTaskToReadyList+0xbc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004136:	4a27      	ldr	r2, [pc, #156]	@ (80041d4 <prvAddNewTaskToReadyList+0xbc>)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800413c:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <prvAddNewTaskToReadyList+0xb8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d110      	bne.n	8004166 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004144:	f000 fade 	bl	8004704 <prvInitialiseTaskLists>
 8004148:	e00d      	b.n	8004166 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800414a:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <prvAddNewTaskToReadyList+0xc0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004152:	4b20      	ldr	r3, [pc, #128]	@ (80041d4 <prvAddNewTaskToReadyList+0xbc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	429a      	cmp	r2, r3
 800415e:	d802      	bhi.n	8004166 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004160:	4a1c      	ldr	r2, [pc, #112]	@ (80041d4 <prvAddNewTaskToReadyList+0xbc>)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004166:	4b1d      	ldr	r3, [pc, #116]	@ (80041dc <prvAddNewTaskToReadyList+0xc4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3301      	adds	r3, #1
 800416c:	4a1b      	ldr	r2, [pc, #108]	@ (80041dc <prvAddNewTaskToReadyList+0xc4>)
 800416e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	2201      	movs	r2, #1
 8004176:	409a      	lsls	r2, r3
 8004178:	4b19      	ldr	r3, [pc, #100]	@ (80041e0 <prvAddNewTaskToReadyList+0xc8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4313      	orrs	r3, r2
 800417e:	4a18      	ldr	r2, [pc, #96]	@ (80041e0 <prvAddNewTaskToReadyList+0xc8>)
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4a15      	ldr	r2, [pc, #84]	@ (80041e4 <prvAddNewTaskToReadyList+0xcc>)
 8004190:	441a      	add	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	4619      	mov	r1, r3
 8004198:	4610      	mov	r0, r2
 800419a:	f7ff fdfc 	bl	8003d96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800419e:	f000 fcfd 	bl	8004b9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <prvAddNewTaskToReadyList+0xc0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00e      	beq.n	80041c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041aa:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <prvAddNewTaskToReadyList+0xbc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d207      	bcs.n	80041c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <prvAddNewTaskToReadyList+0xd0>)
 80041ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000448 	.word	0x20000448
 80041d4:	20000348 	.word	0x20000348
 80041d8:	20000454 	.word	0x20000454
 80041dc:	20000464 	.word	0x20000464
 80041e0:	20000450 	.word	0x20000450
 80041e4:	2000034c 	.word	0x2000034c
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d018      	beq.n	8004230 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041fe:	4b14      	ldr	r3, [pc, #80]	@ (8004250 <vTaskDelay+0x64>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <vTaskDelay+0x32>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	60bb      	str	r3, [r7, #8]
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	e7fd      	b.n	800421a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800421e:	f000 f885 	bl	800432c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004222:	2100      	movs	r1, #0
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fb35 	bl	8004894 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800422a:	f000 f88d 	bl	8004348 <xTaskResumeAll>
 800422e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d107      	bne.n	8004246 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004236:	4b07      	ldr	r3, [pc, #28]	@ (8004254 <vTaskDelay+0x68>)
 8004238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004246:	bf00      	nop
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000470 	.word	0x20000470
 8004254:	e000ed04 	.word	0xe000ed04

08004258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	@ 0x28
 800425c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004266:	463a      	mov	r2, r7
 8004268:	1d39      	adds	r1, r7, #4
 800426a:	f107 0308 	add.w	r3, r7, #8
 800426e:	4618      	mov	r0, r3
 8004270:	f7fb ff74 	bl	800015c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004274:	6839      	ldr	r1, [r7, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	9202      	str	r2, [sp, #8]
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	2300      	movs	r3, #0
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2300      	movs	r3, #0
 8004284:	460a      	mov	r2, r1
 8004286:	4921      	ldr	r1, [pc, #132]	@ (800430c <vTaskStartScheduler+0xb4>)
 8004288:	4821      	ldr	r0, [pc, #132]	@ (8004310 <vTaskStartScheduler+0xb8>)
 800428a:	f7ff fe08 	bl	8003e9e <xTaskCreateStatic>
 800428e:	4603      	mov	r3, r0
 8004290:	4a20      	ldr	r2, [pc, #128]	@ (8004314 <vTaskStartScheduler+0xbc>)
 8004292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004294:	4b1f      	ldr	r3, [pc, #124]	@ (8004314 <vTaskStartScheduler+0xbc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800429c:	2301      	movs	r3, #1
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e001      	b.n	80042a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d11b      	bne.n	80042e4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	613b      	str	r3, [r7, #16]
}
 80042be:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042c0:	4b15      	ldr	r3, [pc, #84]	@ (8004318 <vTaskStartScheduler+0xc0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	334c      	adds	r3, #76	@ 0x4c
 80042c6:	4a15      	ldr	r2, [pc, #84]	@ (800431c <vTaskStartScheduler+0xc4>)
 80042c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042ca:	4b15      	ldr	r3, [pc, #84]	@ (8004320 <vTaskStartScheduler+0xc8>)
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295
 80042d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042d2:	4b14      	ldr	r3, [pc, #80]	@ (8004324 <vTaskStartScheduler+0xcc>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042d8:	4b13      	ldr	r3, [pc, #76]	@ (8004328 <vTaskStartScheduler+0xd0>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042de:	f000 fbbb 	bl	8004a58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042e2:	e00f      	b.n	8004304 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d10b      	bne.n	8004304 <vTaskStartScheduler+0xac>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	60fb      	str	r3, [r7, #12]
}
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <vTaskStartScheduler+0xa8>
}
 8004304:	bf00      	nop
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	080052f4 	.word	0x080052f4
 8004310:	080046d5 	.word	0x080046d5
 8004314:	2000046c 	.word	0x2000046c
 8004318:	20000348 	.word	0x20000348
 800431c:	20000034 	.word	0x20000034
 8004320:	20000468 	.word	0x20000468
 8004324:	20000454 	.word	0x20000454
 8004328:	2000044c 	.word	0x2000044c

0800432c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <vTaskSuspendAll+0x18>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	4a03      	ldr	r2, [pc, #12]	@ (8004344 <vTaskSuspendAll+0x18>)
 8004338:	6013      	str	r3, [r2, #0]
}
 800433a:	bf00      	nop
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000470 	.word	0x20000470

08004348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004356:	4b42      	ldr	r3, [pc, #264]	@ (8004460 <xTaskResumeAll+0x118>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <xTaskResumeAll+0x2e>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	603b      	str	r3, [r7, #0]
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	e7fd      	b.n	8004372 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004376:	f000 fbe1 	bl	8004b3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800437a:	4b39      	ldr	r3, [pc, #228]	@ (8004460 <xTaskResumeAll+0x118>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3b01      	subs	r3, #1
 8004380:	4a37      	ldr	r2, [pc, #220]	@ (8004460 <xTaskResumeAll+0x118>)
 8004382:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004384:	4b36      	ldr	r3, [pc, #216]	@ (8004460 <xTaskResumeAll+0x118>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d161      	bne.n	8004450 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800438c:	4b35      	ldr	r3, [pc, #212]	@ (8004464 <xTaskResumeAll+0x11c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05d      	beq.n	8004450 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004394:	e02e      	b.n	80043f4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004396:	4b34      	ldr	r3, [pc, #208]	@ (8004468 <xTaskResumeAll+0x120>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3318      	adds	r3, #24
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fd52 	bl	8003e4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fd4d 	bl	8003e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	2201      	movs	r2, #1
 80043b8:	409a      	lsls	r2, r3
 80043ba:	4b2c      	ldr	r3, [pc, #176]	@ (800446c <xTaskResumeAll+0x124>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	4a2a      	ldr	r2, [pc, #168]	@ (800446c <xTaskResumeAll+0x124>)
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4a27      	ldr	r2, [pc, #156]	@ (8004470 <xTaskResumeAll+0x128>)
 80043d2:	441a      	add	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f7ff fcdb 	bl	8003d96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e4:	4b23      	ldr	r3, [pc, #140]	@ (8004474 <xTaskResumeAll+0x12c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80043ee:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <xTaskResumeAll+0x130>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004468 <xTaskResumeAll+0x120>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1cc      	bne.n	8004396 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004402:	f000 fa23 	bl	800484c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004406:	4b1d      	ldr	r3, [pc, #116]	@ (800447c <xTaskResumeAll+0x134>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004412:	f000 f837 	bl	8004484 <xTaskIncrementTick>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800441c:	4b16      	ldr	r3, [pc, #88]	@ (8004478 <xTaskResumeAll+0x130>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3b01      	subs	r3, #1
 8004426:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f1      	bne.n	8004412 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800442e:	4b13      	ldr	r3, [pc, #76]	@ (800447c <xTaskResumeAll+0x134>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004434:	4b10      	ldr	r3, [pc, #64]	@ (8004478 <xTaskResumeAll+0x130>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800443c:	2301      	movs	r3, #1
 800443e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004440:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <xTaskResumeAll+0x138>)
 8004442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004450:	f000 fba4 	bl	8004b9c <vPortExitCritical>

	return xAlreadyYielded;
 8004454:	68bb      	ldr	r3, [r7, #8]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000470 	.word	0x20000470
 8004464:	20000448 	.word	0x20000448
 8004468:	20000408 	.word	0x20000408
 800446c:	20000450 	.word	0x20000450
 8004470:	2000034c 	.word	0x2000034c
 8004474:	20000348 	.word	0x20000348
 8004478:	2000045c 	.word	0x2000045c
 800447c:	20000458 	.word	0x20000458
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800448e:	4b55      	ldr	r3, [pc, #340]	@ (80045e4 <xTaskIncrementTick+0x160>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 8094 	bne.w	80045c0 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004498:	4b53      	ldr	r3, [pc, #332]	@ (80045e8 <xTaskIncrementTick+0x164>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044a0:	4a51      	ldr	r2, [pc, #324]	@ (80045e8 <xTaskIncrementTick+0x164>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d121      	bne.n	80044f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80044ac:	4b4f      	ldr	r3, [pc, #316]	@ (80045ec <xTaskIncrementTick+0x168>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	603b      	str	r3, [r7, #0]
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	e7fd      	b.n	80044ca <xTaskIncrementTick+0x46>
 80044ce:	4b47      	ldr	r3, [pc, #284]	@ (80045ec <xTaskIncrementTick+0x168>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	4b46      	ldr	r3, [pc, #280]	@ (80045f0 <xTaskIncrementTick+0x16c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a44      	ldr	r2, [pc, #272]	@ (80045ec <xTaskIncrementTick+0x168>)
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4a44      	ldr	r2, [pc, #272]	@ (80045f0 <xTaskIncrementTick+0x16c>)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b44      	ldr	r3, [pc, #272]	@ (80045f4 <xTaskIncrementTick+0x170>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a42      	ldr	r2, [pc, #264]	@ (80045f4 <xTaskIncrementTick+0x170>)
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	f000 f9ae 	bl	800484c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044f0:	4b41      	ldr	r3, [pc, #260]	@ (80045f8 <xTaskIncrementTick+0x174>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d34d      	bcc.n	8004596 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044fa:	4b3c      	ldr	r3, [pc, #240]	@ (80045ec <xTaskIncrementTick+0x168>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <xTaskIncrementTick+0x84>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <xTaskIncrementTick+0x86>
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d004      	beq.n	8004518 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450e:	4b3a      	ldr	r3, [pc, #232]	@ (80045f8 <xTaskIncrementTick+0x174>)
 8004510:	f04f 32ff 	mov.w	r2, #4294967295
 8004514:	601a      	str	r2, [r3, #0]
					break;
 8004516:	e03e      	b.n	8004596 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004518:	4b34      	ldr	r3, [pc, #208]	@ (80045ec <xTaskIncrementTick+0x168>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d203      	bcs.n	8004538 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004530:	4a31      	ldr	r2, [pc, #196]	@ (80045f8 <xTaskIncrementTick+0x174>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6013      	str	r3, [r2, #0]
						break;
 8004536:	e02e      	b.n	8004596 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	3304      	adds	r3, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff fc85 	bl	8003e4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	3318      	adds	r3, #24
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fc7c 	bl	8003e4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	2201      	movs	r2, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	4b27      	ldr	r3, [pc, #156]	@ (80045fc <xTaskIncrementTick+0x178>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4313      	orrs	r3, r2
 8004562:	4a26      	ldr	r2, [pc, #152]	@ (80045fc <xTaskIncrementTick+0x178>)
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4a23      	ldr	r2, [pc, #140]	@ (8004600 <xTaskIncrementTick+0x17c>)
 8004574:	441a      	add	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f7ff fc0a 	bl	8003d96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004586:	4b1f      	ldr	r3, [pc, #124]	@ (8004604 <xTaskIncrementTick+0x180>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	429a      	cmp	r2, r3
 800458e:	d3b4      	bcc.n	80044fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004590:	2301      	movs	r3, #1
 8004592:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004594:	e7b1      	b.n	80044fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004596:	4b1b      	ldr	r3, [pc, #108]	@ (8004604 <xTaskIncrementTick+0x180>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800459c:	4918      	ldr	r1, [pc, #96]	@ (8004600 <xTaskIncrementTick+0x17c>)
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d901      	bls.n	80045b2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80045ae:	2301      	movs	r3, #1
 80045b0:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80045b2:	4b15      	ldr	r3, [pc, #84]	@ (8004608 <xTaskIncrementTick+0x184>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <xTaskIncrementTick+0x14a>
			{
				vApplicationTickHook();
 80045ba:	f7fb fdc9 	bl	8000150 <vApplicationTickHook>
 80045be:	e006      	b.n	80045ce <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045c0:	4b11      	ldr	r3, [pc, #68]	@ (8004608 <xTaskIncrementTick+0x184>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3301      	adds	r3, #1
 80045c6:	4a10      	ldr	r2, [pc, #64]	@ (8004608 <xTaskIncrementTick+0x184>)
 80045c8:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80045ca:	f7fb fdc1 	bl	8000150 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045ce:	4b0f      	ldr	r3, [pc, #60]	@ (800460c <xTaskIncrementTick+0x188>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <xTaskIncrementTick+0x156>
		{
			xSwitchRequired = pdTRUE;
 80045d6:	2301      	movs	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045da:	697b      	ldr	r3, [r7, #20]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20000470 	.word	0x20000470
 80045e8:	2000044c 	.word	0x2000044c
 80045ec:	20000400 	.word	0x20000400
 80045f0:	20000404 	.word	0x20000404
 80045f4:	20000460 	.word	0x20000460
 80045f8:	20000468 	.word	0x20000468
 80045fc:	20000450 	.word	0x20000450
 8004600:	2000034c 	.word	0x2000034c
 8004604:	20000348 	.word	0x20000348
 8004608:	20000458 	.word	0x20000458
 800460c:	2000045c 	.word	0x2000045c

08004610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004616:	4b29      	ldr	r3, [pc, #164]	@ (80046bc <vTaskSwitchContext+0xac>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800461e:	4b28      	ldr	r3, [pc, #160]	@ (80046c0 <vTaskSwitchContext+0xb0>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004624:	e045      	b.n	80046b2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004626:	4b26      	ldr	r3, [pc, #152]	@ (80046c0 <vTaskSwitchContext+0xb0>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800462c:	4b25      	ldr	r3, [pc, #148]	@ (80046c4 <vTaskSwitchContext+0xb4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	fab3 f383 	clz	r3, r3
 8004638:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800463a:	7afb      	ldrb	r3, [r7, #11]
 800463c:	f1c3 031f 	rsb	r3, r3, #31
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	4921      	ldr	r1, [pc, #132]	@ (80046c8 <vTaskSwitchContext+0xb8>)
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	607b      	str	r3, [r7, #4]
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	e7fd      	b.n	800466a <vTaskSwitchContext+0x5a>
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4a13      	ldr	r2, [pc, #76]	@ (80046c8 <vTaskSwitchContext+0xb8>)
 800467a:	4413      	add	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3308      	adds	r3, #8
 8004690:	429a      	cmp	r2, r3
 8004692:	d104      	bne.n	800469e <vTaskSwitchContext+0x8e>
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4a09      	ldr	r2, [pc, #36]	@ (80046cc <vTaskSwitchContext+0xbc>)
 80046a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046a8:	4b08      	ldr	r3, [pc, #32]	@ (80046cc <vTaskSwitchContext+0xbc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	334c      	adds	r3, #76	@ 0x4c
 80046ae:	4a08      	ldr	r2, [pc, #32]	@ (80046d0 <vTaskSwitchContext+0xc0>)
 80046b0:	6013      	str	r3, [r2, #0]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	20000470 	.word	0x20000470
 80046c0:	2000045c 	.word	0x2000045c
 80046c4:	20000450 	.word	0x20000450
 80046c8:	2000034c 	.word	0x2000034c
 80046cc:	20000348 	.word	0x20000348
 80046d0:	20000034 	.word	0x20000034

080046d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046dc:	f000 f852 	bl	8004784 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046e0:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <prvIdleTask+0x28>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d9f9      	bls.n	80046dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80046e8:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <prvIdleTask+0x2c>)
 80046ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046f8:	e7f0      	b.n	80046dc <prvIdleTask+0x8>
 80046fa:	bf00      	nop
 80046fc:	2000034c 	.word	0x2000034c
 8004700:	e000ed04 	.word	0xe000ed04

08004704 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800470a:	2300      	movs	r3, #0
 800470c:	607b      	str	r3, [r7, #4]
 800470e:	e00c      	b.n	800472a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4a12      	ldr	r2, [pc, #72]	@ (8004764 <prvInitialiseTaskLists+0x60>)
 800471c:	4413      	add	r3, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fb0e 	bl	8003d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3301      	adds	r3, #1
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b06      	cmp	r3, #6
 800472e:	d9ef      	bls.n	8004710 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004730:	480d      	ldr	r0, [pc, #52]	@ (8004768 <prvInitialiseTaskLists+0x64>)
 8004732:	f7ff fb05 	bl	8003d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004736:	480d      	ldr	r0, [pc, #52]	@ (800476c <prvInitialiseTaskLists+0x68>)
 8004738:	f7ff fb02 	bl	8003d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800473c:	480c      	ldr	r0, [pc, #48]	@ (8004770 <prvInitialiseTaskLists+0x6c>)
 800473e:	f7ff faff 	bl	8003d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004742:	480c      	ldr	r0, [pc, #48]	@ (8004774 <prvInitialiseTaskLists+0x70>)
 8004744:	f7ff fafc 	bl	8003d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004748:	480b      	ldr	r0, [pc, #44]	@ (8004778 <prvInitialiseTaskLists+0x74>)
 800474a:	f7ff faf9 	bl	8003d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800474e:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <prvInitialiseTaskLists+0x78>)
 8004750:	4a05      	ldr	r2, [pc, #20]	@ (8004768 <prvInitialiseTaskLists+0x64>)
 8004752:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004754:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <prvInitialiseTaskLists+0x7c>)
 8004756:	4a05      	ldr	r2, [pc, #20]	@ (800476c <prvInitialiseTaskLists+0x68>)
 8004758:	601a      	str	r2, [r3, #0]
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	2000034c 	.word	0x2000034c
 8004768:	200003d8 	.word	0x200003d8
 800476c:	200003ec 	.word	0x200003ec
 8004770:	20000408 	.word	0x20000408
 8004774:	2000041c 	.word	0x2000041c
 8004778:	20000434 	.word	0x20000434
 800477c:	20000400 	.word	0x20000400
 8004780:	20000404 	.word	0x20000404

08004784 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800478a:	e019      	b.n	80047c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800478c:	f000 f9d6 	bl	8004b3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004790:	4b10      	ldr	r3, [pc, #64]	@ (80047d4 <prvCheckTasksWaitingTermination+0x50>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fb55 	bl	8003e4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047a2:	4b0d      	ldr	r3, [pc, #52]	@ (80047d8 <prvCheckTasksWaitingTermination+0x54>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	4a0b      	ldr	r2, [pc, #44]	@ (80047d8 <prvCheckTasksWaitingTermination+0x54>)
 80047aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047ac:	4b0b      	ldr	r3, [pc, #44]	@ (80047dc <prvCheckTasksWaitingTermination+0x58>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	4a0a      	ldr	r2, [pc, #40]	@ (80047dc <prvCheckTasksWaitingTermination+0x58>)
 80047b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047b6:	f000 f9f1 	bl	8004b9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f810 	bl	80047e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047c0:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <prvCheckTasksWaitingTermination+0x58>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e1      	bne.n	800478c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	2000041c 	.word	0x2000041c
 80047d8:	20000448 	.word	0x20000448
 80047dc:	20000430 	.word	0x20000430

080047e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	334c      	adds	r3, #76	@ 0x4c
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fc4d 	bl	800508c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d108      	bne.n	800480e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fb25 	bl	8004e50 <vPortFree>
				vPortFree( pxTCB );
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fb22 	bl	8004e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800480c:	e019      	b.n	8004842 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004814:	2b01      	cmp	r3, #1
 8004816:	d103      	bne.n	8004820 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb19 	bl	8004e50 <vPortFree>
	}
 800481e:	e010      	b.n	8004842 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004826:	2b02      	cmp	r3, #2
 8004828:	d00b      	beq.n	8004842 <prvDeleteTCB+0x62>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	60fb      	str	r3, [r7, #12]
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	e7fd      	b.n	800483e <prvDeleteTCB+0x5e>
	}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004852:	4b0e      	ldr	r3, [pc, #56]	@ (800488c <prvResetNextTaskUnblockTime+0x40>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <prvResetNextTaskUnblockTime+0x14>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <prvResetNextTaskUnblockTime+0x16>
 8004860:	2300      	movs	r3, #0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004866:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <prvResetNextTaskUnblockTime+0x44>)
 8004868:	f04f 32ff 	mov.w	r2, #4294967295
 800486c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800486e:	e008      	b.n	8004882 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <prvResetNextTaskUnblockTime+0x40>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4a04      	ldr	r2, [pc, #16]	@ (8004890 <prvResetNextTaskUnblockTime+0x44>)
 8004880:	6013      	str	r3, [r2, #0]
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	20000400 	.word	0x20000400
 8004890:	20000468 	.word	0x20000468

08004894 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800489e:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <prvAddCurrentTaskToDelayedList+0xb0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048a4:	4b28      	ldr	r3, [pc, #160]	@ (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff face 	bl	8003e4c <uxListRemove>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10b      	bne.n	80048ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80048b6:	4b24      	ldr	r3, [pc, #144]	@ (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	2201      	movs	r2, #1
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43da      	mvns	r2, r3
 80048c4:	4b21      	ldr	r3, [pc, #132]	@ (800494c <prvAddCurrentTaskToDelayedList+0xb8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4013      	ands	r3, r2
 80048ca:	4a20      	ldr	r2, [pc, #128]	@ (800494c <prvAddCurrentTaskToDelayedList+0xb8>)
 80048cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d10a      	bne.n	80048ec <prvAddCurrentTaskToDelayedList+0x58>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	481a      	ldr	r0, [pc, #104]	@ (8004950 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048e6:	f7ff fa56 	bl	8003d96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048ea:	e026      	b.n	800493a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048f4:	4b14      	ldr	r3, [pc, #80]	@ (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	429a      	cmp	r2, r3
 8004902:	d209      	bcs.n	8004918 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004904:	4b13      	ldr	r3, [pc, #76]	@ (8004954 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3304      	adds	r3, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7ff fa63 	bl	8003ddc <vListInsert>
}
 8004916:	e010      	b.n	800493a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004918:	4b0f      	ldr	r3, [pc, #60]	@ (8004958 <prvAddCurrentTaskToDelayedList+0xc4>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3304      	adds	r3, #4
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f7ff fa59 	bl	8003ddc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800492a:	4b0c      	ldr	r3, [pc, #48]	@ (800495c <prvAddCurrentTaskToDelayedList+0xc8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	d202      	bcs.n	800493a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004934:	4a09      	ldr	r2, [pc, #36]	@ (800495c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6013      	str	r3, [r2, #0]
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	2000044c 	.word	0x2000044c
 8004948:	20000348 	.word	0x20000348
 800494c:	20000450 	.word	0x20000450
 8004950:	20000434 	.word	0x20000434
 8004954:	20000404 	.word	0x20000404
 8004958:	20000400 	.word	0x20000400
 800495c:	20000468 	.word	0x20000468

08004960 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b04      	subs	r3, #4
 8004970:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b04      	subs	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3b04      	subs	r3, #4
 800498e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004990:	4a08      	ldr	r2, [pc, #32]	@ (80049b4 <pxPortInitialiseStack+0x54>)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3b14      	subs	r3, #20
 800499a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b20      	subs	r3, #32
 80049a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049a8:	68fb      	ldr	r3, [r7, #12]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	080049b9 	.word	0x080049b9

080049b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049c2:	4b12      	ldr	r3, [pc, #72]	@ (8004a0c <prvTaskExitError+0x54>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ca:	d00b      	beq.n	80049e4 <prvTaskExitError+0x2c>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	60fb      	str	r3, [r7, #12]
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	e7fd      	b.n	80049e0 <prvTaskExitError+0x28>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	60bb      	str	r3, [r7, #8]
}
 80049f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049f8:	bf00      	nop
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0fc      	beq.n	80049fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	20000030 	.word	0x20000030

08004a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a10:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <pxCurrentTCBConst2>)
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	6808      	ldr	r0, [r1, #0]
 8004a16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a1a:	f380 8809 	msr	PSP, r0
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8811 	msr	BASEPRI, r0
 8004a2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004a2e:	4770      	bx	lr

08004a30 <pxCurrentTCBConst2>:
 8004a30:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop

08004a38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004a38:	4806      	ldr	r0, [pc, #24]	@ (8004a54 <prvPortStartFirstTask+0x1c>)
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	6800      	ldr	r0, [r0, #0]
 8004a3e:	f380 8808 	msr	MSP, r0
 8004a42:	b662      	cpsie	i
 8004a44:	b661      	cpsie	f
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	df00      	svc	0
 8004a50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a52:	bf00      	nop
 8004a54:	e000ed08 	.word	0xe000ed08

08004a58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a5e:	4b32      	ldr	r3, [pc, #200]	@ (8004b28 <xPortStartScheduler+0xd0>)
 8004a60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	22ff      	movs	r2, #255	@ 0xff
 8004a6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	4b2a      	ldr	r3, [pc, #168]	@ (8004b2c <xPortStartScheduler+0xd4>)
 8004a84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a86:	4b2a      	ldr	r3, [pc, #168]	@ (8004b30 <xPortStartScheduler+0xd8>)
 8004a88:	2207      	movs	r2, #7
 8004a8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a8c:	e009      	b.n	8004aa2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a8e:	4b28      	ldr	r3, [pc, #160]	@ (8004b30 <xPortStartScheduler+0xd8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	4a26      	ldr	r2, [pc, #152]	@ (8004b30 <xPortStartScheduler+0xd8>)
 8004a96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aaa:	2b80      	cmp	r3, #128	@ 0x80
 8004aac:	d0ef      	beq.n	8004a8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aae:	4b20      	ldr	r3, [pc, #128]	@ (8004b30 <xPortStartScheduler+0xd8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1c3 0307 	rsb	r3, r3, #7
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d00b      	beq.n	8004ad2 <xPortStartScheduler+0x7a>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	60bb      	str	r3, [r7, #8]
}
 8004acc:	bf00      	nop
 8004ace:	bf00      	nop
 8004ad0:	e7fd      	b.n	8004ace <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ad2:	4b17      	ldr	r3, [pc, #92]	@ (8004b30 <xPortStartScheduler+0xd8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <xPortStartScheduler+0xd8>)
 8004ada:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004adc:	4b14      	ldr	r3, [pc, #80]	@ (8004b30 <xPortStartScheduler+0xd8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ae4:	4a12      	ldr	r2, [pc, #72]	@ (8004b30 <xPortStartScheduler+0xd8>)
 8004ae6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004af0:	4b10      	ldr	r3, [pc, #64]	@ (8004b34 <xPortStartScheduler+0xdc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a0f      	ldr	r2, [pc, #60]	@ (8004b34 <xPortStartScheduler+0xdc>)
 8004af6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004afa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004afc:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <xPortStartScheduler+0xdc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a0c      	ldr	r2, [pc, #48]	@ (8004b34 <xPortStartScheduler+0xdc>)
 8004b02:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b08:	f000 f8b8 	bl	8004c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b38 <xPortStartScheduler+0xe0>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b12:	f7ff ff91 	bl	8004a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b16:	f7ff fd7b 	bl	8004610 <vTaskSwitchContext>
	prvTaskExitError();
 8004b1a:	f7ff ff4d 	bl	80049b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	e000e400 	.word	0xe000e400
 8004b2c:	20000474 	.word	0x20000474
 8004b30:	20000478 	.word	0x20000478
 8004b34:	e000ed20 	.word	0xe000ed20
 8004b38:	20000030 	.word	0x20000030

08004b3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	607b      	str	r3, [r7, #4]
}
 8004b54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b56:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <vPortEnterCritical+0x58>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b94 <vPortEnterCritical+0x58>)
 8004b5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <vPortEnterCritical+0x58>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d110      	bne.n	8004b8a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b68:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <vPortEnterCritical+0x5c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <vPortEnterCritical+0x4e>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	603b      	str	r3, [r7, #0]
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop
 8004b88:	e7fd      	b.n	8004b86 <vPortEnterCritical+0x4a>
	}
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	20000030 	.word	0x20000030
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ba2:	4b12      	ldr	r3, [pc, #72]	@ (8004bec <vPortExitCritical+0x50>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <vPortExitCritical+0x26>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	607b      	str	r3, [r7, #4]
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	e7fd      	b.n	8004bbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bec <vPortExitCritical+0x50>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	4a08      	ldr	r2, [pc, #32]	@ (8004bec <vPortExitCritical+0x50>)
 8004bca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bcc:	4b07      	ldr	r3, [pc, #28]	@ (8004bec <vPortExitCritical+0x50>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <vPortExitCritical+0x44>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000030 	.word	0x20000030

08004bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bf0:	f3ef 8009 	mrs	r0, PSP
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <pxCurrentTCBConst>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c00:	6010      	str	r0, [r2, #0]
 8004c02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c06:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c0a:	f380 8811 	msr	BASEPRI, r0
 8004c0e:	f7ff fcff 	bl	8004610 <vTaskSwitchContext>
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8811 	msr	BASEPRI, r0
 8004c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	6808      	ldr	r0, [r1, #0]
 8004c22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c26:	f380 8809 	msr	PSP, r0
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	4770      	bx	lr

08004c30 <pxCurrentTCBConst>:
 8004c30:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	607b      	str	r3, [r7, #4]
}
 8004c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c52:	f7ff fc17 	bl	8004484 <xTaskIncrementTick>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	@ (8004c78 <SysTick_Handler+0x40>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	2300      	movs	r3, #0
 8004c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f383 8811 	msr	BASEPRI, r3
}
 8004c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c80:	4b0a      	ldr	r3, [pc, #40]	@ (8004cac <vPortSetupTimerInterrupt+0x30>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c86:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <vPortSetupTimerInterrupt+0x34>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c8c:	4b09      	ldr	r3, [pc, #36]	@ (8004cb4 <vPortSetupTimerInterrupt+0x38>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a09      	ldr	r2, [pc, #36]	@ (8004cb8 <vPortSetupTimerInterrupt+0x3c>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	4a08      	ldr	r2, [pc, #32]	@ (8004cbc <vPortSetupTimerInterrupt+0x40>)
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c9e:	4b03      	ldr	r3, [pc, #12]	@ (8004cac <vPortSetupTimerInterrupt+0x30>)
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	601a      	str	r2, [r3, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr
 8004cac:	e000e010 	.word	0xe000e010
 8004cb0:	e000e018 	.word	0xe000e018
 8004cb4:	20000024 	.word	0x20000024
 8004cb8:	10624dd3 	.word	0x10624dd3
 8004cbc:	e000e014 	.word	0xe000e014

08004cc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	@ 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ccc:	f7ff fb2e 	bl	800432c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e3c <pvPortMalloc+0x17c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cd8:	f000 f916 	bl	8004f08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cdc:	4b58      	ldr	r3, [pc, #352]	@ (8004e40 <pvPortMalloc+0x180>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f040 8090 	bne.w	8004e0a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01e      	beq.n	8004d2e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d015      	beq.n	8004d2e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f023 0307 	bic.w	r3, r3, #7
 8004d08:	3308      	adds	r3, #8
 8004d0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <pvPortMalloc+0x6e>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	617b      	str	r3, [r7, #20]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d06a      	beq.n	8004e0a <pvPortMalloc+0x14a>
 8004d34:	4b43      	ldr	r3, [pc, #268]	@ (8004e44 <pvPortMalloc+0x184>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d865      	bhi.n	8004e0a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d3e:	4b42      	ldr	r3, [pc, #264]	@ (8004e48 <pvPortMalloc+0x188>)
 8004d40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d42:	4b41      	ldr	r3, [pc, #260]	@ (8004e48 <pvPortMalloc+0x188>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d48:	e004      	b.n	8004d54 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d903      	bls.n	8004d66 <pvPortMalloc+0xa6>
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f1      	bne.n	8004d4a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d66:	4b35      	ldr	r3, [pc, #212]	@ (8004e3c <pvPortMalloc+0x17c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d04c      	beq.n	8004e0a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2208      	movs	r2, #8
 8004d76:	4413      	add	r3, r2
 8004d78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	1ad2      	subs	r2, r2, r3
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d920      	bls.n	8004dd4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00b      	beq.n	8004dbc <pvPortMalloc+0xfc>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	613b      	str	r3, [r7, #16]
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	1ad2      	subs	r2, r2, r3
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dce:	69b8      	ldr	r0, [r7, #24]
 8004dd0:	f000 f8fc 	bl	8004fcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e44 <pvPortMalloc+0x184>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <pvPortMalloc+0x184>)
 8004de0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004de2:	4b18      	ldr	r3, [pc, #96]	@ (8004e44 <pvPortMalloc+0x184>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4b19      	ldr	r3, [pc, #100]	@ (8004e4c <pvPortMalloc+0x18c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d203      	bcs.n	8004df6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dee:	4b15      	ldr	r3, [pc, #84]	@ (8004e44 <pvPortMalloc+0x184>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a16      	ldr	r2, [pc, #88]	@ (8004e4c <pvPortMalloc+0x18c>)
 8004df4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <pvPortMalloc+0x180>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e0a:	f7ff fa9d 	bl	8004348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <pvPortMalloc+0x170>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	60fb      	str	r3, [r7, #12]
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <pvPortMalloc+0x16c>
	return pvReturn;
 8004e30:	69fb      	ldr	r3, [r7, #28]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3728      	adds	r7, #40	@ 0x28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20001084 	.word	0x20001084
 8004e40:	20001090 	.word	0x20001090
 8004e44:	20001088 	.word	0x20001088
 8004e48:	2000107c 	.word	0x2000107c
 8004e4c:	2000108c 	.word	0x2000108c

08004e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d04a      	beq.n	8004ef8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e62:	2308      	movs	r3, #8
 8004e64:	425b      	negs	r3, r3
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4413      	add	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	4b22      	ldr	r3, [pc, #136]	@ (8004f00 <vPortFree+0xb0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10b      	bne.n	8004e96 <vPortFree+0x46>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	60fb      	str	r3, [r7, #12]
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	e7fd      	b.n	8004e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <vPortFree+0x66>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60bb      	str	r3, [r7, #8]
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	e7fd      	b.n	8004eb2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	4b11      	ldr	r3, [pc, #68]	@ (8004f00 <vPortFree+0xb0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d019      	beq.n	8004ef8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d115      	bne.n	8004ef8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f00 <vPortFree+0xb0>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004edc:	f7ff fa26 	bl	800432c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	4b07      	ldr	r3, [pc, #28]	@ (8004f04 <vPortFree+0xb4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	4a06      	ldr	r2, [pc, #24]	@ (8004f04 <vPortFree+0xb4>)
 8004eec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eee:	6938      	ldr	r0, [r7, #16]
 8004ef0:	f000 f86c 	bl	8004fcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ef4:	f7ff fa28 	bl	8004348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ef8:	bf00      	nop
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20001090 	.word	0x20001090
 8004f04:	20001088 	.word	0x20001088

08004f08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004f12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f14:	4b27      	ldr	r3, [pc, #156]	@ (8004fb4 <prvHeapInit+0xac>)
 8004f16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00c      	beq.n	8004f3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3307      	adds	r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0307 	bic.w	r3, r3, #7
 8004f2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb4 <prvHeapInit+0xac>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f40:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb8 <prvHeapInit+0xb0>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f46:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb8 <prvHeapInit+0xb0>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f54:	2208      	movs	r2, #8
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0307 	bic.w	r3, r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a15      	ldr	r2, [pc, #84]	@ (8004fbc <prvHeapInit+0xb4>)
 8004f68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f6a:	4b14      	ldr	r3, [pc, #80]	@ (8004fbc <prvHeapInit+0xb4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f72:	4b12      	ldr	r3, [pc, #72]	@ (8004fbc <prvHeapInit+0xb4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	1ad2      	subs	r2, r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f88:	4b0c      	ldr	r3, [pc, #48]	@ (8004fbc <prvHeapInit+0xb4>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc0 <prvHeapInit+0xb8>)
 8004f96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	4a09      	ldr	r2, [pc, #36]	@ (8004fc4 <prvHeapInit+0xbc>)
 8004f9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fa0:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <prvHeapInit+0xc0>)
 8004fa2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004fa6:	601a      	str	r2, [r3, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	2000047c 	.word	0x2000047c
 8004fb8:	2000107c 	.word	0x2000107c
 8004fbc:	20001084 	.word	0x20001084
 8004fc0:	2000108c 	.word	0x2000108c
 8004fc4:	20001088 	.word	0x20001088
 8004fc8:	20001090 	.word	0x20001090

08004fcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fd4:	4b27      	ldr	r3, [pc, #156]	@ (8005074 <prvInsertBlockIntoFreeList+0xa8>)
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e002      	b.n	8004fe0 <prvInsertBlockIntoFreeList+0x14>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d8f7      	bhi.n	8004fda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d108      	bne.n	800500e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	441a      	add	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	441a      	add	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d118      	bne.n	8005054 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b14      	ldr	r3, [pc, #80]	@ (8005078 <prvInsertBlockIntoFreeList+0xac>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d00d      	beq.n	800504a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	441a      	add	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e008      	b.n	800505c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800504a:	4b0b      	ldr	r3, [pc, #44]	@ (8005078 <prvInsertBlockIntoFreeList+0xac>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e003      	b.n	800505c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d002      	beq.n	800506a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	2000107c 	.word	0x2000107c
 8005078:	20001084 	.word	0x20001084

0800507c <memset>:
 800507c:	4603      	mov	r3, r0
 800507e:	4402      	add	r2, r0
 8005080:	4293      	cmp	r3, r2
 8005082:	d100      	bne.n	8005086 <memset+0xa>
 8005084:	4770      	bx	lr
 8005086:	f803 1b01 	strb.w	r1, [r3], #1
 800508a:	e7f9      	b.n	8005080 <memset+0x4>

0800508c <_reclaim_reent>:
 800508c:	4b29      	ldr	r3, [pc, #164]	@ (8005134 <_reclaim_reent+0xa8>)
 800508e:	b570      	push	{r4, r5, r6, lr}
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4604      	mov	r4, r0
 8005094:	4283      	cmp	r3, r0
 8005096:	d04b      	beq.n	8005130 <_reclaim_reent+0xa4>
 8005098:	69c3      	ldr	r3, [r0, #28]
 800509a:	b1ab      	cbz	r3, 80050c8 <_reclaim_reent+0x3c>
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	b16b      	cbz	r3, 80050bc <_reclaim_reent+0x30>
 80050a0:	2500      	movs	r5, #0
 80050a2:	69e3      	ldr	r3, [r4, #28]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	5959      	ldr	r1, [r3, r5]
 80050a8:	2900      	cmp	r1, #0
 80050aa:	d13b      	bne.n	8005124 <_reclaim_reent+0x98>
 80050ac:	3504      	adds	r5, #4
 80050ae:	2d80      	cmp	r5, #128	@ 0x80
 80050b0:	d1f7      	bne.n	80050a2 <_reclaim_reent+0x16>
 80050b2:	69e3      	ldr	r3, [r4, #28]
 80050b4:	4620      	mov	r0, r4
 80050b6:	68d9      	ldr	r1, [r3, #12]
 80050b8:	f000 f864 	bl	8005184 <_free_r>
 80050bc:	69e3      	ldr	r3, [r4, #28]
 80050be:	6819      	ldr	r1, [r3, #0]
 80050c0:	b111      	cbz	r1, 80050c8 <_reclaim_reent+0x3c>
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f85e 	bl	8005184 <_free_r>
 80050c8:	6961      	ldr	r1, [r4, #20]
 80050ca:	b111      	cbz	r1, 80050d2 <_reclaim_reent+0x46>
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 f859 	bl	8005184 <_free_r>
 80050d2:	69e1      	ldr	r1, [r4, #28]
 80050d4:	b111      	cbz	r1, 80050dc <_reclaim_reent+0x50>
 80050d6:	4620      	mov	r0, r4
 80050d8:	f000 f854 	bl	8005184 <_free_r>
 80050dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80050de:	b111      	cbz	r1, 80050e6 <_reclaim_reent+0x5a>
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 f84f 	bl	8005184 <_free_r>
 80050e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050e8:	b111      	cbz	r1, 80050f0 <_reclaim_reent+0x64>
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 f84a 	bl	8005184 <_free_r>
 80050f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80050f2:	b111      	cbz	r1, 80050fa <_reclaim_reent+0x6e>
 80050f4:	4620      	mov	r0, r4
 80050f6:	f000 f845 	bl	8005184 <_free_r>
 80050fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80050fc:	b111      	cbz	r1, 8005104 <_reclaim_reent+0x78>
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 f840 	bl	8005184 <_free_r>
 8005104:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005106:	b111      	cbz	r1, 800510e <_reclaim_reent+0x82>
 8005108:	4620      	mov	r0, r4
 800510a:	f000 f83b 	bl	8005184 <_free_r>
 800510e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005110:	b111      	cbz	r1, 8005118 <_reclaim_reent+0x8c>
 8005112:	4620      	mov	r0, r4
 8005114:	f000 f836 	bl	8005184 <_free_r>
 8005118:	6a23      	ldr	r3, [r4, #32]
 800511a:	b14b      	cbz	r3, 8005130 <_reclaim_reent+0xa4>
 800511c:	4620      	mov	r0, r4
 800511e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005122:	4718      	bx	r3
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	4620      	mov	r0, r4
 8005128:	f000 f82c 	bl	8005184 <_free_r>
 800512c:	4631      	mov	r1, r6
 800512e:	e7bb      	b.n	80050a8 <_reclaim_reent+0x1c>
 8005130:	bd70      	pop	{r4, r5, r6, pc}
 8005132:	bf00      	nop
 8005134:	20000034 	.word	0x20000034

08005138 <__libc_init_array>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	2600      	movs	r6, #0
 800513c:	4d0c      	ldr	r5, [pc, #48]	@ (8005170 <__libc_init_array+0x38>)
 800513e:	4c0d      	ldr	r4, [pc, #52]	@ (8005174 <__libc_init_array+0x3c>)
 8005140:	1b64      	subs	r4, r4, r5
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	42a6      	cmp	r6, r4
 8005146:	d109      	bne.n	800515c <__libc_init_array+0x24>
 8005148:	f000 f870 	bl	800522c <_init>
 800514c:	2600      	movs	r6, #0
 800514e:	4d0a      	ldr	r5, [pc, #40]	@ (8005178 <__libc_init_array+0x40>)
 8005150:	4c0a      	ldr	r4, [pc, #40]	@ (800517c <__libc_init_array+0x44>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	42a6      	cmp	r6, r4
 8005158:	d105      	bne.n	8005166 <__libc_init_array+0x2e>
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005160:	4798      	blx	r3
 8005162:	3601      	adds	r6, #1
 8005164:	e7ee      	b.n	8005144 <__libc_init_array+0xc>
 8005166:	f855 3b04 	ldr.w	r3, [r5], #4
 800516a:	4798      	blx	r3
 800516c:	3601      	adds	r6, #1
 800516e:	e7f2      	b.n	8005156 <__libc_init_array+0x1e>
 8005170:	08005314 	.word	0x08005314
 8005174:	08005314 	.word	0x08005314
 8005178:	08005314 	.word	0x08005314
 800517c:	08005318 	.word	0x08005318

08005180 <__retarget_lock_acquire_recursive>:
 8005180:	4770      	bx	lr

08005182 <__retarget_lock_release_recursive>:
 8005182:	4770      	bx	lr

08005184 <_free_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4605      	mov	r5, r0
 8005188:	2900      	cmp	r1, #0
 800518a:	d040      	beq.n	800520e <_free_r+0x8a>
 800518c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005190:	1f0c      	subs	r4, r1, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	bfb8      	it	lt
 8005196:	18e4      	addlt	r4, r4, r3
 8005198:	f000 f83c 	bl	8005214 <__malloc_lock>
 800519c:	4a1c      	ldr	r2, [pc, #112]	@ (8005210 <_free_r+0x8c>)
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	b933      	cbnz	r3, 80051b0 <_free_r+0x2c>
 80051a2:	6063      	str	r3, [r4, #4]
 80051a4:	6014      	str	r4, [r2, #0]
 80051a6:	4628      	mov	r0, r5
 80051a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ac:	f000 b838 	b.w	8005220 <__malloc_unlock>
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	d908      	bls.n	80051c6 <_free_r+0x42>
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	1821      	adds	r1, r4, r0
 80051b8:	428b      	cmp	r3, r1
 80051ba:	bf01      	itttt	eq
 80051bc:	6819      	ldreq	r1, [r3, #0]
 80051be:	685b      	ldreq	r3, [r3, #4]
 80051c0:	1809      	addeq	r1, r1, r0
 80051c2:	6021      	streq	r1, [r4, #0]
 80051c4:	e7ed      	b.n	80051a2 <_free_r+0x1e>
 80051c6:	461a      	mov	r2, r3
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	b10b      	cbz	r3, 80051d0 <_free_r+0x4c>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d9fa      	bls.n	80051c6 <_free_r+0x42>
 80051d0:	6811      	ldr	r1, [r2, #0]
 80051d2:	1850      	adds	r0, r2, r1
 80051d4:	42a0      	cmp	r0, r4
 80051d6:	d10b      	bne.n	80051f0 <_free_r+0x6c>
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	4401      	add	r1, r0
 80051dc:	1850      	adds	r0, r2, r1
 80051de:	4283      	cmp	r3, r0
 80051e0:	6011      	str	r1, [r2, #0]
 80051e2:	d1e0      	bne.n	80051a6 <_free_r+0x22>
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4408      	add	r0, r1
 80051ea:	6010      	str	r0, [r2, #0]
 80051ec:	6053      	str	r3, [r2, #4]
 80051ee:	e7da      	b.n	80051a6 <_free_r+0x22>
 80051f0:	d902      	bls.n	80051f8 <_free_r+0x74>
 80051f2:	230c      	movs	r3, #12
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	e7d6      	b.n	80051a6 <_free_r+0x22>
 80051f8:	6820      	ldr	r0, [r4, #0]
 80051fa:	1821      	adds	r1, r4, r0
 80051fc:	428b      	cmp	r3, r1
 80051fe:	bf01      	itttt	eq
 8005200:	6819      	ldreq	r1, [r3, #0]
 8005202:	685b      	ldreq	r3, [r3, #4]
 8005204:	1809      	addeq	r1, r1, r0
 8005206:	6021      	streq	r1, [r4, #0]
 8005208:	6063      	str	r3, [r4, #4]
 800520a:	6054      	str	r4, [r2, #4]
 800520c:	e7cb      	b.n	80051a6 <_free_r+0x22>
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	200011d0 	.word	0x200011d0

08005214 <__malloc_lock>:
 8005214:	4801      	ldr	r0, [pc, #4]	@ (800521c <__malloc_lock+0x8>)
 8005216:	f7ff bfb3 	b.w	8005180 <__retarget_lock_acquire_recursive>
 800521a:	bf00      	nop
 800521c:	200011cc 	.word	0x200011cc

08005220 <__malloc_unlock>:
 8005220:	4801      	ldr	r0, [pc, #4]	@ (8005228 <__malloc_unlock+0x8>)
 8005222:	f7ff bfae 	b.w	8005182 <__retarget_lock_release_recursive>
 8005226:	bf00      	nop
 8005228:	200011cc 	.word	0x200011cc

0800522c <_init>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	bf00      	nop
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr

08005238 <_fini>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr
